<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sce.PlayStation.HighLevel.GameEngine2D</name>
    </assembly>
    <members>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D">
            @if LANG_EN
            <summary>
            2D view setup and navigation. Uses GraphicsContextAlpha + DrawHelpers
            for the matrix stack and rulers/axis drawing.
            </summary>
            @endif
            @if LANG_JA	
            <summary>
            2Dビューの設定とナビゲーション。
            行列のスタックとルーラーと軸の描画には GraphicsContextAlpha と DrawHelpers をお使いください。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera">
            @if LANG_EN
            <summary>
            A common interface for Camera2D and Camera3D.
            </summary>
            @endif
            @if LANG_JA
            <summary>Camera2D と Camera3D 用の共通インターフェース。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetAspectFromViewport">
            @if LANG_EN
            <summary>
            Read aspect ratio from viewport and update camera projection data accordingly.
            </summary>
            @endif
            @if LANG_JA
            <summary>ビューポートからアスペクト比を読み、その値からカメラプロジェクションのデータを更新します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Push">
            @if LANG_EN
            <summary>
            Push all matrices on the stack, and set Projection and View.
            </summary>
            @endif
            @if LANG_JA
            <summary>スタック上の全ての行列をプッシュし、Projection と View を設定します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Pop">
            @if LANG_EN
            <summary>
            Pop all matrices from the stack.
            </summary>
            @endif
            @if LANG_JA
            <summary>スタックから全ての行列をポップします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetTransform">
            @if LANG_EN
            <summary>
            Return the camera transform matrix (orthonormal positioning matrix), as a Matrix4.
            GetTransform().InverseOrthonormal() is what you push on the view matrix stack.
            </summary>
            @endif
            @if LANG_JA
            <summary>Matrix4としてカメラ変換行列（並行位置行列）を返します。
            GetTransform().InverseOrthonormal() はビュー行列スタックにプッシュするものです。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.DebugDraw(System.Single)">
            @if LANG_EN
            <summary>
            Draw a world grid and the world coordinate system, for debug.
            Note that DebugDraw() doesn't call Push()/Pop() internally. It is your responsability to call it between this Camera's Push()/Pop().
            </summary>
            @endif
            @if LANG_JA
            <summary>デバッグ用にワールドのグリッドと、ワールド座標系を描画します。
            DebugDraw() は内部的にPush()/Pop()を呼び出さないことに注意してください。カメラのPush()/Pop()は、開発者が呼び出してください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Navigate(System.Int32)">
            @if LANG_EN
            <summary>
            Process input for debug navigation.
            </summary>
            @endif
            @if LANG_JA
            <summary>デバッグ用ナビゲーションのための入力を処理します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetViewFromViewport">
            @if LANG_EN
            <summary>
            Set a camera view so that the bottom left of the screen matches world point (0,0) and 
            the top right of the screen matches world point (screen width, sreen height).
            </summary>
            @endif
            @if LANG_JA
            <summary>スクリーンの左下がワールドの point(0,0)、スクリーンの右上が point(スクリーンの幅, スクリーンの高さ) に一致するよう、カメラビューを設定します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Given a point in normalized screen coordinates (-1->1), return its corresponding world position.
            </summary>
            @endif
            @if LANG_JA
            <summary>正規化されたスクリーンの座標系 (-1 -> 1)で与えられた点を、対応するワールドの位置で返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetTouchPos(System.Int32,System.Boolean)">
            @if LANG_EN
            <summary>
            Return the 'nth' touch position in world coordinates.
            The 'prev' flag is for internal use only.
            </summary>
            @endif
            @if LANG_JA
            <summary>ワールド座標系での引数 'nth' のタッチ位置を返します。'prev' フラグは内部的に使用します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.CalcBounds">
            @if LANG_EN
            <summary>
            Calculate the world bounds currently visible on screen.
            This function is 2D only, somehow extended to 3D.
            </summary>
            @endif
            @if LANG_JA
            <summary>スクリーン上で現在表示可能なワールドの境界を計算します。この関数は2Dのみ対応しています。(3Dに拡張予定です)。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetPixelSize">
            @if LANG_EN
            <summary>
            Based on current viewport size, get the size of a "screen pixel" in world coordinates.
            Can be used to determine scale factor needed to draw sprites 1:1 for example.
            2D only, somehow extended to 3D.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            現在のビューポートのサイズに基づいて、ワールド座標における"スクリーンピクセル"のサイズを取得します。
            例えば、スプライトやフォントを1:1で描画するために必要なスケールファクターを決定するために使用することができます。
            この関数は2Dのみ対応しています。(3Dに拡張予定です)。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetTouchPlaneMatrix(Sce.PlayStation.Core.Matrix4)">
            @if LANG_EN
            <summary>
            The the orientation of the 3D plane that should be used by GetTouchPos(). 
            3D only.
            </summary>
            @endif
            @if LANG_JA
            <summary>GetTouchPos（）によって使用される、3次元平面の向きを設定します。3次元のみ対応しています。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers)">
            @if LANG_EN
            <summary>
            </summary>
            <param name="gl">Needed for the matrix stack</param>
            <param name="draw_helpers">Needed only for debug draw</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="gl">行列スタックに必要な参照。</param>
            <param name="draw_helpers">デバッグ描画に必要な参照。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewX(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Define 2D view by specifying a view center and the X support vector that determines scale and rotation.
            The X support vector is the vector going from the center of the screen to the middle of the right
            edge of the screen, expressed in the viewed world coordinates.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            ビューの中心と、スケールと回転を決定するXサポートベクトルを指定することにより、2Dビューを定義します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewY(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Define 2D view by specifying a view center and the Y support vector that determines scale and rotation.
            The Y support vector is the vector going from the center of the screen to the middle of the top
            edge of the screen, expressed in the viewed world coordinates.
            </summary>
            @endif
            @if LANG_JA
            <summary>ビューの中心と、スケールと回転を決定するYサポートベクトルを指定することにより、2Dビューを定義します。
            Yサポートベクトルは、ビューのワールド座標系で表現される、画面の中心からスクリーンの上端の中央に向かうベクトルです。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromWidthAndCenter(System.Single,Sce.PlayStation.Core.Vector2)">
             @if LANG_EN
             <summary>
             Define 2D view by specifying a view center (the world coordinate of the point that is 
             a the center of the screen), and the amount of world we can see along the screen width.
             
             This is the same as doing SetViewX( new Vector2(width*0.5f,0.0f), center ).
             
             Note that this call alone is enough to define your camera. SetViewFromHeightAndCenter 
             is not needed (the width is deduced from aspect ratio automatically).
             </summary>
             @endif
             @if LANG_JA
             <summary>
             ビューの中心 ( スクリーンの中心であるワールド座標系の点 ) とスクリーンの幅を指定することにより、2Dビューを定義します。
             このメソッドは、SetViewX( new Vector2(width*0.5f,0.0f), center ) を行うのと同じです。
            
             このメソッドの呼び出しだけで、カメラを定義することができます。 SetViewFromHeightAndCenter（幅は自動的にアスペクト比から推定されます）は必要はありません。
             </summary>
             @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromHeightAndCenter(System.Single,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Define 2D view by specifying a view center (the world coordinate of the point that is 
            a the center of the screen), and the amount of world we can see along the screen height.
            
            This is the same as doing SetViewY( new Vector2(0.0f,height*0.5f), center ).
            
            Note that this call alone is enough to define your camera. SetViewFromWidthAndCenter 
            is not needed (the width is deduced from aspect ratio automatically).
            </summary>
            @endif
            @if LANG_JA
            <summary>
            ビューの中心 ( スクリーンの中心であるワールド座標系の点 ) とスクリーンの幅を指定することにより、2Dビューを決定します。
            このメソッドは、SetViewY( new Vector2(0.0f,height*0.5f), center )を行うのと同じです。
            
            このメソッドの呼び出しだけで、カメラを定義することができます。 SetViewFromHeightAndCenter（幅は自動的にアスペクト比から推定されます）必要はありません。
            </summary>		
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromHeightAndBottomLeft(System.Single,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Define a 2D view by specifying the world coordinate of the bottom left of the screen, 
            and the amount of world we can see along the screen height.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            スクリーンの左下のワールド座標と、スクリーンの高さを指定することにより、2Dビューを定義します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromWidthAndBottomLeft(System.Single,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Define a 2D view by specifying the world coordinate of the bottom left of the screen, 
            and the amount of world we can see along the screen width.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            スクリーンの左下のワールド座標系と、スクリーンの幅を指定することにより、2Dビューを定義します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromViewport">
            @if LANG_EN
            <summary>
            Define a 2D view that matches the viewport, if you want to work in pixel coordinates.
            Bottom left is 0,0, top right is the size of the screen.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            ピクセルの座標系で、ビューポートに相当する2Dビューを作成します。
            左下が (0,0)、右上がスクリーンのサイズになります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetAspectFromViewport">
            @if LANG_EN
            <summary>
            Read current viewport to update aspect ratio.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            アスペクト比を更新するため、現在のビューポートを読みます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.X">
            @if LANG_EN
            <summary>
            The world vector that maps to (screen center, middle of right screen edge)
            Aspect ratio is taken into account.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            スクリーン中央、画面右端の中央に位置する、ワールドベクトル。
            アスペクト比が反映されています。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Y">
            @if LANG_EN
            <summary>
            The world vector that maps to (screen center, middle of top screen edge)
            Aspect ratio is taken into account. This is also the direction of the
            up vector if you were going to use a 3d LookAt.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            スクリーン中央、画面上端の中央に位置する、ワールドベクトル。
            アスペクト比が反映されています。3d LookAtを使った場合、これはupベクトルの方向にもなります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.CalcBounds">
            @if LANG_EN
            <summary>
            Calculate the bounds (in world coordinates) of the portion of world visible on screen.
            This can be used for screen culling (it is used by DrawRulers for instance).
            If there is no rotation, the bounds matches the screen exactly.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            スクリーン上でワールドの視界部分の境界(ワールド座標系で)を計算します。
            これは、スクリーンのカリング（例えばDrawRulersで使用されます）に使用することができます。
            回転がない場合、境界はスクリーンに正確に一致します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetTransform">
            @if LANG_EN
            <summary>
            Calculate the camera transform matrix (orthonormal positioning matrix), as a Matrix4.
            GetTransform().InverseOrthonormal() is what you push on the view matrix stack.
            </summary>
            @endif
            @if LANG_JA
            <summary>Matrix4として、カメラ変換行列 ( 正規直交位置行列 ) を計算します。
            GetTransform.InverseOrthonormal（）はビュー行列スタックにプッシュします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.NormalizedToWorldMatrix">
            @if LANG_EN
            <summary>
            Return the NormalizedToWorld matrix, as a Matrix3.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Matrix3として、正規化したワールド行列を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Given a point in normalized screen coordinates (-1->1), return its corresponding world position.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            正規化されたスクリーン座標系（-1 - > 1）の点として与えられた、ワールド位置を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetTouchPos(System.Int32,System.Boolean)">
            @if LANG_EN
            <summary>
            Return the 'nth' touch position in world coordinates.
            The 'prev' flag is for internal use only.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            ワールド座標系で引数 nth のタッチ位置を返します。
            prev フラグは内部的に使用されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Navigate(System.Int32)">
            @if LANG_EN
            <summary>
            Debug navigation: drag/zoom using touch interface.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            デバッグ用のナビゲーション : タッチインターフェースのドラッグ/ズームに使用します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Push">
            @if LANG_EN
            <summary>
            Push all necessary matrices on the matrix stack.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            行列スタック上のすべての必要な行列をプッシュします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Pop">
            @if LANG_EN
            <summary>
            Pop all camera matrices from the matrix stack.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            行列スタックからすべてのカメラ行列をポップします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.DebugDraw(System.Single)">
            @if LANG_EN
            <summary>
            Draw default grid, rulers spacing 1, grey grid + black axis,
            with coordinate system arrows on top.
            Note that DebugDraw() doesn't call Push()/Pop() internally. It is your responsability to call it between this Camera's Push()/Pop().
            </summary>
            @endif
            @if LANG_JA
            <summary>
            座標系の矢印とともに、ルーラーの間隔 1、灰色のグリッドと黒の軸でデフォルトのグリッドを描画します。
            DebugDraw（）は内部的にプッシュ（）/ポップ（）を呼び出さないことに注意してください。カメラのPush()/Pop()は、開発者が呼び出してください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetPixelSize">
            @if LANG_EN
            <summary>
            Based on current viewport size, get the size of a "screen pixel" in world coordinates.
            Can be used to determine scale factor needed to draw sprites or fonts 1:1 for example.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            現在のビューポートのサイズに基づいて、ワールド座標における"スクリーンピクセル"のサイズを取得します。
            例えば、スプライトやフォントを1:1で描画するために必要なスケールファクターを決定するために使用することができます。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Center">
            @if LANG_EN
            <summary>
            The world position that maps to screen center.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            スクリーン中央に位置するワールド位置。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Aspect">
            @if LANG_EN
            <summary>
            Aspect ratio width/height.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            幅/高さ のアスペクト比。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Znear">
            @if LANG_EN
            <summary>
            Projection's near z value.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            プロジェクションのnear Z値。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Zfar">
            @if LANG_EN
            <summary>
            Projection's far z value.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            プロジェクションのfar Z値。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Data">
            Pack some internal bits in a struct so we can copy easily
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Data.m_support_unit_vec">
            The support vector is the 2D world vector that maps to "from center of screen to middle of right screen edge"
            (or "to the middle of the top screen edge" if m_support_is_y is set to true). It is decomposed into
            a unit vector component 'm_support_unit_vec' and its len 'm_support_scale'.
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum">
            @if LANG_EN
            <summary>
            Frustum object, used by Camera2D and Camera3D. 
            It only deals with perspective.
            </summary>
            @endif
            @if LANG_JA
            <summary>Camera2DとCamera3Dによって使用される視錐台 (Frustum) のオブジェクト。
            透視変換に利用します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.#ctor">
            @if LANG_EN
            <summary>Frustum constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Aspect">
            @if LANG_EN
            <summary>Width/Height aspect ratio.</summary>
            @endif
            @if LANG_JA
            <summary>幅/高さ のアスペクト比。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Znear">
            @if LANG_EN
            <summary>
            Projection's near z value.
            </summary>
            @endif
            @if LANG_JA
            <summary>プロジェクションの near Z値。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Zfar">
            @if LANG_EN
            <summary>
            Projection's far z value.
            </summary>
            @endif
            @if LANG_JA
            <summary>プロジェクションの far Z値。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.GetPoint(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>
            Given a point in normalized screen coordinates (bottom left (-1,1) and upper right (1,1)), 
            and a z value, return the corresponding 3D point in view space.
            </summary>
            @endif
            @if LANG_JA
            <summary>正規化されたスクリーン座標（左下（-1,1）と右上（1,1））の位置とz値から、ビュー空間内の対応する3D位置を返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Matrix">
            @if LANG_EN
            <summary>The projection as a matrix.</summary>
            @endif
            @if LANG_JA
            <summary>行列としてのプロジェクション。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.FovX">
            @if LANG_EN
            <summary>
            Field of view along X axis. 
            If you set the field of view with this property, X becomes the main fov direction for this Frustum, 
            and FovY value's correctness will depend on Aspect's value. 
            </summary>
            @endif
            @if LANG_JA
            <summary>X軸に沿ったビューのフィールド。
            このプロパティを使用してビューのフィールドを設定した場合、Xはこの錐台のメインの視野方向となり、FovY値の正しさは、アスペクトの値に依存します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.FovY">
            @if LANG_EN
            <summary>
            Field of view along Y axis. 
            If you set the field of view with this property, Y becomes the main fov direction for this Frustum, 
            and FovX value's correctness will depend on Aspect's value. 
            </summary>
            @endif
            @if LANG_JA
            <summary>Y軸に沿ったビューのフィールド。
            このプロパティを使用してビューのフィールドを設定した場合、Yはこの錐台のメインの視野方向となり、FovY値の正しさは、アスペクトの値に依存します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D">
            @if LANG_EN
            <summary>The 3D camera here is quite primitive, as the library is mainly 2D.</summary>
            @endif
            @if LANG_JA
            <summary>基本的な3Dカメラ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers)">
            @if LANG_EN
            <summary>constructor.
            </summary>
            <param name="gl">Needed for its matrix stack.</param>
            <param name="draw_helpers">Needed only for debug draw (DebugDraw).</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="gl">行列スタックに必要な参照。</param>
            <param name="draw_helpers">デバッグ用描画に必要な参照。</param>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Eye">
            @if LANG_EN
            <summary>Eye positions.</summary>
            @endif
            @if LANG_JA
            <summary>視点位置。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Center">
            @if LANG_EN
            <summary>View center/target position.</summary>
            @endif
            @if LANG_JA
            <summary>ビューの中央/ターゲットの位置。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Up">
            @if LANG_EN
            <summary>Up vector.</summary>
            @endif
            @if LANG_JA
            <summary>上方向のベクトル。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Frustum">
            @if LANG_EN
            <summary>The perspective.</summary>
            @endif
            @if LANG_JA
            <summary>透視変換の錐台。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.TouchPlaneMatrix">
            @if LANG_EN
            <summary>
            This model matrix is used by NormalizedToWorld/GetTouchPos so we can
            define a 2d plane to raytrace touch direction against.
            </summary>
            @endif
            @if LANG_JA
            <summary>このモデル行列はNormalizedToWorld/ GetTouchPosで使用されます。レイトレースのタッチ方向に対して、2D平面を定義します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetFromCamera2D(Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D)">
            @if LANG_EN
            <summary>
            Position the camera and set the persective so that it matches
            exactly the 2D ortho view (when all sprites are drawn
            on the Z=0 plane anyway, which is the default).
            </summary>
            @endif
            @if LANG_JA
            <summary>
            カメラを配置し、2D並行投影ビューに正確にあうように透視変換をセットします。全てのスプライトが Z=0 の平面に描画されているとき、デフォルトになります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetAspectFromViewport">
            @if LANG_EN
            <summary>
            Update the aspect ratio based on current viewport.
            </summary>
            @endif
            @if LANG_JA
            <summary>現在のビューポートに基づき、アスペクト比を更新します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetTransform">
            @if LANG_EN
            <summary>
            Calculate the camera transform marix (positioning matrix), as a Matrix4.
            GetTransform().InverseOrthonormal() is what you push on the view matrix stack.
            Return an orthonormal matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>Matrix4としてカメラ変換行列（位置行列）を計算します。
            GetTransform().InverseOrthonormal() はビュー行列スタックにプッシュするものです。
            正規直交行列を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Push">
            @if LANG_EN
            <summary>
            Push all necessary matrices on the matrix stack.
            </summary>
            @endif
            @if LANG_JA
            <summary>行列スタックに必要な全ての行列をプッシュします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Pop">
            @if LANG_EN
            <summary>
            Pop all camera matrices from the matrix stack.
            </summary>
            @endif
            @if LANG_JA
            <summary>行列スタックから全てのカメラ行列をポップします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.DebugDraw(System.Single)">
            @if LANG_EN
            <summary>
            Draw a canonical debug grid.
            Note that DebugDraw() doesn't call Push()/Pop() internally. It is your responsability to call it between this Camera's Push()/Pop().
            </summary>
            @endif
            @if LANG_JA
            <summary>標準的なデバッググリッドを描画します。
            DebugDraw() は内部的にPush()/Pop()を呼び出さないことに注意してください。カメラのPush()/Pop()は、開発者が呼び出してください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Note that unlike Camera2D.NormalizedToWorld, Camera3D.NormalizedToWorld might not return a
            valid position, since it's a ray/plane intersection.
            
            The return point is in 2d, in touch plane local coordinates. This function uses the
            TouchPlaneMatrix property to know which plane to intersect, so TouchPlaneMatrix must
            have been set beforehand (use Node.NormalizedToWorld does it for you).
            </summary>
            @endif
            @if LANG_JA
            <summary>Camera3D.NormalizedToWorldは有効な位置を返しません。なぜなら、それはray/planeの交差であるからです。 Camera2D.NormalizedToWorldとは違うことに、注意してください。
            
            返り値は、2D、タッチ平面のローカル座標内の位置座標として返されます。
            この関数は、どの平面と交差しているかを知るために、TouchPlaneMatrixプロパティを使います。そのため、TouchPlaneMatrixを前もって設定しておく必要があります。(設定にはNode.NormalizedToWorldを使用してください)
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetTouchPos(System.Int32,System.Boolean)">
            @if LANG_EN
            <summary>
            Return the 'nth' touch position in world coordinates.
            The 'prev' flag is for internal use only.
            </summary>
            @endif
            @if LANG_JA
            <summary>ワールド座標で引数 nthのタッチ位置を返します。'prev'フラグは内部的に使用します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.CalcBounds">
            @if LANG_EN
            <summary>
            Return the most recent bounds set by SetFromCamera2D.
            </summary>
            @endif
            @if LANG_JA
            <summary>SetFromCamera2Dによって設定された、直近の境界を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetViewFromViewport">
            @if LANG_EN
            <summary>
            Creates a 3D view that max the screen bounds in pixel size (in plane z=0).
            Exactly match the 3D frustum. Eye distance to z=0 plane is calculated based
            on current Frustum.FovY value.
            </summary>
            @endif
            @if LANG_JA
            <summary>ピクセルサイズ (平面 z =0) のスクリーン境界を最大にする、3Dビューを作成します。正確に3次元視錐台と一致します。視点からz=0平面への距離は、現在のFrustum.FovY値に基づいて計算されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetPixelSize">
            @if LANG_EN
            <summary>
            Based on current viewport size, get the size of a "screen pixel" in world coordinates.
            Can be used to determine scale factor needed to draw sprites or fonts 1:1 for example.
            Uses the most recent Bounds2 set by SetFromCamera2D.
            </summary>
            @endif
            @if LANG_JA
            <summary>現在のビューポートのサイズに基づいて、ワールド座標における'スクリーンピクセル'のサイズを取得します。
            例えば、スプライトやフォントを1:1で描画するために必要なスケールファクターを決定するために使用することができます。
            SetFromCamera2Dによって設定された最新のBounds2を使用しています。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Navigate(System.Int32)">
            @if LANG_EN
            <summary>
            Debug camera navigation.
            </summary>
            @endif
            @if LANG_JA
            <summary>デバッグ用カメラのナビゲーション。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetTouchPlaneMatrix(Sce.PlayStation.Core.Matrix4)">
            @if LANG_EN
            <summary>
            Set the model plane matrix used in GetTouchPos and NormalizedToWorld.
            </summary>
            @endif
            @if LANG_JA
            <summary> GetTouchPos と NormalizedToWorldで使用される、モデル平面行列を設定します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.WrapIndex(System.Int32,System.Int32)">
            @if LANG_EN
            <summary>
            Loop index in [0,n-1], works with negative indexes too (-1 returns n-1 etc).
            Note that n is a size (for example, the size of an array object) and therefore its value is assumed to be > 0.
            If n is negative or zero the result is undefined.
            </summary>
            @endif
            @if LANG_JA
            <summary>[0,n-1]の範囲でループするインデックス。負のインデックスでも動作します。(-1 なら n-1 などを返す)
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.ClampIndex(System.Int32,System.Int32)">
            @if LANG_EN
            <summary>
            Clamp index in [0,n-1]
            Same as Clamp( i, 0, n-1 ).
            </summary>
            @endif
            @if LANG_JA
            <summary>[0,n-1]の範囲内でインデックスをクランプします。Clamp( i, 0, n-1 )と同じです。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.GetEmbeddedResource(System.String)">
            @if LANG_EN
            <summary>
            Get an embedded file's binary data, used for shaders mostly.
            </summary>
            @endif
            @if LANG_JA
            <summary>埋め込まれたファイルのバイナリデータを取得します。主にシェーダープログラムのために利用します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.FrameCount">
            @if LANG_EN
            <summary>Global frame counter.</summary>
            @endif
            @if LANG_JA
            <summary>グローバルなフレームカウンタ。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers">
            @if LANG_EN
            <summary>
            Some basic drawing functionalities (2D/3D).
            This class is mostly an ImmediateMode object coupled with a debug shader. 
            You shouldn't use DrawHelpers for anything else than visual debugging, 
            as by nature it is not performance friendly at all.
            </summary>
            @endif
            @if LANG_JA
            <summary>2D/3Dの基本的な描画関数を提供します。このクラスは主にデバッグシェーダーを使った ImmediateMode のオブジェクトです。
            パフォーマンスが良くないため、デバッグ以外の用途で DrawHelpers を使用することは推奨しません。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32)">
            @if LANG_EN
            <summary>
            </summary>
            <param name="gl">The core graphics context.</param>
            <param name="max_vertices">The maximum number of vertices you will be able to
            write in one frame with this DrawHelpers object.</param>
            @endif
            @if LANG_JA
            <summary>
            </summary>
            <param name="gl">コアグラフィックスのコンテキスト。</param>
            <param name="max_vertices">この DrawHelpers オブジェクトを使って、1フレームで描画する頂点の最大数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Dispose の実装。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmBegin(Sce.PlayStation.Core.Graphics.DrawMode,System.UInt32)">
            @if LANG_EN
            <summary>
            Start a new immediate primitive. 
            </summary>
            <param name="mode">The draw primive type.</param>
            <param name="max_vertices_intended">You must specify the maximum number of 
            vertices you intend to write with ImmVertex(): the number of ImmVertex() calls 
            following this function must be inferior or equal to 'max_vertices_intended'.
            </param>
            @endif
            @if LANG_JA
            <summary>新しいイミーディエイトプリミティブを開始します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex)">
            @if LANG_EN
            <summary>
            Add a vertex to current primitive.
            </summary>
            @endif
            @if LANG_JA
            <summary>頂点を現在のプリミティブに追加します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.Core.Vector4)">
            @if LANG_EN
            <summary>
            Add a vertex to current primitive, using the most recent color set by SetColor().
            </summary>
            @endif
            @if LANG_JA
            <summary>直近のSetColor() で設定された色を使い、現在のプリミティブに頂点を追加します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Add a vertex to current primitive, using the most recent color set by SetColor().
            (z,w) is set to (0,1).
            </summary>
            @endif
            @if LANG_JA
            <summary>直近のSetColor() で設定された色を使い、現在のプリミティブに頂点を追加します。
            (z,w) は (0,1)でセットします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmEnd">
            @if LANG_EN
            <summary>
            Finish current primitive (this function triggers the actual draw call).
            </summary>
            @endif
            @if LANG_JA
            <summary>
            現在のプリミティブを終了します。この関数は、実際の描画呼び出しをトリガー(引き起こし)します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ShaderPush">
            @if LANG_EN
            <summary>
            ShaderPush() reads current MVP matrix and sets the current shader.
            For DrawHelpers we allow nesting (shader parameters get updated
            internally accordingly).
            </summary>
            @endif
            @if LANG_JA
            <summary>ShaderPush() は現在のMVP行列を読み、現在のシェーダーをセットします。
            DrawHelpers ではネストで処理できます。シェーダーのパラメータは内部的に更新されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ShaderPop">
            @if LANG_EN
            <summary>
            "Pop" the shader. Number of ShaderPush() calls must match the number of ShaderPush().
            </summary>
            @endif
            @if LANG_JA
            <summary>
            シェーダーをポップします。 ShaderPush()の回数は、ShaderPush()の回数に一致しなければなりません。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.SetColor(Sce.PlayStation.Core.Vector4)">
            @if LANG_EN
            <summary>
            Set the color to be used by the next calls to ImmVertex.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            次の ImmVertex の呼び出しで使われる色をセットします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawBounds2Fill(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            @if LANG_EN
            <summary>
            Draw a filled axis aligned rectangle.
            </summary>
            @endif
            @if LANG_JA
            <summary>四角形を描画します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawBounds2(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            @if LANG_EN
            <summary>
            Draw a wireframe axis aligned rectangle.
            </summary>
            @endif
            @if LANG_JA
            <summary>線で四角形を描画します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawConvexPoly2(Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2)">
            @if LANG_EN
            <summary>
            Draw convex polygon.
            </summary>
            @endif
            @if LANG_JA
            <summary>凸ポリゴンを描画します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDisk(Sce.PlayStation.Core.Vector2,System.Single,System.UInt32)">
            @if LANG_EN
            <summary>
            Draw a filled disk.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="n">Tesselation.</param>
            @endif
            @if LANG_JA
            <summary>塗りつぶした円盤を描画します。
            </summary>
            <param name="center">中心。</param>
            <param name="radius">半径。</param>
            <param name="n">分割数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCircle(Sce.PlayStation.Core.Vector2,System.Single,System.UInt32)">
            @if LANG_EN
            <summary>
            Draw a filled circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="n">Tesselation.</param>
            @endif
            @if LANG_JA
            <summary>塗りつぶした円を描画します。
            </summary>
            <param name="center">中心。</param>
            <param name="radius">半径。</param>
            <param name="n">分割数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCoordinateSystem2D(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams)">
            @if LANG_EN
            <summary>
            Draw the coordinate system represented by a transformation matrix 
            using arrows. The x vector is represented by a red arrow, and the y 
            vector is represented by a green arrow.
            </summary>
            @endif
            @if LANG_JA
            <summary>矢印を使用し、変換行列であらわされる座標系を描画します。
            xのベクトルは赤色の矢印で表され、yのベクトルは、緑の矢印で表されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCoordinateSystem2D">
            @if LANG_EN
            <summary>
            Draw a unit len arrow on x and y axis. Color is set to vector
            coordinates, so the x arrow is red (1,0,0), and the y arrow is
            green (0,1,0).
            </summary>
            @endif
            @if LANG_JA
            <summary>x軸とy軸に矢印を描画します。xの矢印は赤 (1,0,0)であり、yの矢印は緑 (0,1,0)です。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawArrow(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams)">
            @if LANG_EN
            <summary>
            Draw a 2d arrow. This function can be wrapped by ImmBegin()/ImmEnd(), 
            if you need to draw several arrows but want to limit the number of 
            draw calls. Each arrow consumes at most 9 vertices.
            </summary>
            <param name="start_point">Arrow's start point.</param>
            <param name="end_point">Arrow's tip.</param>
            <param name="ap">Arrow geometry parameters.</param>
            @endif
            @if LANG_JA
            <summary>
            2Dの矢印を描画します。
            いくつかの矢印を描画する必要があり、かつ、描画呼び出しの数を制限したい場合には、この関数は ImmBegin()/ ImmEnd()でラップすることができます。
            各矢印は、多くとも9頂点を消費します。
            </summary>
            <param name="start_point">矢印の開始位置。</param>
            <param name="end_point">矢印の先端。</param>
            <param name="ap">矢印の幾何情報。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawLineSegment(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Draw a single line segment.
            This is expensive, if you draw many lines, don't use this function.
            </summary>
            @endif
            @if LANG_JA
            <summary>ひとつの線分を描画します。処理が重いので、多くの線を描画する場合、この関数は使用しないでください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawInfiniteLine(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Draw a single line segment.
            This is expensive, if you draw many lines, don't use this function.
            </summary>
            @endif
            @if LANG_JA
            <summary>単一の線分を描画します。この関数は処理が重いため、多くの線を描画する場合、この関数の使用は避けてください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawRulers(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single,System.Single)">
            @if LANG_EN
            <summary>
            Draw all the vertical and horizontal lines in a given rectangle, regularly spaced.
            Since the smaller step_x or step_y are, the more lines primitives are generated, 
            it is easy to overflow the immediate draw mode vertex buffer. For that reason care 
            must be taken when setting the step values respective to the the bounds clip area.
            </summary>
            <param name="step_x">X spacing (starts at 0).</param>
            <param name="step_y">Y spacing (starts at 0).</param> 
            <param name="bounds">Clipping rectangle.</param>
            @endif
            @if LANG_JA
            <summary>指定された矩形内に、垂直および水平の線を等間隔で描画します。
            step_x, step_y を小さくすると、より多くのラインプリミティブが生成されるため、イミーディエイト描画モードの頂点バッファが容易にあふれてしまします。そのため、引数の指定には注意してください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawAxis(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single)">
            @if LANG_EN
            <summary>
            Draw axis lines (x=0 and y=0 lines) with a thickness.
            </summary>
            @endif
            @if LANG_JA
            <summary>厚みのある軸線（x = 0 と y= 0 ライン）を描画します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDefaultGrid(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            @if LANG_EN
            <summary>
            This function draws all the vertical and horizontal lines (rulers) regularly placed 
            at multiples of 'step' distances that are inside the rectangle 'clipping_bounds'. 
            It also draws the the 2 thick axis lines. All lines drawn are clipped again 
            'clipping_bounds'. Blend mode is untouched when drawing the rulers, then blend is 
            disabled when drawing axis lines.
            </summary>
            <param name="clipping_bounds">Clipping rectangle.</param>
            <param name="step">Horizontal and vertical spacing between rulers.</param>
            <param name="rulers_color">Color of rulers lines.</param>
            <param name="axis_color">Color of axis lines.</param>
            @endif
            @if LANG_JA
            <summary>この関数は、引数'clipping_bounds'の内部に、'step'の値で規則的に垂直・水平の線を描画します。
            また、厚みのある2つの軸線を描画します。描画されるすべての線が'clipping_bounds'でクリップされます。
            ルーラーを描画するとき、ブレンドモードは変更されません。軸線を描画するとき、ブレンドはDisableになっています。
            </summary>
            <param name="clipping_bounds">クリッピングの矩形。</param>
            <param name="step">ルーラーの間隔。</param>
            <param name="rulers_color">ルーラーの色。</param>
            <param name="axis_color">軸線の色。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDefaultGrid(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single)">
            @if LANG_EN
            <summary>
            DrawDefaultGrid with a default color/blend.
            </summary>
            @endif
            @if LANG_JA
            <summary>デフォルトの色/ブレンドを使ったDrawDefaultGrid()。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Disposed">
            @if LANG_EN
            <summary>Return true if this object been disposed.</summary>
            @endif
            @if LANG_JA
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex">
            @if LANG_EN
            <summary>
            The vertex type used by DrawHelpers (V4F_C4F)
            </summary>
            @endif
            @if LANG_JA
            <summary>DrawHelpers で使用される頂点 (V4F_C4F)。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.Position">
            @if LANG_EN
            <summary>The vertex position. 2D positions should have (z,w) set to (0,1).</summary>
            @endif
            @if LANG_JA
            <summary>頂点位置。2D位置は、(z,w) を (0,1)に設定します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.Color">
            @if LANG_EN
            <summary>Color, each element in 0,1 range (but values don't get clamped).</summary>
            @endif
            @if LANG_JA
            <summary>色。各要素は 0,1の範囲で設定してください(クランプ処理は行われません)。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.#ctor(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            @if LANG_EN
            <summary>Constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector4)">
            @if LANG_EN
            <summary>Constructor.
            </summary>
            <param name="pos">The position is expended to 3d by setting (z,w) to (0,1).</param>
            <param name="col">The color.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="pos">(z,w)を(0,1)の設定し、位置を3Dに拡張します。</param>
            <param name="col">色。</param>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams">
            @if LANG_EN
            <summary>
            Arrow parameters passed to DrawArrow.
            </summary>
            @endif
            @if LANG_JA
            <summary>DrawArrow に渡される矢印のパラメータ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HeadRadius">
            @if LANG_EN
            <summary>
            Length of the base of the arrow's head.
            </summary>
            @endif
            @if LANG_JA
            <summary>矢印の頭部のベースの長さ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HeadLen">
            @if LANG_EN
            <summary>
            Length of the arrow's head.
            </summary>
            @endif
            @if LANG_JA
            <summary>矢印の頭部の長さ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.BodyRadius">
            @if LANG_EN
            <summary>
            Arrow's body's radius.
            </summary>
            @endif
            @if LANG_JA
            <summary>矢印の本体の半径。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.Scale">
            @if LANG_EN
            <summary>
            A scale factor applied to HeadRadius, HeadLen, BodyRadius.
            </summary>
            @endif
            @if LANG_JA
            <summary>HeadRadius、HeadLen、BodyRadiusに適用されるスケール要素。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HalfMask">
            @if LANG_EN
            <summary>
            You can display half of the arrow (and select which side) handy for debugging half edge graphs for example.
            </summary>
            @endif
            @if LANG_JA
            <summary>矢印の半分を表示します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.Offset">
            @if LANG_EN
            <summary>
            Arrow end points can be offset along the perpendicular direction.
            </summary>
            @endif
            @if LANG_JA
            <summary>矢印の終点は、垂直方向に沿ってオフセットすることができます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.#ctor(System.Single)">
            @if LANG_EN
            <summary>
            ArrowParams's constructor.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData">
            @if LANG_EN
            <summary>
            Embedded font data for on screen debug prints.
            </summary>
            @endif
            @if LANG_JA
            <summary>スクリーン用デバッグプリントのための、埋め込みフォントデータ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CharSizei">
            @if LANG_EN
            <summary>
            The size of each character in pixels (this is a fixed size font).
            </summary>
            @endif
            @if LANG_JA
            <summary>ピクセル単位の文字のサイズ。固定サイズのフォントです。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CharSizef">
            @if LANG_EN
            <summary>
            The size of each character in pixels, as a Vector2.
            </summary>
            @endif
            @if LANG_JA
            <summary>ピクセル単位の、Vector2での文字のサイズ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CreateTexture">
            @if LANG_EN
            <summary>
            Create a Texture2D object containing the font data.
            It is up to the caller to Dipose of the created texture.
            </summary>
            @endif
            @if LANG_JA
            <summary>フォントデータの Texture2D オブジェクトを作成します。作成したテクスチャは呼び出し側が破棄してください。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.NumChars">
            @if LANG_EN
            <summary>
            The number of Ascii characters available in this font, starting from ' '.
            </summary>
            @endif
            @if LANG_JA
            <summary>このフォントで利用できるアスキー文字の数。' 'から始まります。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap">
             @if LANG_EN
             <summary>
             Given a Font object and a text containing all the characters you intend to use, 
             FontMap creates a Texture2D object containg the characters and its corresponding 
             table of UVs. This data is used by GameEngine2D in various text rendering functions.
            
             Examples:
             
              new FontMap( new Font( "D:\\Blah\\YourFont.TTF", 32, FontStyle.Bold ), 512 );
             
              new FontMap( new Font( FontAlias.System, 32, FontStyle.Bold ), 512 );
             </summary>
             @endif
             @if LANG_JA
             <summary>
             Fontオブジェクトと使用予定のすべての文字を含むテキストを指定して、フォントマップは、文字を格納したTexture2Dオブジェクトと対応するUVテーブルを作成します。このデータは、GameEngine2Dのさまざまなテキスト描画関数で使用されます。
             </summary>
             @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Texture">
            @if LANG_EN
            <summary>The font texture containing all the characters.</summary>
            @endif
            @if LANG_JA
            <summary>全ての文字を含む、フォントテクスチャ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharSet">
            @if LANG_EN
            <summary>Map characters to their corresponding CharData (UV and size data).</summary>
            @endif
            @if LANG_JA
            <summary>文字に対応するCharData (UVとサイズデータ)。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharPixelHeight">
            @if LANG_EN
            <summary>Character height in pixels - all characters have the same pixel height.</summary>
            @endif
            @if LANG_JA
            <summary>ピクセル単位のモズの高さ。すべての文字は同じ高さです。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.AsciiCharSet">
            @if LANG_EN
            <summary>The ascii character set as a string.</summary>
            @endif
            @if LANG_JA
            <summary>アスキー文字を文字列としてセットします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.#ctor(Sce.PlayStation.Core.Imaging.Font,System.Int32)">
            @if LANG_EN
            <summary>
            Create a FontMap for the ASCII char set.
            </summary>
            <param name="font">The font to use to render characters. Note that FontMap disposes of this Font object.</param>
            <param name="fontmap_width">The internal width used by the texture. Height is adjusted automatically so that all characters fit.</param>
            @endif
            @if LANG_JA
            <summary>アスキー文字のフォントマップを作成します。
            </summary>
            <param name="font">文字を描画するための使用するフォント。フォントマップは、このFontオブジェクトを破棄することに注意してください。</param>
            <param name="fontmap_width">テクスチャで使用される内部の幅。高さはすべての文字が収まるように自動的に調整されます。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.#ctor(Sce.PlayStation.Core.Imaging.Font,System.String,System.Int32)">
            @if LANG_EN
            <summary>
            </summary>
            <param name="font">The font to use to render characters. Note that FontMap disposes of this Font object.</param>
            <param name="charset">A string containing all the characters you will ever need when drawing text with this FontMap.</param>
            <param name="fontmap_width">The internal with used by the texture (height is adjusted automatically).</param>
            @endif
            @if LANG_JA
            <summary>
            </summary>
            <param name="font">文字を描画するための使用するフォント。フォントマップは、このFontオブジェクトを破棄することに注意してください。</param>
            <param name="charset">このFontMapでテキストを描画するときに必要な全ての文字を含む文字列。</param>
            <param name="fontmap_width">テクスチャによって使用される内部的な値 (高さは自動で調整されます)。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>破棄します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Initialize(Sce.PlayStation.Core.Imaging.Font,System.String,System.Int32)">
            @if LANG_EN
            <summary>
            </summary>
            <param name="font">The font to use to render characters. Note that FontMap disposes of this Font object.</param>
            <param name="charset">A string containing all the characters you will ever need when drawing text with this FontMap.</param>
            <param name="fontmap_width">The internal with used by the texture (height is adjusted automatically).</param>
            @endif
            @if LANG_JA
            <summary>
            </summary>
            <param name="font">文字を描画するための使用するフォント。フォントマップは、このFontオブジェクトを破棄することに注意してください。</param>
            <param name="charset">このFontMapでテキストを描画するときに必要な全ての文字を含む文字列。</param>
            <param name="fontmap_width">テクスチャによって使用される内部的な値 (高さは自動で調整されます)。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.TryGetCharData(System.Char,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData@)">
            @if LANG_EN
            <summary>
            Try to get the CharData needed to draw the character 'c'.
            </summary>
            @endif
            @if LANG_JA
            <summary>引数 'c' の文字を描画するのに必要な CharDataを取得します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Disposed">
            @if LANG_EN
            <summary>Return true if this object been disposed.</summary>
            @endif
            @if LANG_JA
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData">
            @if LANG_EN
            <summary>The UV data for a single character.</summary>
            @endif
            @if LANG_JA
            <summary>単一文字のUVデータ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData.UV">
            @if LANG_EN
            <summary>UV in FontMap's Texture.</summary>
            @endif
            @if LANG_JA
            <summary>フォントマップのテクスチャ内のUV。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData.PixelSize">
            @if LANG_EN
            <summary>The pixel size for this character (depends on the font.)</summary>
            @endif
            @if LANG_JA
            <summary>この文字のピクセルサイズ (フォントに依存します)。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode">
            @if LANG_EN
            <summary>
            BlendMode wraps the blend state (BlendFunc+'enabled' bool) and provides some human friendly blend mode names.
            </summary>
            @endif
            @if LANG_JA
            <summary>BlendMode はブレンドステート(BlendFunc+'enabled' bool)をラップし、扱いやすい名称として提供します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Enabled">
            @if LANG_EN
            <summary>Blend enabled flag.</summary>
            @endif
            @if LANG_JA
            <summary>ブレンド enabled フラグ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.BlendFunc">
            @if LANG_EN
            <summary>Blend function.</summary>
            @endif
            @if LANG_JA
            <summary>ブレンド関数。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.#ctor(System.Boolean,Sce.PlayStation.Core.Graphics.BlendFunc)">
            @if LANG_EN
            <summary>Constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.None">
            @if LANG_EN
            <summary>No alpha blend: dst = src</summary>
            @endif
            @if LANG_JA
            <summary>アルファなしブレンド:dst = src
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Normal">
            @if LANG_EN
            <summary>Normal alpha blend: dst = lerp( dst, src, src.a )</summary>
            @endif
            @if LANG_JA
            <summary>普通のアルファブレンド : dst = lerp( dst, src, src.a )
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Additive">
            @if LANG_EN
            <summary>Additive alpha blend: dst = dst + src</summary>
            @endif
            @if LANG_JA
            <summary>加算アルファブレンド : dst = dst + src
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Multiplicative">
            @if LANG_EN
            <summary>Multiplicative alpha blend: dst = dst * src</summary>
            @endif
            @if LANG_JA
            <summary>乗算アルファブレンド : dst = dst * src
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.PremultipliedAlpha">
            @if LANG_EN
            <summary>Premultiplied alpha blend: dst = dst * (1-src.a ) + src</summary>
            @endif
            @if LANG_JA
            <summary>乗算済みアルファブレンド : dst = dst * (1-src.a ) + src
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha">
            @if LANG_EN
            <summary>
            Augment Sce.PlayStation.Core.Graphics.GraphicsContext with a matrix stack and a couple of other functions.
            </summary>
            @endif
            @if LANG_JA
            <summary>行列スタックと他の関数でSce.PlayStation.Core.Graphics.GraphicsContextを強化します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.#ctor(Sce.PlayStation.Core.Graphics.GraphicsContext)">
            @if LANG_EN
            <summary>GraphicsContextAlpha constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ModelMatrix">
            @if LANG_EN
            <summary>
            The model matrix stack, similar to OpenGL.
            </summary>
            @endif
            @if LANG_JA
            <summary>OpenGLに似た、モデル行列スタック。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ViewMatrix">
            @if LANG_EN
            <summary>
            The view matrix stack, similar to OpenGL.
            </summary>
            @endif
            @if LANG_JA
            <summary>OpenGLに似た、ビュー行列のスタック。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ProjectionMatrix">
            @if LANG_EN
            <summary>
            The projection matrix stack, similar to OpenGL.
            </summary>
            @endif
            @if LANG_JA
            <summary>OpenGLに似た、プロジェクション行列スタック。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats">
            @if LANG_EN
            <summary>
            DebugStats for simple profiling.
            </summary>
            @endif
            @if LANG_JA
            <summary>シンプルなプロファイリングのためのDebugStats。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetMVP">
            @if LANG_EN
            <summary>
            GetMVP() is a shortcut for ProjectionMatrix.Get() * ViewMatrix.Get() * ModelMatrix.Get().
            </summary>
            @endif
            @if LANG_JA
            <summary>GetMVP() は ProjectionMatrix.Get() * ViewMatrix.Get() * ModelMatrix.Get() へのショートカットです。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetAspect">
            @if LANG_EN
            <summary>
            GetAspect() is a shortcut that returns the viewport's aspect ratio (width/height).
            </summary>
            @endif
            @if LANG_JA
            <summary>GetAspect() はビューポートのアスペクト比 ( width/height ) を返すショートカットです。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetViewportf">
            @if LANG_EN
            <summary>
            This function returns the viewport as a Bounds2 object.
            </summary>
            @endif
            @if LANG_JA
            <summary>この関数は、Bounds2 オブジェクトとして、ビューポートを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.SetDepthMask(System.Boolean)">
            @if LANG_EN
            <summary>
            Set the depth write mask.
            </summary>
            @endif
            @if LANG_JA
            <summary>writeで深度値をマスクします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.SetBlendMode(Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode)">
            @if LANG_EN
            <summary>
            Set the blend mode.
            </summary>
            @endif
            @if LANG_JA
            <summary>ブレンドモードを設定します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.CreateTextureUnicolor(System.UInt32)">
            @if LANG_EN
            <summary>
            Create a small texture where all pixels have the same color.
            </summary>
            @endif
            @if LANG_JA
            <summary>同じ色でピクセルを塗りつぶした、小さなテクスチャを作成します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.CreateTextureFromFont(System.String,Sce.PlayStation.Core.Imaging.Font,System.UInt32)">
            @if LANG_EN
            <summary>
            Given a Font object and a text, create a texture representing text.
            </summary>
            @endif
            @if LANG_JA
            <summary>Fontオブジェクトとtextを指定し、textを表すテクスチャを作成します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Context">
            @if LANG_EN
            <summary>
            The core graphics context.
            </summary>
            @endif
            @if LANG_JA
            <summary>コアグラフィックスのコンテキスト。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Disposed">
            @if LANG_EN
            <summary>Return true if this object been disposed.</summary>
            @endif
            @if LANG_JA
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.WhiteTextureInfo">
            @if LANG_EN
            <summary>
            Return a small white texture with all pixels set to 0xffffffff, as a TextureInfo.
            Used as default in some shaders.
            </summary>
            @endif
            @if LANG_JA
            <summary>全てのピクセルを 0xffffffffにセットした、小さな白いテクスチャを、TextureInfoとして返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats_">
            @if LANG_EN
            <summary>
            DebugStats at the moment only stores a DrawArrays calls counter.
            </summary>
            @endif
            @if LANG_JA
            <summary>現時点では、DebugStats は DrawArrays の呼び出し回数のみ保持します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats_.DrawArraysCount">
            @if LANG_EN
            <summary>
            Number ot times DrawArrays got called by the GameEngine2D library (not including your own calls to that function). 
            Since DrawArrays is a costly function, this counter is a useful profiling information.
            The counter gets reset everyframe.
            </summary>
            @endif
            @if LANG_JA
            <summary>GameEngine2D ライブラリで呼び出される DrawArraysの回数 (開発者自身の呼び出しは含みません)。
            DrawArraysは重い関数なので、このカウンタは役に立つプロファイル情報です。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors">
            @if LANG_EN
            <summary>
            Some named colored constants.
            </summary>
            @endif
            @if LANG_JA
            <summary>名前の付いた色の定数。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Black">
            <summary>0,0,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Red">
            <summary>1,0,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Green">
            <summary>0,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Yellow">
            <summary>1,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Blue">
            <summary>0,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Magenta">
            <summary>1,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Cyan">
            <summary>0,1,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.White">
            <summary>1,1,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Lime">
            <summary>0.5,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.LightBlue">
            <summary>0,0.5,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Pink">
            <summary>1,0,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Orange">
            <summary>1,0.5,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.LightCyan">
            <summary>0,1,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Purple">
            <summary>0.5,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey05">
            <summary>0.05,0.05,0.05,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey10">
            <summary>0.1,0.1,0.1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey20">
            <summary>0.2,0.2,0.2,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey30">
            <summary>0.3,0.3,0.3,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey40">
            <summary>0.4,0.4,0.4,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey50">
            <summary>0.5,0.5,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey60">
            <summary>0.6,0.6,0.6,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey70">
            <summary>0.7,0.7,0.7,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey80">
            <summary>0.8,0.8,0.8,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey90">
            <summary>0.9,0.9,0.9,1</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1">
            @if LANG_EN
            <summary>
            An immediate mode vertex array that you can write everyframe
            using a ImmBegin()/ImmVertex()/ImmEnd() OpenGL style interface.
            </summary>
            @endif
            @if LANG_JA
            <summary>イミーディエイトモードの頂点配列は、ImmBegin()/ImmVertex()/ImmEnd()などのOpenGLスタイルのインターフェースを使い、どのフレームでも描画できます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32,System.UInt16[],System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            @if LANG_EN
            <summary>
            ImmediateMode constructor.
            
            If indices is not null, vertices_per_primitive and indices_per_primitive must follow the constraints below:
            
             - vertices_per_primitive must not be 0
             - indices_per_primitive must not be 0
             - max_vertices must be a multiple of vertices_per_primitive
             - indices.Length must be a multiple of indices_per_primitive
             - max_vertices / vertices_per_primitive must be equal to indices.Length / indices_per_primitive
            
            If any of those constraints is not met, the constructor will assert.
            
            Note that ImmediateMode relies on the frame counter incremented by Common.OnSwap().
            In the context of using GameEngine2D.Director, Common.OnSwap() is already called inside Director.Instance.PostSwap(). 
            
            But if you use ImmediateMode "stand alone" then you will need to call Common.OnSwap() yourself everyframe to make 
            sure the GameEngine2D's frame counter gets increments (else you will get memory leaks.)
            </summary>
            <param name="gl">The core graphics context.</param> 
            <param name="max_vertices">The maximum number of vertices you can have per frame.</param>
            <param name="indices">The array of indices (can be null), assuming a static setup.</param>
            <param name="vertices_per_primitive">If indices is not null, this must be set to the number of vertices each ImmBegin is expected to have. If indices is null, just set to 0.</param>
            <param name="indices_per_primitive">If indices is not null, this must be set to the number of indices you want to draw for each primitive. If indices is null, just set to 0.</param>
            <param name="formats">The vertex format, passed to VertexBuffer as it is.</param>
            @endif
            @if LANG_JA
            <summary>
            ImmediateModeのコンストラクタです。
            
            インデックスがnullでない場合は、vertices_per_primitiveとindices_per_primitiveは、以下の制約に従う必要があります。
            
            - vertices_per_primitiveは0であってはならない
            - indices_per_primitiveは0であってはならない
            - max_verticesはvertices_per_primitiveの倍数でなければなりません
            - indices.Lengthはindices_per_primitiveの倍数でなければなりません
            - max_vertices/ vertices_per_primitiveはindices.Length/ indices_per_primitiveに等しくなければなりません
            
            これらの制約のいずれかが満たされていない場合、コンストラクタは警告を出します。
            
            ImmediateModeは、Common.OnSwap() でインクリメントされるフレームカウンタに依存していることに注意してください。
            GameEngine2D.Directorを使用する流れでは、Common.OnSwap()はDirector.Instance.PostSwap()の内部で呼ばれてるようになっています。
            ImmediateModeを "スタンドアローン"を使用する場合でも、GameEngine2Dのフレームカウンタがインクリメントされているか確認するため、毎フレームCommon.OnSwap()を呼び出す必要があります。（呼び出されないと、メモリリークが発生します)。
            
            </summary>
            <param name="gl">コアグラフィックスのコンテキスト。</param> 
            <param name="max_vertices">1フレームあたりの最大頂点数。</param>
            <param name="indices">インデックスの配列 (nullでも可)。静的な設定を仮定しています。</param>
            <param name="vertices_per_primitive">インデックスがnullでない場合、これは各ImmBeginが持つ予定の頂点数に設定する必要があります。インデックスがnullの場合は、0に設定されています。</param>
            <param name="indices_per_primitive">インデックスがnullでない場合、これは各プリミティブごとに描画したいインデックスの数に設定する必要があります。インデックスがnullの場合は、0に設定されています。</param>
            <param name="formats">VertexBufferに渡される頂点フォーマット。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmBegin(Sce.PlayStation.Core.Graphics.DrawMode,System.UInt32)">
            @if LANG_EN
            <summary>Begin a draw primitive.</summary>
            <param name="mode">The draw primitive type.</param>
            <param name="max_vertices_intended">The maximum number of vertices you intend to write.</param>
            @endif
            @if LANG_JA
            <summary>描画プリミティブの開始。
            </summary>
            <param name="mode">描画プリミティブのタイプ。</param>
            <param name="max_vertices_intended">描画予定の最大頂点数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmVertex(`0)">
            @if LANG_EN
            <summary>
            Add a vertex, must be called between ImmBegin and ImmEnd.
            </summary>
            @endif
            @if LANG_JA
            <summary>頂点を追加します。ImmBeginとImmEndの間で呼ぶ必要があります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmEnd">
            @if LANG_EN
            <summary>
            End draw primitive and draw.
            </summary>
            @endif
            @if LANG_JA
            <summary>描画プリミティブを終了し、描画処理を行います。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmEndIndexing">
            @if LANG_EN
            <summary>
            Special version of ImmEnd that uses the 'vertices_per_primitive' and 'indices_per_primitive' arguments
            passed to ImmediateMode's constructor. It is assumed that in that case all primitives consume the same
            amount of vertices.
            </summary>
            @endif
            @if LANG_JA
            <summary>ImmediateMode のコンストラクタに渡される引数'vertices_per_primitive' and 'indices_per_primitive' を使った、ImmEndの特別なバージョンです。すべてのプリミティブは同じ数の頂点を消費することを想定しています。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.Disposed">
            @if LANG_EN
            <summary>Return true if this object been disposed.</summary>
            @endif
            @if LANG_JA
            <summary>このオブジェクトが破棄されている場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmActive">
            @if LANG_EN
            <summary>
            Return true if we are in the middle of an ImmBegin()/ImmEnd().
            </summary>
            @endif
            @if LANG_JA
            <summary>ImmBegin()/ImmEnd()の間で呼ばれると、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.MaxVertices">
            @if LANG_EN
            <summary>
            Return the maximum (total) number of vertices we can add per frame.
            </summary>
            @endif
            @if LANG_JA
            <summary>フレームごとに追加可能な、最大(合計)頂点数を返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1">
            @if LANG_EN
            <summary>
            ImmediateModeQuads wraps ImmediateMode to deal with quad rendering only.
            This is used by SpriteRenderer and other places.
            </summary>
            @endif
            @if LANG_JA
            <summary>ImmediateModeQuads はクワッドの描画を扱うために、ImmediateModeをラップしています。
            このクラスはSpriteRenderer や他の場所で使用されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            @if LANG_EN
            <summary>Constructor.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmBeginQuads(System.UInt32)">
            @if LANG_EN
            <summary>Prepare for registering n quads for rendering.</summary>
            <param name="num_quads">The maximum number of quads you intend to add.</param>
            @endif
            @if LANG_JA
            <summary>描画のため、nクワッドを登録する準備をします。
            </summary>
            <param name="num_quads">追加する予定のクワッドの最大数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmAddQuad(`0,`0,`0,`0)">
            @if LANG_EN
            <summary>
            Add a quad
            
            v2----v3
            
             |    | 
            
            v0----v1
            
            </summary>
            @endif
            @if LANG_JA
            <summary>
            クワッドの追加。
            
            v2----v3
            
             |    | 
            
            v0----v1
            
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmAddQuad(`0[])">
            @if LANG_EN
            <summary>
            Add a quad
            
            v[2]----v[3]
            
              |      | 
            
            v[0]----v[1]
            
            </summary>
            @endif
            @if LANG_JA
            <summary>
            クワッドの追加
            
            v[2]----v[3]
            
              |      | 
            
            v[0]----v[1]
            
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmEndQuads">
            @if LANG_EN
            <summary>
            Draw all the quads added since the last ImmBeginQuads
            </summary>
            @endif
            @if LANG_JA
            <summary>最後のImmBeginQuads以降に追加された全てのクワッドを描画します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.Disposed">
            @if LANG_EN
            <summary>Return true if this object been disposed.</summary>
            @endif
            @if LANG_JA
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.MaxQuads">
            @if LANG_EN
            <summary>
            Return the maximum (total) number of quads we can add per frame.
            </summary>
            @endif
            @if LANG_JA
            <summary>フレームごとに追加可能なクワッドの最大数(合計)を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.VertexBufferPool.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2">
            @if LANG_EN
            <summary>
            Wrap Sce.PlayStation.Core.Input so that input conditional expressions are less verbose.
            Some examples:
            
            if ( Input2.GamePad.GetData(0).Left.Down )  // is game pad left button down
            
            if ( Input2.GamePad0.Left.Down )            // same as above, but we use an alias 'GamePad0' for GamePad.GetData(0)
            
            if ( Input2.GamePad0.Square.Release )       // has gamepad square button just been released
            
            if ( Input2.Keyboard0.Left.Press )          // has keyboard left arrow button just been pressed
            
            if ( Input2.Keyboard0.S.On )                // has keyboard S key been held down for more than one frame
            
            Note that you don't have to use Input2. The GameEngine2D library uses it internally in a couple of places
            and it's used in samples too. It keeps the GetData( deviceIndex ) api but simply harmonizes the state queries for buttons.
            </summary>
            @endif
            @if LANG_JA
            <summary>Sce.PlayStation.Core.Inputをラップしたクラス。
            
            例:
            
            if ( Input2.GamePad.GetData(0).Left.Down )  // ゲームパッドの左ボタンが押されている。
            
            if ( Input2.GamePad0.Left.Down )            // 上記と同じですが、GamePad.GetData(0)のエイリアス(別名) 'GamePad0' を使用しています。
            
            if ( Input2.GamePad0.Square.Release )       // ゲームパッドの□ボタンが離された瞬間。
            
            if ( Input2.Keyboard0.Left.Press )          // キーボードの左キーが押された瞬間。
            
            if ( Input2.Keyboard0.S.On )                // キーボードのSキーが1フレーム以上押され続けている。
            
            
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch00">
            @if LANG_EN
            <summary>Alias for Touch.GetData(0)[0]</summary>
            @endif
            @if LANG_JA
            <summary>Touch.GetData(0)[0] のエイリアス(別名)。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad0">
            @if LANG_EN
            <summary>Alias for GamePad.GetData(0)</summary>
            @endif
            @if LANG_JA
            <summary>GamePad.GetData(0) のエイリアス。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState">
            @if LANG_EN
            <summary>
            Button data structure shared between various helper wrap of
            Input.GamePad, Input.Touch and the Keyboard.
            </summary>
            @endif
            @if LANG_JA
            <summary>ボタンのデータ構造体は Input.GamePad、Input.Touch、Keyboardなどのヘルパーラップで共有されます。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Down">
            @if LANG_EN
            <summary>Return true if we are pushing the button this frame</summary>
            @endif
            @if LANG_JA
            <summary>このフレームでボタンが押されているなら、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Press">
            @if LANG_EN
            <summary>Return true if we are pushing the button this frame but weren't pushing in previous frame</summary>
            @endif
            @if LANG_JA
            <summary>前のフレームでボタンが押されておらず、このフレームでボタンが押されているなら、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.On">
            @if LANG_EN
            <summary>Return true if we are pushing the button this frame and were pushing in previous frame as well</summary>
            @endif
            @if LANG_JA
            <summary>前のフレームでもボタンが押されており、このフレームでボタンが押されている場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Release">
            @if LANG_EN
            <summary>Return true if we are not pushing the button this frame but were pushing in previous frame</summary>
            @endif
            @if LANG_JA
            <summary>前のフレームでボタンを押しており、このフレームで押されていない場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData">
            @if LANG_EN
            <summary>
            Wrap Input.TouchData.
            </summary>
            @endif
            @if LANG_JA
            <summary>Input.TouchData をラップしたクラス。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Pos">
            @if LANG_EN
            <summary>
            For consistency with the graphics system, this function returns the touch position 
            in normalized screen coordinates:  bottom left (-1,1), upper right (1,1).
            </summary>
            @endif
            @if LANG_JA
            <summary>グラフィックスシステムとの一貫性を保つために、この関数は正規化された画面座標でのタッチ位置を返します。 : 左下（-1,1）、右上（1,1）。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Down">
            @if LANG_EN
            <summary>Return true if we are touching this frame</summary>
            @endif
            @if LANG_JA
            <summary>このフレームでタッチしている場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Press">
            @if LANG_EN
            <summary>Return true if we are touching this frame but weren't touching in previous frame</summary>
            @endif
            @if LANG_JA
            <summary>前のフレームでタッチしておらず、このフレームでタッチしている場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.On">
            @if LANG_EN
            <summary>Return true if we are touching this frame and were touching in previous frame as well</summary>
            @endif
            @if LANG_JA
            <summary>前のフレームでタッチしており、このフレームでもタッチしている場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Release">
            @if LANG_EN
            <summary>Return true if we are not touching this frame but were touching in previous frame</summary>
            @endif
            @if LANG_JA
            <summary>前のフレームでタッチしており、このフレームでタッチしていない場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchDataArray.SetData(System.Collections.Generic.List{Sce.PlayStation.Core.Input.TouchData})">
            @if LANG_EN
            <summary>
            By default, Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2 simply gets the input data automatically, but 
            you can override this behaviour and manually set the data. If the data you set has the .Skip flag set 
            to true, all touch and button input will be ignored in Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.
            Calling SetData once forever enables the manual/external control behavior.
            </summary>
            @endif
            @if LANG_JA
            <summary>デフォルトでは、Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2は、単に自動的に入力データを取得しますが、この動作をオーバーライドして、データを手動で設定することができます。
            Skipフラグをtrueにセットすると、すべてのタッチ・ボタンの入力は Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2内で無視されるようになります。
            いったん SetData を呼び出すと、手動/外部コントローラのふるまいを永続的に可能にします。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch">
            @if LANG_EN
            <summary>
            Wrap Input.Touch.
            </summary>
            @endif
            @if LANG_JA
            <summary>Input.Touch をラップしたクラス。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch.GetData(System.UInt32)">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch.MaxTouch">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData">
            @if LANG_EN
            <summary>
            Wrap Input.GamePadData.
            </summary>
            @endif
            @if LANG_JA
            <summary>Input.GamePadData をラップしたクラス。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Left">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Up">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Right">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Down">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Square">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Triangle">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Circle">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Cross">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Start">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Select">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.L">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.R">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Dpad">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.AnalogLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.AnalogRight">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.SetData(Sce.PlayStation.Core.Input.GamePadData)">
            @if LANG_EN
            <summary>
            By default, Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2 simply gets the input data automatically, but 
            you can override this behaviour and manually set the data. If the data you set has the .Skip flag set 
            to true, all touch and button input will be ignored in Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.
            Calling SetData once forever enables the manual/external control behavior.
            </summary>
            @endif
            @if LANG_JA
            <summary>デフォルトでは、Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2は、単に自動的に入力データを取得しますが、この動作をオーバーライドして、データを手動で設定することができます。
            Skipフラグをtrueにセットすると、すべてのタッチ・ボタンの入力は Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2内で無視されるようになります。
            いったん SetData を呼び出すと、手動/外部コントローラのふるまいを永続的に可能にします。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad">
            @if LANG_EN
            <summary>
            Wrap Input.GamePad (button bits).
            </summary>
            @endif
            @if LANG_JA
            <summary>Input.GamePad (button bits) をラップしたクラス。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad.GetData(System.UInt32)">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math">
            @if LANG_EN
            <summary>Some extensions to the math/vector lib</summary>
            @endif
            @if LANG_JA
            <summary>数学/ベクトルライブラリ用に拡張した Math クラス。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LookAt(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            @if LANG_EN
            <summary>
            Compute a lookat matrix for the camera. The vector (eye, center)
            maps to -z (since OpenGL looks downward z), and up maps to y.
            </summary>
            @endif
            @if LANG_JA
            <summary>カメラのルックアット行列を計算します。ベクトル（視点、中央）を-zにマップし（OpenGLはZを下向きにみるので）、上方向をyにマップします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.TranslationRotationScale(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Fast build of a Matrix3 TRS matrix.</summary>
            @endif
            @if LANG_JA
            <summary>Matrix3 TRS 行列の高速ビルド。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Det(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Return the determinant formed by 2 vectors.</summary>
            @endif
            @if LANG_JA
            <summary>
            </summary>2つのベクトルの行列式を返します。
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sign(System.Single)">
            @if LANG_EN
            <summary>Return the sign of x (returns 0.0f is x=0.0f).</summary>
            @endif
            @if LANG_JA
            <summary>xの符号を返します。xが0.0fなら0.0fを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Perp(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Return value rotated by pi/2.</summary>
            @endif
            @if LANG_JA
            <summary>pi/2で回転した値を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.SetAlpha(Sce.PlayStation.Core.Vector4,System.Single)">
            @if LANG_EN
            <summary>Set alpha (can be inlined in math expressions).</summary>
            @endif
            @if LANG_JA
            <summary>アルファ値を設定します。(数学式でインライン化することができます)
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.SafeAcos(System.Single)">
            @if LANG_EN
            <summary>SafeAcos checks that x is in [-1,1], and if x is off by an epsilon it clamps it.</summary>
            @endif
            @if LANG_JA
            <summary>SafeAcos xが[-1,1]の範囲内にあることをチェックし、イプシロンによってオフになるなら、それをクランプします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Angle(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Return the absolute 2d angle formed by (1,0) and value, in range -pi,pi</summary>
            @endif
            @if LANG_JA
            <summary>(1,0)と引数 valueのなす2Dの絶対角を、-pi～piの範囲で返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rotate(Sce.PlayStation.Core.Vector2,System.Single,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Rotate 'point' around rotation center 'pivot' by an angle 'angle' (radians).</summary>
            @endif
            @if LANG_JA
            <summary>'pivot'を中心に、角度 ' angle'(ラジアン)で 'point'を回転します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Deg2Rad(System.Single)">
            @if LANG_EN
            <summary>Degree to radians.</summary>
            @endif
            @if LANG_JA
            <summary>度数をラジアンに変換します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rad2Deg(System.Single)">
            @if LANG_EN
            <summary>Radians to degrees.</summary>
            @endif
            @if LANG_JA
            <summary>ラジアンを度数に変換します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Deg2Rad(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Element wise degree to radians.</summary>
            @endif
            @if LANG_JA
            <summary>度数をラジアンに変換します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rad2Deg(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Element wise radians to degrees.</summary>
            @endif
            @if LANG_JA
            <summary>ラジアンを度数に変換します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(System.Single,System.Single,System.Single)">
            @if LANG_EN
            <summary>Linear interpolation.</summary>
            @endif
            @if LANG_JA
            <summary>線形補間。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>Linear interpolation.</summary>
            @endif
            @if LANG_JA
            <summary>線形補間。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            @if LANG_EN
            <summary>Linear interpolation.</summary>
            @endif
            @if LANG_JA
            <summary>線形補間。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Single)">
            @if LANG_EN
            <summary>Linear interpolation.</summary>
            @endif
            @if LANG_JA
            <summary>線形補間。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LerpUnitVectors(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>Lerp 2 (assumed) unit vectors (shortest path).</summary>
            @endif
            @if LANG_JA
            <summary>2つの単位ベクトルで線形補間を行います。補間はパスの短い側で行います。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LerpAngles(System.Single,System.Single,System.Single)">
            @if LANG_EN
            <summary>Lerp 2 angle values (shortest path).</summary>
            @endif
            @if LANG_JA
            <summary>引数の2つの角度で線形補間を行います。補間はパスの短い側で行います。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sin(System.UInt32,System.Single,System.UInt32)">
            @if LANG_EN
            <summary>A "safe" sine function taking uint values.</summary>
            @endif
            @if LANG_JA
            <summary>uint型の値をとる、安全なサイン関数。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sin(System.UInt64,System.Single,System.UInt64)">
            @if LANG_EN
            <summary>A "safe" sine function taking ulong values.</summary>
            @endif
            @if LANG_JA
            <summary>ulong型の値をとる、安全なサイン関数。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Linear(System.Single)">
            @if LANG_EN
            <summary>This is just f(x)=x, named so that code is more explicit when it is passed as a tween function.</summary>
            @endif
            @if LANG_JA
            <summary>この関数は単なる f(x)=x です。Tween関数として渡すとき、コードをより明快にするため定義されています。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowerfulScurve(System.Single,System.Single,System.Single)">
            @if LANG_EN
            <summary>
            A very controlable s curve, lets you do polynomial ease in/out curves
            with little code.
            </summary>
            <param name="x">Asssumed to be in 0,1.</param>
            <param name="p1">Controls the ease in exponent (if >1).</param>
            <param name="p2">Controls the ease out exponent (if >1.,(p1,p2)=(1,1) just gives f(x)=x</param>
            @endif
            @if LANG_JA
            <summary>制御可能な曲線であり、少ないコードでカーブのイン/アウト多項式を容易に行うことができます。
            </summary>
            <param name="x">Asssumed to be in 0,1.</param>
            <param name="p1">Controls the ease in exponent (if >1).</param>
            <param name="p2">Controls the ease out exponent (if >1.),(p1,p2)=(1,1) just gives f(x)=x</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseIn(System.Single,System.Single)">
            @if LANG_EN
            <summary>Ease in curve using Pow.</summary>
            @endif
            @if LANG_JA
            <summary>Ease in curve using Pow.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseOut(System.Single,System.Single)">
            @if LANG_EN
            <summary>Ease out curve using Pow.</summary>
            @endif
            @if LANG_JA
            <summary>Ease out curve using Pow.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseInOut(System.Single,System.Single)">
            @if LANG_EN
            <summary>
            PowEaseIn/PowEaseOut mirrored around 0.5,0.5.
            Same exponent in and out.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            PowEaseIn/PowEaseOut mirrored around 0.5,0.5.
            Same exponent in and out.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ExpEaseOut(System.Single,System.Single)">
            @if LANG_EN
            <summary>
            Ease out curve using a 1-exp(-a*x) exponential,
            but normalized so that we reach 1 when x=1.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Ease out curve using a 1-exp(-a*x) exponential,
            but normalized so that we reach 1 when x=1.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ExpEaseIn(System.Single,System.Single)">
            @if LANG_EN
            <summary>Ease in curve using an exponential.</summary>
            @endif
            @if LANG_JA
            <summary>Ease in curve using an exponential.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseIn(System.Single,System.Single)">
            @if LANG_EN
            <summary>BackEaseIn function (see  http://www.robertpenner.com)</summary>
            @endif
            @if LANG_JA
            <summary>BackEaseIn function (see  http://www.robertpenner.com)</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseOut(System.Single,System.Single)">
            @if LANG_EN
            <summary>BackEaseOut function (see  http://www.robertpenner.com)</summary>
            @endif
            @if LANG_JA
            <summary>BackEaseOut function (see  http://www.robertpenner.com)</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseInOut(System.Single,System.Single)">
            @if LANG_EN
            <summary>BackEaseIn/BackEaseOut mirrored around 0.5,0.5.</summary>
            @endif
            @if LANG_JA
            <summary>BackEaseIn/BackEaseOut mirrored around 0.5,0.5.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Impulse(System.Single,System.Single)">
            @if LANG_EN
            <summary>Impulse function (source Inigo Quilez).</summary>
            @endif
            @if LANG_JA
            <summary>Impulse function (source Inigo Quilez).</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ShockWave(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            @if LANG_EN
            <summary>Travelling wave function.</summary>
            @endif
            @if LANG_JA
            <summary>Travelling wave function.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Log2(System.Int32)">
            @if LANG_EN
            <summary>Return the log of v in base 2.</summary>
            @endif
            @if LANG_JA
            <summary>Return the log of v in base 2.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.IsPowerOf2(System.Int32)">
            @if LANG_EN
            <summary>Return true if 'i' is a power of 2.</summary>
            @endif
            @if LANG_JA
            <summary>'i'が2のべき乗である場合、trueを返します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.GreatestOrEqualPowerOf2(System.Int32)">
            @if LANG_EN
            <summary>Return the closest greater or equal power of 2.</summary>
            @endif
            @if LANG_JA
            <summary>引数 i に大きい側で最も近い、もしくは等しい2のべき乗を返します。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._00i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._10i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._01i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._11i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._000i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._100i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._010i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._110i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._001i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._101i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._011i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._111i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._00">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._10">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._01">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._11">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.UV_TransformIdentity">
            @if LANG_EN
            <summary>
            UV transform stored as (offset, scale) in a Vector4.
            offset=0,0 scale=1,1 means identity.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            UV transform stored as (offset, scale) in a Vector4.
            offset=0,0 scale=1,1 means identity.
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.UV_TransformFlipV">
            @if LANG_EN
            <summary>
            UV transform stored as (offset, scale) in a Vector4
            UV_TransformFlipV v into 1-v, and leaves u unchanged.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            UV transform stored as (offset, scale) in a Vector4
            UV_TransformFlipV v into 1-v, and leaves u unchanged.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ClosestSegmentPoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Return the closest point to P that's on segment [A,B].</summary>
            @endif
            @if LANG_JA
            <summary>Return the closest point to P that's on segment [A,B].</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Pi">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.TwicePi">
            <summary>2pi</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.HalfPi">
            <summary>pi/2</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator">
            @if LANG_EN
            <summary>Wrap System.Random and extend with vector random generation.</summary>
            @endif
            @if LANG_JA
            <summary>System.Randomをラップし、ベクトルの乱数生成を拡張したクラス。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.Random">
            @if LANG_EN
            <summary>The raw random generator.</summary>
            @endif
            @if LANG_JA
            <summary>生の乱数生成器。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloat0_1">
            @if LANG_EN
            <summary>Return a random float in 0,1.</summary>
            @endif
            @if LANG_JA
            <summary>0～1のランダムな浮動小数点数を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloatMinus1_1">
            @if LANG_EN
            <summary>Return a random float in -1,1.</summary>
            @endif
            @if LANG_JA
            <summary>-1～1のランダムな浮動小数点数を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloat(System.Single,System.Single)">
            @if LANG_EN
            <summary>Return a random float in mi,ma.</summary>
            @endif
            @if LANG_JA
            <summary>mi～maのランダムな浮動小数点を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2Minus1_1">
            @if LANG_EN
            <summary>Return a random Vector2 -1,1.</summary>
            @endif
            @if LANG_JA
            <summary>-1～1のランダムな Vector2 を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Return a random Vector2 in mi,ma.</summary>
            @endif
            @if LANG_JA
            <summary>mi～maのランダムな Vector2 を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2(System.Single,System.Single)">
            @if LANG_EN
            <summary>Return a random Vector2 in mi,ma.</summary>
            @endif
            @if LANG_JA
            <summary>mi～maのランダムな Vector2 を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector3(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            @if LANG_EN
            <summary>Return a random Vector3 in mi,ma.</summary>
            @endif
            @if LANG_JA
            <summary>mi～maのランダムな Vector3 を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector4(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            @if LANG_EN
            <summary>Return a random Vector4 in mi,ma.</summary>
            @endif
            @if LANG_JA
            <summary>mi～maのランダムな Vector4 を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector4(System.Single,System.Single)">
            @if LANG_EN
            <summary>Return a random Vector4 in mi,ma.</summary>
            @endif
            @if LANG_JA
            <summary>mi～maのランダムな Vector4 を返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i">
            @if LANG_EN
            <summary>
            Integer version of Vector2.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Vector2 のint版。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.#ctor(System.Int32,System.Int32)">
            @if LANG_EN
            <summary>Vector2i constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Vector2">
            @if LANG_EN
            <summary>Return this as a Vector2 (cast to float).</summary>
            @endif
            @if LANG_JA
            <summary>floatのVector2 型に変換して値を返します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Max(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Element wise max.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の最大値。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Min(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Element wise min.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の最小値。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Clamp(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Element wise clamp.</summary>
            @endif
            @if LANG_JA
            <summary>引数の範囲でクランプ処理を行います。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.ClampIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>
            Element wise index clamp.
            X is clamped to [0,n.X-1]
            Y is clamped to [0,n.Y-1]
            <param name="n">The 2d size "this" components must be clamped against. The components of n are assumed to be positive (values of n.X or n.Y negative or zero will result in undefined behaviour).</param>
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Element wise index clamp.
            X is clamped to [0,n.X-1]
            Y is clamped to [0,n.Y-1]
            <param name="n">The 2d size "this" components must be clamped against. The components of n are assumed to be positive (values of n.X or n.Y negative or zero will result in undefined behaviour).</param>
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.WrapIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>
            Element wise index wrap. 
            X wraps around [0,n.X-1]
            Y wraps around [0,n.Y-1]
            This's (X,Y) is assumed to be a 2d index in a 2d table of size (n.X,n.Y).
            If X or Y are not in the valid array range, they are wrapped around [0,n.X-1] and [0,n.Y-1] respectively (-1 becomes n-1, n becomes 0, n+1 becomes 1 etc), else their value is unchanged.
            <param name="n">The 2d size "this" components must be wrapped around. The components of n are assumed to be positive (values of n.X or n.Y negative or zero will result in undefined behaviour).</param>
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Element wise index wrap. 
            X wraps around [0,n.X-1]
            Y wraps around [0,n.Y-1]
            This's (X,Y) is assumed to be a 2d index in a 2d table of size (n.X,n.Y).
            If X or Y are not in the valid array range, they are wrapped around [0,n.X-1] and [0,n.Y-1] respectively (-1 becomes n-1, n becomes 0, n+1 becomes 1 etc), else their value is unchanged.
            <param name="n">The 2d size "this" components must be wrapped around. The components of n are assumed to be positive (values of n.X or n.Y negative or zero will result in undefined behaviour).</param>
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Element wise addition.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の加算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Element wise subtraction.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の減算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Element wise multiplication.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の乗算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Int32)">
            @if LANG_EN
            <summary>Element wise multiplication.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の乗算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Element wise multiplication.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の乗算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Division(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Element wise division.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の除算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_UnaryNegation(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Unary minus operator.</summary>
            @endif
            @if LANG_JA
            <summary>単項マイナス演算子。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Equality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Return true if all elements are equal.</summary>
            @endif
            @if LANG_JA
            <summary>全ての要素が等しい場合、true を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Inequality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Return true if at least one element is non equal.</summary>
            @endif
            @if LANG_JA
            <summary>少なくとも1つの要素が等しくない場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Product">
            @if LANG_EN
            <summary>Return the product of elements, X * Y</summary>
            @endif
            @if LANG_JA
            <summary>要素の積、 X*Y を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>Equality test.</summary>
            @endif
            @if LANG_JA
            <summary>等価テスト。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Equals(System.Object)">
            @if LANG_EN
            <summary>Equality test.</summary>
            @endif
            @if LANG_JA
            <summary>等価テスト。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.ToString">
            @if LANG_EN
            <summary>Return the string representation of this vector.</summary>
            @endif
            @if LANG_JA
            <summary>このベクトルの文字列表現を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.GetHashCode">
            @if LANG_EN
            <summary>Gets the hash code for this vector.</summary>
            @endif
            @if LANG_JA
            <summary>このベクトルのハッシュコードを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Yx">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i">
            @if LANG_EN
            <summary>
            Integer version of Vector3.
            </summary>
            @endif
            @if LANG_JA
            <summary>Vector3 の int版。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.#ctor(System.Int32,System.Int32,System.Int32)">
            @if LANG_EN
            <summary>Vector3i constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Int32)">
            @if LANG_EN
            <summary>Vector3i constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Vector3">
            @if LANG_EN
            <summary>Return this as a Vector3 (cast to float).</summary>
            @endif
            @if LANG_JA
            <summary>floatのVector3 型に変換して値を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Max(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Element wise max.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の最大値。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Min(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Element wise min.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の最小値。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Clamp(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Element wise clamp.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位のクランプ処理。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.ClampIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>
            Element wise index clamp.
            X is clamped to [0,n.X-1]
            Y is clamped to [0,n.Y-1]
            Z is clamped to [0,n.Z-1]
            <param name="n">The 3d size "this" components must be clamped against. The components of n are assumed to be positive (values of n.X, n.Y or n.Z negative or zero will result in undefined behaviour).</param>
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Element wise index clamp.
            X is clamped to [0,n.X-1]
            Y is clamped to [0,n.Y-1]
            Z is clamped to [0,n.Z-1]
            <param name="n">The 3d size "this" components must be clamped against. The components of n are assumed to be positive (values of n.X, n.Y or n.Z negative or zero will result in undefined behaviour).</param>
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.WrapIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>
            Element wise index wrap. 
            X wraps around [0,n.X-1]
            Y wraps around [0,n.Y-1]
            Z wraps around [0,n.Z-1]
            This's (X,Y,Z) is assumed to be a 3d index in a 3d table of size (n.X,n.Y.n.Z).
            If X, Y or Z are not in the valid array range, they are wrapped around [0,n.X-1], [0,n.Y-1], [0,n.Z-1] respectively (-1 becomes n-1, n becomes 0, n+1 becomes 1 etc), else their value is unchanged.
            <param name="n">The 2d size "this" components must be wrapped around. The components of n are assumed to be positive (values of n.X, n.Y or n.Z negative or zero will result in undefined behaviour).</param>
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Element wise index wrap. 
            X wraps around [0,n.X-1]
            Y wraps around [0,n.Y-1]
            Z wraps around [0,n.Z-1]
            This's (X,Y,Z) is assumed to be a 3d index in a 3d table of size (n.X,n.Y.n.Z).
            If X, Y or Z are not in the valid array range, they are wrapped around [0,n.X-1], [0,n.Y-1], [0,n.Z-1] respectively (-1 becomes n-1, n becomes 0, n+1 becomes 1 etc), else their value is unchanged.
            <param name="n">The 2d size "this" components must be wrapped around. The components of n are assumed to be positive (values of n.X, n.Y or n.Z negative or zero will result in undefined behaviour).</param>
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Element wise addition.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の加算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Element wise subtraction.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の減算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Element wise multiplication.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の乗算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Division(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Element wise division.</summary>
            @endif
            @if LANG_JA
            <summary>要素単位の除算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Equality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Return true if all elements are equal.</summary>
            @endif
            @if LANG_JA
            <summary>すべての要素が等しい場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Inequality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Return true if at least one element is non equal.</summary>
            @endif
            @if LANG_JA
            <summary>少なくとも1つの要素が等しくない場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Product">
            @if LANG_EN
            <summary>Return the product of elements, X * Y * Z</summary>
            @endif
            @if LANG_JA
            <summary>要素の積、X * Y * Z を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            @if LANG_EN
            <summary>Equality test.</summary>
            @endif
            @if LANG_JA
            <summary>等価テスト。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Equals(System.Object)">
            @if LANG_EN
            <summary>Equality test.</summary>
            @endif
            @if LANG_JA
            <summary>等価テスト。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.ToString">
            @if LANG_EN
            <summary>Return the string representation of this vector.</summary>
            @endif
            @if LANG_JA
            <summary>このベクトルの文字列表現を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.GetHashCode">
            @if LANG_EN
            <summary>Gets the hash code for this vector.</summary>
            @endif
            @if LANG_JA
            <summary>このベクトルのハッシュコードを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzz">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics">
            @if LANG_EN
            <summary>Common interface for Bounds2, Sphere2, ConvexPoly2.</summary>
            @endif
            @if LANG_JA
            <summary>Bounds2, Sphere2, ConvexPoly2 の共通インターフェース。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.IsInside(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            @if LANG_EN
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.SignedDistance(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            @if LANG_EN
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2">
            @if LANG_EN
            <summary>
            An axis aligned box class in 2D.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            An axis aligned box class in 2D.
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Min">
            @if LANG_EN
            <summary>Minimum point (lower left).</summary>
            @endif
            @if LANG_JA
            <summary>Minimum point (lower left).</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Max">
            @if LANG_EN
            <summary>Maximum point (upper right)</summary>
            @endif
            @if LANG_JA
            <summary>Maximum point (upper right)</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.IsEmpty">
            @if LANG_EN
            <summary>Return true if the size is (0,0).</summary>
            @endif
            @if LANG_JA
            <summary>Return true if the size is (0,0).</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Bounds2 constructor.
            All functions in Bounds2 assume that Min is less or equal Max. If it is not the case, the user takes responsability for it.
            SafeBounds will ensure this is the case whatever the input is, but the default constructor will just blindly
            takes anything the user passes without trying to fix it.
            </summary>
            <param name="min">The bottom left point. Min is set to that value without further checking.</param>
            <param name="max">The top right point. Max is set to that value without further checking.</param>
            @endif
            @if LANG_JA
            <summary>
            Bounds2 constructor.
            All functions in Bounds2 assume that Min is less or equal Max. If it is not the case, the user takes responsability for it.
            SafeBounds will ensure this is the case whatever the input is, but the default constructor will just blindly
            takes anything the user passes without trying to fix it.
            </summary>
            <param name="min">The bottom left point. Min is set to that value without further checking.</param>
            <param name="max">The top right point. Max is set to that value without further checking.</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.#ctor(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Bounds2 constructor. 
            Return a zero size bounds. You can then use Add to expand it. 
            </summary>
            <param name="point">Location of the Bounds2.</param>
            @endif
            @if LANG_JA
            <summary>
            Bounds2 constructor. 
            Return a zero size bounds. You can then use Add to expand it. 
            </summary>
            <param name="point">Location of the Bounds2.</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.SafeBounds(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Create a Bounds2 that goes through 2 points, the min and max are recalculated.
            </summary>
            <param name="min">First point.</param>
            <param name="max">Second point.</param>
            @endif
            @if LANG_JA
            <summary>
            Create a Bounds2 that goes through 2 points, the min and max are recalculated.
            </summary>
            <param name="min">First point.</param>
            <param name="max">Second point.</param>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Zero">
            @if LANG_EN
            <summary>(0,0) -> (0,0) box.</summary>
            @endif
            @if LANG_JA
            <summary>(0,0) -> (0,0) box.</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Quad0_1">
            @if LANG_EN
            <summary>(0,0) -> (1,1) box.</summary>
            @endif
            @if LANG_JA
            <summary>(0,0) -> (1,1) box.</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.QuadMinus1_1">
            @if LANG_EN
            <summary>(-1,-1) -> (1,1) box.</summary>
            @endif
            @if LANG_JA
            <summary>(-1,-1) -> (1,1) box.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.CenteredSquare(System.Single)">
            @if LANG_EN
            <summary>
            Return a box that goes from (-h,-h) to (h,h).
            We don't check for sign.
            </summary>
            <param name="h">Half size of the square.</param>
            @endif
            @if LANG_JA
            <summary>
            Return a box that goes from (-h,-h) to (h,h).
            We don't check for sign.
            </summary>
            <param name="h">Half size of the square.</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Translate bounds.</summary>
            @endif
            @if LANG_JA
            <summary>Translate bounds.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Translate bounds.</summary>
            @endif
            @if LANG_JA
            <summary>Translate bounds.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Overlaps(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            @if LANG_EN
            <summary>Return true if this and 'bounds' overlap.</summary>
            @endif
            @if LANG_JA
            <summary>Return true if this and 'bounds' overlap.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Intersection(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            @if LANG_EN
            <summary>Return the Bounds2 resulting from the intersection of 2 bounds.</summary>
            @endif
            @if LANG_JA
            <summary>Return the Bounds2 resulting from the intersection of 2 bounds.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Scale(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Scale bounds around a given pivot.
            </summary>
            <param name="scale">Amount of scale.</param>
            <param name="center">Scale center.</param>
            @endif
            @if LANG_JA
            <summary>
            Scale bounds around a given pivot.
            </summary>
            <param name="scale">Amount of scale.</param>
            <param name="center">Scale center.</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Add(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Add the contribution of 'point' to this Bounds2.</summary>
            @endif
            @if LANG_JA
            <summary>Add the contribution of 'point' to this Bounds2.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Add(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            @if LANG_EN
            <summary>Add the contribution of 'bounds' to this Bounds2.</summary>
            @endif
            @if LANG_JA
            <summary>Add the contribution of 'bounds' to this Bounds2.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.ToString">
            @if LANG_EN
            <summary>Return the string representation of this Bounds2.</summary>
            @endif
            @if LANG_JA
            <summary>Return the string representation of this Bounds2.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.IsInside(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            @if LANG_EN
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            @if LANG_EN
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.OutrageousYTopBottomSwap">
            @if LANG_EN
            <summary>
            Swap y coordinates for top and bottom, handy for hacking uvs
            in system that use 0,0 as top left. Also, this will generate
            an invalid Bounds2 and all functions in that class will break
            (intersections, add etc.)
            
            Functions like Point00, Point10 etc can still be used.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Swap y coordinates for top and bottom, handy for hacking uvs
            in system that use 0,0 as top left. Also, this will generate
            an invalid Bounds2 and all functions in that class will break
            (intersections, add etc.)
            
            Functions like Point00, Point10 etc can still be used.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.OutrageousYVCoordFlip">
            @if LANG_EN
            <summary>
            Similar to OutrageousYTopBottomSwap, but instead of
            swapping top and bottom y, it just does y=1-y. Same
            comment as OutrageousYTopBottomSwap.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Similar to OutrageousYTopBottomSwap, but instead of
            swapping top and bottom y, it just does y=1-y. Same
            comment as OutrageousYTopBottomSwap.
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Aspect">
            @if LANG_EN
            <summary>The Width/Height ratio.</summary>
            @endif
            @if LANG_JA
            <summary>The Width/Height ratio.</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Center">
            @if LANG_EN
            <summary>The center of the bounds (Max+Min)/2.</summary>
            @endif
            @if LANG_JA
            <summary>The center of the bounds (Max+Min)/2.</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Size">
            @if LANG_EN
            <summary>The Size the bounds (Max-Min).</summary>
            @endif
            @if LANG_JA
            <summary>The Size the bounds (Max-Min).</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point00">
            @if LANG_EN
            <summary>The bottom left point (which is also Min).</summary>
            @endif
            @if LANG_JA
            <summary>The bottom left point (which is also Min).</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point11">
            @if LANG_EN
            <summary>The top right point (which is also Max).</summary>
            @endif
            @if LANG_JA
            <summary>The top right point (which is also Max).</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point10">
            @if LANG_EN
            <summary>The bottom right point.</summary>
            @endif
            @if LANG_JA
            <summary>The bottom right point.</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point01">
            @if LANG_EN
            <summary>The top left point.</summary>
            @endif
            @if LANG_JA
            <summary>The top left point.</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2">
            @if LANG_EN
            <summary>A plane class in 2D.</summary>
            @endif
            @if LANG_JA
            <summary>A plane class in 2D.</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.Base">
            @if LANG_EN
            <summary>A base point on the plane.</summary>
            @endif
            @if LANG_JA
            <summary>A base point on the plane.</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.UnitNormal">
            @if LANG_EN
            <summary>The plane normal vector, assumed to be unit length. If this is not the case, some functions will have undefined behaviour.</summary>
            @endif
            @if LANG_JA
            <summary>The plane normal vector, assumed to be unit length. If this is not the case, some functions will have undefined behaviour.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Plane2 constructor</summary>
            @endif
            @if LANG_JA
            <summary>Plane2 constructor</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.IsInside(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            @if LANG_EN
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.Project(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Project a point on this plane.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Project a point on this plane.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            @if LANG_EN
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2">
            @if LANG_EN
            <summary>A sphere class in 2D.</summary>
            @endif
            @if LANG_JA
            <summary>A sphere class in 2D.</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.Center">
            @if LANG_EN
            <summary>Sphere center.</summary>
            @endif
            @if LANG_JA
            <summary>Sphere center.</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.Radius">
            @if LANG_EN
            <summary>Sphere radius.</summary>
            @endif
            @if LANG_JA
            <summary>Sphere radius.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>Sphere2 constructor.</summary>
            @endif
            @if LANG_JA
            <summary>Sphere2 constructor.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.IsInside(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            @if LANG_EN
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            @if LANG_EN
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2">
            @if LANG_EN
            <summary>A convex polygon class in 2D.</summary>
            @endif
            @if LANG_JA
            <summary>A convex polygon class in 2D.</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Planes">
            @if LANG_EN
            <summary>
            The convex poly is stored as a list of planes assumed to define a 
            convex region. Plane base points are also polygon vertices.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            The convex poly is stored as a list of planes assumed to define a 
            convex region. Plane base points are also polygon vertices.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.#ctor(Sce.PlayStation.Core.Vector2[])">
            @if LANG_EN
            <summary>
            ConvexPoly2 constructor.
            Assumes input points define a convex region.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            ConvexPoly2 constructor.
            Assumes input points define a convex region.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.MakeBox(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.MakeRegular(System.UInt32,System.Single)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Size">
            @if LANG_EN
            <summary>Return the number of vertices (or faces)</summary>
            @endif
            @if LANG_JA
            <summary>Return the number of vertices (or faces)</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetPoint(System.Int32)">
            @if LANG_EN
            <summary>Get a vertex position.</summary>
            <param name="index">The vertex index.</param>
            @endif
            @if LANG_JA
            <summary>Get a vertex position.</summary>
            <param name="index">The vertex index.</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetNormal(System.Int32)">
            @if LANG_EN
            <summary>Get the normal vector of a face of this poly.</summary>
            <param name="index">The face index.</param>
            @endif
            @if LANG_JA
            <summary>Get the normal vector of a face of this poly.</summary>
            <param name="index">The face index.</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetPlane(System.Int32)">
            @if LANG_EN
            <summary>Get the plane formed by a face of this poly.</summary>
            <param name="index">The face index.</param>
            @endif
            @if LANG_JA
            <summary>Get the plane formed by a face of this poly.</summary>
            <param name="index">The face index.</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcBounds">
            @if LANG_EN
            <summary>Calculate the bounds of this poly.</summary>
            @endif
            @if LANG_JA
            <summary>Calculate the bounds of this poly.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcCenter">
            @if LANG_EN
            <summary>Calculate the gravity center of this poly.</summary>
            @endif
            @if LANG_JA
            <summary>Calculate the gravity center of this poly.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcArea">
            @if LANG_EN
            <summary>Calculate the area of this convex poly.</summary>
            @endif
            @if LANG_JA
            <summary>Calculate the area of this convex poly.</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.IsInside(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            @if LANG_EN
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Translate(Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            @if LANG_EN
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Sphere">
            @if LANG_EN
            <summary>Bounding sphere, centered at center of mass.</summary>
            @endif
            @if LANG_JA
            <summary>Bounding sphere, centered at center of mass.</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3">
            @if LANG_EN
            <summary>
            A 3x3 matrix class for 2D operations (similar to Matrix4).
            </summary>
            @endif
            @if LANG_JA
            <summary>2Dを扱うための 3x3の行列。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.X">
            @if LANG_EN
            <summary>First column.</summary>
            @endif
            @if LANG_JA
            <summary>1番目の列。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Y">
            @if LANG_EN
            <summary>Second column.</summary>
            @endif
            @if LANG_JA
            <summary>2番目の列。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Z">
            @if LANG_EN
            <summary>Third column.</summary>
            @endif
            @if LANG_JA
            <summary>3番目の列。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.#ctor(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            @if LANG_EN
            <summary>Constructor.
            </summary>
            <param name="valx">First column.</param>
            <param name="valy">Second column.</param>
            <param name="valz">Third column.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="valx">1番目の列。</param>
            <param name="valy">2番目の列。</param>
            <param name="valz">3番目の列。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.Core.Vector3)">
            @if LANG_EN
            <summary>Matrix/vector multiplication.</summary>
            @endif
            @if LANG_JA
            <summary>行列/ベクトルの乗算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3)">
            @if LANG_EN
            <summary>Matrix/matrix multiplication.</summary>
            @endif
            @if LANG_JA
            <summary>行列/行列の乗算。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Transpose">
            @if LANG_EN
            <summary>Return the transpose.</summary>
            @endif
            @if LANG_JA
            <summary>転置行列を返します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Identity">
            @if LANG_EN
            <summary>Return the identity.</summary>
            @endif
            @if LANG_JA
            <summary>単位行列を返します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Zero">
            @if LANG_EN
            <summary>Return the matrix with all elements set to zero.</summary>
            @endif
            @if LANG_JA
            <summary>全ての要素を0にセットした行列を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Translation(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Return a translation matrix.</summary>
            @endif
            @if LANG_JA
            <summary>平行移動行列を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Scale(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Return a scale matrix.</summary>
            @endif
            @if LANG_JA
            <summary>スケール行列を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Skew(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return a skew matrix.
            </summary>
            <param name="value">The (tan(skewx),tan(skewy)) vector, where skewx and skewy are the skew angles.</param>		
            @endif
            @if LANG_JA
            <summary>歪(skew)行列を返します。
            </summary>
            <param name="value"> (tan(skewx),tan(skewy)) ベクトル。skewx と skewy は歪の角度です。</param>		
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Rotation(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return a rotation matrix.
            </summary>
            <param name="unit_vector">A (cos(angle),sin(angle)) unit vector, where angle is the amount you want to rotate by.</param>
            @endif
            @if LANG_JA
            <summary>回転行列を返します。
            </summary>
            <param name="unit_vector">(cos(angle),sin(angle)) 単位ベクトル。 回転させたい角度を指定します。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Rotation(System.Single)">
            @if LANG_EN
            <summary>
            Return a rotation matrix.
            </summary>
            <param name="angle">Rotation angle in radians.</param>
            @endif
            @if LANG_JA
            <summary>回転行列を返します。
            </summary>
            <param name="angle">ラジアンの回転角。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.TRS(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return a Translation * Rotation * Scale transform node.
            </summary>
            <param name="translation">The translation amount.</param>
            <param name="unit_vector">A (cos(angle),sin(angle)) unit vector, where angle is the amount you want to rotate by.</param>
            <param name="scale">The scale amount.</param>
            @endif
            @if LANG_JA
            <summary>平行移動 * 回転 * スケール の変換行列を返します。
            </summary>
            <param name="translation">平行移動の量。</param>
            <param name="unit_vector">(cos(angle),sin(angle)) 単位ベクトル。 回転させたい角度を指定します。</param>
            <param name="scale">スケーリング。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Determinant">
            @if LANG_EN
            <summary>Return the determinant.</summary>
            @endif
            @if LANG_JA
            <summary>行列式を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Inverse">
            @if LANG_EN
            <summary>Return the general inverse.</summary>
            @endif
            @if LANG_JA
            <summary>逆行列を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.InverseOrthonormal">
            @if LANG_EN
            <summary>Special inverse that assumes the matrix is a TxR (orthonormal).</summary>
            @endif
            @if LANG_JA
            <summary>行列がTxR (直交) であると仮定した、特別な逆行列。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Matrix4">
            @if LANG_EN
            <summary>
            Assuming this matrix is a transform matrix (last row=0,0,1 etc), return a Matrix4 version of it.
            </summary>
            @endif
            @if LANG_JA
            <summary>この行列が変換行列 ( 最後の行が 0,0,1など)であると仮定して、それのMatrix4バージョンを返す。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.GetCoordSysError">
            @if LANG_EN
            <summary>
            Get the last error returned by isCoordSys() as a string.
            </summary>
            @endif
            @if LANG_JA
            <summary>isCoordSys（）によって返された最後のエラーを、文字列として取得します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.IsOrthonormal(System.Single)">
            @if LANG_EN
            <summary>
            Return true if the matrix represents a valid right-handed, orthogonal 2d coordinate system.
            </summary>
            @endif
            @if LANG_JA
            <summary>行列が、有効な右手座標系で、直交する2次元座標系を表す場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@,System.Single)">
            @if LANG_EN
            <summary>Equality test.</summary>
            @endif
            @if LANG_JA
            <summary>等価テスト。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            @if LANG_EN
            <summary>Equality test.</summary>
            @endif
            @if LANG_JA
            <summary>等価テスト。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.ToString">
            @if LANG_EN
            <summary></summary>
            @endif
            @if LANG_JA
            <summary>値を文字列化して返す。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack">
            @if LANG_EN
            <summary>
            A simple, OpenGL like, transform stack,
            with some optimization hints for dealing
            with orthonormal matrices.
            </summary>
            @endif
            @if LANG_JA
            <summary>OpenGLに似た、シンプルな変換行列のスタックです。直交行列を扱うための工夫がなされています。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.#ctor(System.UInt32)">
            @if LANG_EN
            <summary>MatrixStack constructor.</summary>
            <param name="capacity">Maximum depth of the stack.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="capacity">スタックの最大の深さ。</param>		
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Push">
            @if LANG_EN
            <summary>
            Push matrix pushes a copy of current top matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>現在トップにある行列をコピーして、スタックにプッシュします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Pop">
            @if LANG_EN
            <summary>
            Pop the top matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>トップの行列をポップします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Mul(Sce.PlayStation.Core.Matrix4)">
            @if LANG_EN
            <summary>
            Right multiply top matrix by 'mat'.
            </summary>
            @endif
            @if LANG_JA
            <summary>引数の 'mat' でトップの行列を右側から乗算します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Mul1(Sce.PlayStation.Core.Matrix4)">
            @if LANG_EN
            <summary>
            Right Multiply top matrix by an orthonormal matrix 'mat'. 
            If you know that your matrix is orthonormal, you can use 
            Mul1 instead of Mul. As long as you keep operating on 
            orthonormal matrices, inverse calculations will be faster.
            </summary>
            @endif
            @if LANG_JA
            <summary>直交行列 'mat' でトップの行列を右側から乗算します。もし行列が正規直交行列であることがわかっていれば、Mul()のかわりに Mul1()を使うことができます。正規直交行列で演算し続ける限り、逆計算はより速くなります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Set(Sce.PlayStation.Core.Matrix4)">
            @if LANG_EN
            <summary>
            Set the current matrix (top of the matrix stack).
            </summary>
            @endif
            @if LANG_JA
            <summary>行列スタックのトップに、現在の行列をセットします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Set1(Sce.PlayStation.Core.Matrix4)">
            @if LANG_EN
            <summary>
            Set an orthonormal matrix. If you know that your matrix
            is orthonormal, you can use Set1 instead of Set. As long
            as you keep operating on orthonormal matrices, inverse
            calculations will be faster.
            </summary>
            @endif
            @if LANG_JA
            <summary>正規直交行列を設定します。行列が正規直交であることが事前にわかっている場合、Set()の代わりにSet1()を使用することができます。正規直交行列で演算する限り、逆数計算はより速くなります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Get">
            @if LANG_EN
            <summary>
            Get the current matrix (top of the matrix stack).
            </summary>
            @endif
            @if LANG_JA
            <summary>現在、行列スタックのトップの行列を取得します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.GetInverse">
            @if LANG_EN
            <summary>
            Update (if necessary) and return the cached inverse matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>キャッシュされた逆行列を必要に応じて更新し、返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.SetIdentity">
            @if LANG_EN
            <summary>
            Set the top matrix to identity.
            </summary>
            @endif
            @if LANG_JA
            <summary>トップの行列に単位行列をセットします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateX(System.Single)">
            @if LANG_EN
            <summary>
            Rotate the top matrix around X axis.
            </summary>
            @endif
            @if LANG_JA
            <summary>トップの行列をX軸まわりで回転させます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateY(System.Single)">
            @if LANG_EN
            <summary>
            Rotate the top matrix around Y axis.
            </summary>
            @endif
            @if LANG_JA
            <summary>トップの行列をY軸まわりで回転させます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateZ(System.Single)">
            @if LANG_EN
            <summary>
            Rotate the top matrix around Z axis.
            </summary>
            @endif
            @if LANG_JA
            <summary>トップの行列をZ軸まわりで回転させます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Rotate(Sce.PlayStation.Core.Vector3,System.Single)">
            @if LANG_EN
            <summary>
            Rotate the top matrix around a user given axis.
            </summary>
            @endif
            @if LANG_JA
            <summary>開発者が指定した軸で、トップの行列を回転させます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Scale(Sce.PlayStation.Core.Vector3)">
            @if LANG_EN
            <summary>
            Scale the top matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>トップの行列をスケールさせます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Translate(Sce.PlayStation.Core.Vector3)">
            @if LANG_EN
            <summary>
            Translate the top matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>トップの行列を平行移動させます。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Tag">
            @if LANG_EN
            <summary>
            Tag is a number that gets incremented everytime the top matrix content changes.
            </summary>
            @endif
            @if LANG_JA
            <summary>Tag は一番上の行列の内容が変化したとき、インクリメントされる数値です。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Size">
            @if LANG_EN
            <summary>
            Size of current stack.
            </summary>
            @endif
            @if LANG_JA
            <summary>現在のスタックのサイズ。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Capacity">
            @if LANG_EN
            <summary>
            Maximum stack size.
            </summary>
            @endif
            @if LANG_JA
            <summary>最大スタックサイズ。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll">
            @if LANG_EN
            <summary>
            Pitch/roll rotations helper object/functions.
            Pitch(x) -> roll(y) rotation order
            roll in -pi, pi
            pitch in -pi/2,pi/2
            </summary>
            @endif
            @if LANG_JA
            <summary>ピッチ/ロール回転のヘルパーオブジェクト/関数。
            Pitch(x) -> roll(y)の順に回転します。
            ロールは-pi, pi、ピッチは-pi/2,pi/2です。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.FromVector(Sce.PlayStation.Core.Vector3)">
            @if LANG_EN
            <summary>
            Return pitch in x, roll in y.
            </summary>
            @endif
            @if LANG_JA
            <summary>ピッチ x とロール y を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToVector(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return z=(0,0,1) rotated by roll->pitch.
            </summary>
            @endif
            @if LANG_JA
            <summary>ロール -> ピッチで回転させた z=(0,0,1)を返します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.Data">
            @if LANG_EN
            <summary>x: pitch  y: roll (radians)</summary>
            @endif
            @if LANG_JA
            <summary>x: ピッチ  y: ロール (ラジアン)
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToVector">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToMatrix">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch">
            @if LANG_EN
            <summary>
            Pitch/roll rotations helper object/functions.
            Roll(y) -> pitch(x) rotation order
            pitch in -pi, pi
            roll in -pi/2,pi/2
            </summary>
            @endif
            @if LANG_JA
            <summary>Pitch/roll 回転のヘルパーオブジェクト/関数。
            Roll(y) -> pitch(x)の順に回転します。
            ピッチは-pi, pi、ロールは-pi/2,pi/2です。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.FromVector(Sce.PlayStation.Core.Vector3)">
            @if LANG_EN
            <summary>
            Return pitch in x, roll in y.
            </summary>
            @endif
            @if LANG_JA
            <summary>ピッチ x、ロール yを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToVector(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return z=(0,0,1) rotated by roll->pitch.
            </summary>
            @endif
            @if LANG_JA
            <summary>ロール -> ピッチで回転させる z=(0,0,1)を返します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.Data">
            @if LANG_EN
            <summary>x: pitch  y: roll (radians)</summary>
            @endif
            @if LANG_JA
            <summary>x:ピッチ、y:ロール (ラジアン)。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToVector">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToMatrix">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo">
            @if LANG_EN
            <summary>
            TextureInfo holds a Texture2D object and caches associated tile UV data. 
            The source region for tiling is not necesseraly the entire texture, it 
            can be any oriented box in UV domain. 
            TextureInfo takes ownership of the Texture2D object passed to it, and 
            disposes of it in its Dispose function.
            </summary>
            @endif
            @if LANG_JA
            <summary>TextureInfoは、Texture2Dオブジェクトを保持し、関連付けられたタイルのUVデータをキャッシュします。
            タイルの転送元領域はテクスチャ全体である必要はなく、UV領域内の任意の大きさのボックスで指定することができます。
            TextureInfoは、渡されるTexture2Dオブジェクトの所有権を取得し、Dispose関数で破棄します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Texture">
            @if LANG_EN
            <summary>The texture object.</summary>
            @endif
            @if LANG_JA
            <summary>テクスチャのオブジェクト。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TileSizeInUV">
            @if LANG_EN
            <summary>Return tile size in uv units.</summary>
            @endif
            @if LANG_JA
            <summary>UV単位でタイルのサイズを返します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.NumTiles">
            @if LANG_EN
            <summary>Return the dimensions of the tiles grid.</summary>
            @endif
            @if LANG_JA
            <summary>タイルグリッドの数を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.GetCachedTiledData(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i@)">
            @if LANG_EN
            <summary>Return the CachedTileData (which contains tile UV information) for a given tile.</summary>
            @endif
            @if LANG_JA
            <summary>引数で指定されたタイルのCachedTileData（タイルのUV情報が含まれている）を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor">
            @if LANG_EN
            <summary>TextureInfo constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(System.String)">
            @if LANG_EN
            <summary>TextureInfo constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D)">
            @if LANG_EN
            <summary>
            TextureInfo constructor.
            Note: TextureInfo takes ownership of the Texture2D passed to this constructor, and disposes of it in Dispose.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            注意: TextureInfoは、このコンストラクタに渡されるTexture2Dの所有権を取得し、Disposeでそれを破棄します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>
            TextureInfo constructor.
            Note: TextureInfo takes ownership of the Texture2D passed to this constructor, and disposes of it in Dispose.
            </summary>
            <param name="texture">The source texture.</param>
            <param name="num_tiles">The number of tile subdivisions on x and y.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            注意: TextureInfoは、このコンストラクタに渡されるTexture2Dの所有権を取得し、Disposeでそれを破棄します。
            </summary>
            <param name="texture">テクスチャ。</param>
            <param name="num_tiles">xとyのタイル分割数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            @if LANG_EN
            <summary>
            TextureInfo constructor.
            Note: TextureInfo takes ownership of the Texture2D passed to this constructor, and disposes of it in Dispose.
            </summary>
            <param name="texture">The source texture.</param>
            <param name="num_tiles">The number of tile subdivisions on x and y.</param>
            <param name="source_area">The source rectangle, in UV domain, on which we are going to build the tiles (bottom left is 0,0).</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            注意: TextureInfoは、このコンストラクタに渡されるTexture2Dの所有権を取得し、Disposeでそれを破棄します。
            </summary>
            <param name="texture">テクスチャ。</param>
            <param name="num_tiles">xとyのタイル分割数。</param>
            <param name="source_area">UV領域内の転送元矩形。この矩形内を分割してタイルを構築します。左下が(0,0)になります。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>オブジェクトの破棄。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Initialize(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            @if LANG_EN
            <summary>The actual init function called by TextureInfo constructors.
            </summary>
            <param name="texture">The source texture.</param>
            <param name="num_tiles">The number of tiles/cells, horitonally and vertically.</param>
            <param name="source_area">The source rectangle, in UV domain, on which we are going to build the tiles (bottom left is 0,0).</param>
            @endif
            @if LANG_JA
            <summary>TextureInfoコンストラクタによって呼び出される、実質的な初期化関数。
            </summary>
            <param name="texture">テクスチャ。</param>
            <param name="num_tiles">セル内のタイル数。水平方向と垂直方向の数を指定します。</param>
            <param name="source_area">UV領域内の転送元矩形。この矩形内を分割してタイルを構築します。左下が(0,0)になります。</param>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TextureSizef">
            @if LANG_EN
            <summary>Return texture size in pixels as a Vector2.</summary>
            @endif
            @if LANG_JA
            <summary>ピクセル単位のテクスチャのサイズをVector2で返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TextureSizei">
            @if LANG_EN
            <summary>Return texture size in pixels as a Vector2i.</summary>
            @endif
            @if LANG_JA
            <summary>ピクセル単位のテクスチャのサイズをVector2iで返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TileSizeInPixelsf">
            @if LANG_EN
            <summary>Return tile size in pixels as a Vector2. All tiles have the same size.</summary>
            @endif
            @if LANG_JA
            <summary>ピクセル単位のタイルサイズを、Vector2で返します。すべてのタイルは同じサイズを持っています。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Disposed">
            @if LANG_EN
            <summary>Return true if this object been disposed.</summary>
            @endif
            @if LANG_JA
            <summary>このオブジェクトが破棄されている場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData">
            @if LANG_EN
            <summary>Cached UV information for each tile.</summary>
            @endif
            @if LANG_JA
            <summary>各タイルのキャッシュされたUV情報。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_00">
            @if LANG_EN
            <summary>Bottom left point UV.</summary>
            @endif
            @if LANG_JA
            <summary>左下のUVポイント。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_10">
            @if LANG_EN
            <summary>Bottom right point UV.</summary>
            @endif
            @if LANG_JA
            <summary>右下のUVポイント。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_01">
            @if LANG_EN
            <summary>Top left point UV.</summary>
            @endif
            @if LANG_JA
            <summary>左上のUVポイント。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_11">
            @if LANG_EN
            <summary>Top right point UV.</summary>
            @endif
            @if LANG_JA
            <summary>右上のUVポイント。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer">
            @if LANG_EN
            <summary>
            SpriteRenderer wraps batch rendering of sprites in a simple BeginSprites / AddSprite x N / EndSprite API.
            It also provides some text rendering functions that uses FontMap.
            </summary>
            @endif
            @if LANG_JA
            <summary>SpriteRendererは、単純なBeginSprites / AddSprite X N / EndSprite APIでのスプライトの一括描画をラップします。
            また、FontMap を使ったテキスト描画関数を提供します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.FlipU">
            @if LANG_EN
            <summary>
            Flag that will swap the U coordinates (horizontally) of all rendered sprites/quads.
            </summary>
            @endif
            @if LANG_JA
            <summary>描画される全てのスプライト/クワッドのU座標を水平に反転するフラグ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.FlipV">
            @if LANG_EN
            <summary>
            Flag that will swap the V coordinates (vertically) of all rendered sprites/quads.
            </summary>
            @endif
            @if LANG_JA
            <summary>描画される全てのスプライト/クワッドのV座標を垂直に反転するフラグ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32)">
            @if LANG_EN
            <summary>SpriteRenderer constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Dispose の実装。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextDebug(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader)">
            @if LANG_EN
            <summary>
            Debug text draw function, using a small embedded font suitable for on screen debug prints.
            Since DrawTextDebug uses very small font data, it only work with ascii text (characters
            from ' ' to '~', 32 to 126) Any character outside this range will be displayed as '?'.
            For instance "こんにちは" will be displayed as "?????".
            </summary>
            <param name="str">The text to draw.</param>
            <param name="bottom_left_start_pos">The bottom left of the text rectangle, in world space/units.</param>
            <param name="char_height">The character height in world space/units.</param>
            <param name="draw">If false, don't draw anything, just return the Bounds2 used by the text.</param>
            <param name="shader">If no shader is specified, DefaultFontShader is used.</param>
            <returns>The rectangle area covered by rendered text (call with draw=false when you want to know the covered area before actually drawing it).</returns>
            @endif
            @if LANG_JA
            <summary>DrawDebugTextは、埋め込まれた小さなフォントを使って、スクリーン上に文字を表示します。
            DrawDebugTextは簡易的なフォントデータであるため、アスキー文字にしか対応していません ( ' '(32) から '~'(126)までの文字)。
            アスキー文字以外の文字は'?'で表示されます。例えば「こんにちは」は "?????" と表示されます。
            </summary>
            <param name="str">描画するテキスト。</param>
            <param name="bottom_left_start_pos">ワールド空間/ユニット内での、テキスト矩形の左下の点。</param>
            <param name="char_height">ワールド空間/ユニット内での文字の高さ。</param>
            <param name="draw">falseを指定した場合、何も描画せず、テキストによって使用される Bound2 を返します。</param>
            <param name="shader">シェーダーを指定しない場合、DefaultFontShader が使用されます。</param>
            <returns>描画されたテキストでカバーされた矩形領域。実際に描画する前に矩形領域を知りたい場合、draw=trueで呼び出してください。</returns>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextWithFontMap(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader)">
            @if LANG_EN
            <summary>This text draw function uses a FontMap object.</summary>
            <param name="str">The text to draw.</param>
            <param name="bottom_left_start_pos">The bottom left of the text rectangle, in world space/units.</param>
            <param name="char_height">The character height in world space/units.</param>
            <param name="draw">If false, don't draw anything, just return the Bounds2 used by the text.</param>
            <param name="fontmap">the fontmap object (that holds the texture).</param>
            <param name="shader">The shader defaults to SpriteRenderer.DefaultFontShader.</param>
            @endif
            @if LANG_JA
            <summary>FontMapオブジェクトを使ったテキスト描画関数。
            </summary>
            <param name="str">描画するテキスト。</param>
            <param name="bottom_left_start_pos">ワールド空間/units内でのテキスト矩形の左下の点。</param>
            <param name="char_height">ワールド空間/units内での文字の高さ。</param>
            <param name="draw">falseを指定した場合、何も描画せず、テキストによって使用された Bound2 を返します。</param>
            <param name="fontmap">フォントマップのオブジェクト (テクスチャを保持します)。</param>
            <param name="shader">SpriteRenderer.DefaultFontShader のデフォルトシェーダー。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextWithFontMap(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap)">
            @if LANG_EN
            <summary>This text draw function uses a FontMap object and SpriteRenderer's DefaultShader.</summary>
            <param name="str">The text to draw.</param>
            <param name="bottom_left_start_pos">The bottom left of the text rectangle, in world space/units.</param>
            <param name="char_height">The character height in world space/units.</param>
            <param name="draw">If false, don't draw anything, just return the Bounds2 used by the text.</param>
            <param name="fontmap">the fontmap object (that holds the texture).</param>
            @endif
            @if LANG_JA
            <summary>このテキスト描画関数は FontMap オブジェクトと SpriteRenderer の DefaultShader を使用します。
            </summary>
            <param name="str">描画するテキスト。</param>
            <param name="bottom_left_start_pos">ワールド空間/ユニット内での、テキスト矩形の左下。</param>
            <param name="char_height">ワールド空間/ユニット内での文字の高さ。</param>
            <param name="draw">falseを指定した場合、何も描画せず、テキストによって使用された Bound2 を返します。</param>
            <param name="fontmap">フォントマップのオブジェクト (テクスチャを保持します)。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.BeginSprites(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader,System.Int32)">
            @if LANG_EN
            <summary>Start batch rendering of sprites.</summary>
            <param name="texture_info">The texture object.</param>
            <param name="shader">The shader object.</param>
            <param name="num_sprites">The maximum number of sprite you intend to draw.</param>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画を開始します。
            </summary>
            <param name="texture_info">テクスチャオブジェクト。</param>
            <param name="shader">シェーダーオブジェクト。</param>
            <param name="num_sprites">描画するスプライトの最大数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.BeginSprites(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,System.Int32)">
            @if LANG_EN
            <summary>Start batch rendering of sprites.</summary>
            <param name="texture_info">The texture object.</param>
            <param name="num_sprites">The maximum number of sprite you intend to draw.</param>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画を開始します。
            </summary>
            <param name="texture_info">テクスチャオブジェクト。</param>
            <param name="num_sprites">描画するスプライトの最大数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.EndSprites">
            @if LANG_EN
            <summary>
            End batch rendering of sprites.
            </summary>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画を終了します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            </summary>
            <param name="quad">The sprite geometry.</param>
            <param name="tile_index">Sprite UVs are specified by a tile index.</param>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            </summary>
            <param name="quad">スプライトの幾何情報。</param>
            <param name="tile_index">タイルインデックスで指定する、スプライトのUV。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            @if LANG_EN
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            </summary>
            <param name="quad">The sprite geometry.</param>
            <param name="tile_index">Sprite UVs are specified by a tile index.</param>
            <param name="mat">A per sprite transform matrix.</param>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            </summary>
            <param name="quad">スプライトの幾何情報。</param>
            <param name="tile_index">タイルインデックスで指定する、スプライトのUV。</param>
            <param name="mat">スプライトごとの変換行列。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@)">
            @if LANG_EN
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            </summary>
            <param name="quad">The sprite geometry.</param>
            <param name="uv">Sprite UVs are specified directly using a TRS object.</param>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            </summary>
            <param name="quad">スプライトの幾何情報。</param>
            <param name="uv">TRSオブジェクトで指定するスプライトのUV。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            @if LANG_EN
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            </summary>
            <param name="quad">The sprite geometry.</param>
            <param name="uv">Sprite UVs are specified directly using a TRS object.</param>
            <param name="mat">A per sprite transform matrix.</param>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            </summary>
            <param name="quad">スプライトの幾何情報。</param>
            <param name="uv">TRSオブジェクトで指定するスプライトのUV。</param>
            <param name="mat">スプライトごとの変換行列。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            @if LANG_EN
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            One vector is enough to determine the orientation and scale of the sprite. The aspect ratio is
            by default the same was the size of the 'uv' domain covered (in texels).
            </summary>
            <param name="x">The len and direction of the bottom edge of the sprite.</param>
            <param name="bottom_left_start_pos">The bottom left point of the sprite.</param>
            <param name="uv_bounds">The uv bounds (Bounds2 in uv domain).</param>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            ひとつのベクトルでスプライトの向きとスケールを決定します。
            </summary>
            <param name="x">スプライトの下端の長さと方向。</param>
            <param name="bottom_left_start_pos">スプライトの左下の点。</param>
            <param name="uv_bounds">UVの境界 ( UV領域内のBounds2)。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            @if LANG_EN
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            In this version user specify 4 vertices as Vector4, where each Vector4's xy is the position of 
            the vertex, and zw is the UV.
            </summary>
            @endif
            @if LANG_JA
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            このバージョンでは、開発者は Vector4 で4つの頂点を指定します。Vector4の xy は 頂点の位置であり、 zw は UV です。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader">
            @if LANG_EN
            <summary>The default shader used by SpriteRenderer.</summary>
            @endif
            @if LANG_JA
            <summary>SpriteRenderer によって使用されるデフォルトのシェーダー。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader">
            @if LANG_EN
            <summary>The default font shader used by SpriteRenderer.</summary>
            @endif
            @if LANG_JA
            <summary>SpriteRenderer によって使用される、Fontのためのデフォルトのシェーダー。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.Disposed">
            @if LANG_EN
            <summary>Return true if this object been disposed.</summary>
            @endif
            @if LANG_JA
            <summary>オブジェクトが破棄されている場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader">
            @if LANG_EN
            <summary>
            That's all the interface we require from the shaders set by user.
            </summary>
            @endif
            @if LANG_JA
            <summary>開発者によって設定されるシェーダープログラムのインターフェース。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetMVP(Sce.PlayStation.Core.Matrix4@)">
            @if LANG_EN
            <summary>
            The Projection * View * Model matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>プロジェクション行列 * ビュー行列 * モデル行列。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetColor(Sce.PlayStation.Core.Vector4@)">
            @if LANG_EN
            <summary>
            Global color.
            </summary>
            @endif
            @if LANG_JA
            <summary>グローバルカラー。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetUVTransform(Sce.PlayStation.Core.Vector4@)">
            @if LANG_EN
            <summary>
            Set the uv transform: offset in Xy and scale in Zw, (0,0,1,1) means UV is unchanged.
            Shader code example: transformed_uv = UVTransform.xy + uv * UVTransform.zw
            </summary>
            @endif
            @if LANG_JA
            <summary>UVの変換を設定します。Xy内のオフセット、Zwのスケール、(0,0,1,1)はUVが変更されないことを意味します。
            シェーダーコードの例：transformed_uv = UVTransform.xy + UV * UVTransform.zw
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.GetShaderProgram">
            @if LANG_EN
            <summary>
            Get the ShaderProgram object.
            </summary>
            @endif
            @if LANG_JA
            <summary>ShaderProgram オブジェクトを取得します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader_">
            @if LANG_EN
            <summary>
            Sprites's default shader: texture modulated by a color.
            </summary>
            @endif
            @if LANG_JA
            <summary>スプライトのデフォルトのシェーダー：色によって変調されたテクスチャ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader_.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader_">
            @if LANG_EN
            <summary>
            Font's default shader.
            </summary>
            @endif
            @if LANG_JA
            <summary>Fontのデフォルトのシェーダー。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader_.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer">
            @if LANG_EN
            <summary>A simple timer.</summary>
            @endif
            @if LANG_JA
            <summary>シンプルなタイマー。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.#ctor">
            @if LANG_EN
            <summary>Timer constructor.</summary>
            @endif
            @if LANG_JA
            <summary>Timerのコンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Reset">
            @if LANG_EN
            <summary>
            Reset the timer.
            </summary>
            @endif
            @if LANG_JA
            <summary>タイマーをリセットします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Milliseconds">
            @if LANG_EN
            <summary>
            Return time elapsed (in milliseconds) since constructor as called or since last call to Reset().
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタが呼び出された瞬間、または Reset()が呼び出された瞬間からの経過時間をミリ秒単位で返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Seconds">
            @if LANG_EN
            <summary>
            Return time elapsed (in seconds) since constructor as called or since last call to Reset().
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタが呼び出された瞬間、または Reset()が呼び出された瞬間からの経過時間を秒単位で返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS">
            @if LANG_EN
            <summary>
            TRS comes from scenegraph terminology and is used to store a
            Translate/Rotate/Scale 2d transform in a canonical way. It also
            defines an oriented bounding box. We use it for storing both 
            sprite positionning/size and sprite UV.
            </summary>
            @endif
            @if LANG_JA
            <summary>TRSはシーングラフの専門用語です。TRSは平行移動/回転/スケールの2D変換行列を標準的な方法で格納するのために使用されています。
            また、向きをもった境界ボックスを定義します。
            TRSはスプライトの配置/サイズとスプライトUVの両方を格納するためにも使用します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.T">
            @if LANG_EN
            <summary>Translation.</summary>
            @endif
            @if LANG_JA
            <summary>平行移動。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.R">
            @if LANG_EN
            <summary>Rotation - stored as a unit vector (cos,sin).</summary>
            @endif
            @if LANG_JA
            <summary>回転。単位ベクトル (cos,sin) として格納します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.S">
            @if LANG_EN
            <summary>Scale (or Size).</summary>
            @endif
            @if LANG_JA
            <summary>スケール (またはサイズ)。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Rotate(System.Single)">
            @if LANG_EN
            <summary>Rotate the object by an angle.</summary>
            <param name="angle">Rotation angle in radian.</param>
            @endif
            @if LANG_JA
            <summary>角度を指定してオブジェクトを回転させます。
            </summary>
            <param name="angle">Rotation angle in radian.</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Rotate(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>Rotate the object by an angle.</summary>
            <param name="rotation">The (cos(angle),sin(angle)) unit vector representing the rotation.</param>
            This lets you precompute the cos,sin needed during rotation.
            @endif
            @if LANG_JA
            <summary>角度を指定してオブジェクトを回転させます。
            </summary>
            <param name="rotation">回転を表す(cos(angle),sin(angle))の単位ベクトル。</param>
            This lets you precompute the cos,sin needed during rotation.
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Quad0_1">
            @if LANG_EN
            <summary>A TRS that covers the unit quad that goes from (0,0) to (1,1).</summary>
            @endif
            @if LANG_JA
            <summary>（0,0）（1,1）からなる単位クワッドをカバーするTRS。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.QuadMinus1_1">
            @if LANG_EN
            <summary>A TRS that covers the quad that goes from (-1,-1) to (1,1).</summary>
            @endif
            @if LANG_JA
            <summary>（-1,-1）（1,1）からなるクワッドをカバーするTRS。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            @if LANG_EN
            <summary>Convert from Bounds2: a_bounds.Min becomes T and a_bounds.Size becomes S (no rotation).</summary>
            @endif
            @if LANG_JA
            <summary>Bounds2からの変換 : a_bounds.Min は T になり、a_bounds.Size は Sになります(回転なし)。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Bounds2">
            @if LANG_EN
            <summary>
            Convert to Bounds2. Note that end points won't match if there is a Rotation,
            but in all cases the returned bounds fully contains the TRS.
            </summary>
            @endif
            @if LANG_JA
            <summary>Bounds2に変換します。回転がある場合は、エンドポイントが一致しないことに注意してください。しかし、すべてのケースで、返された境界は完全にTRSを含んでいます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Tile(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            @if LANG_EN
            <summary>
            Get a subregion from source_area, given a number of tiles and a tile index,
            assuming evenly spaced subdivision. Typically source_area will be Quad0_1
            (the unit quad, means the whole texture) and we return the uv info for a 
            given tile in the tiled texture.
            </summary>
            @endif
            @if LANG_JA
            <summary>タイル数とタイルのインデックスを指定し、引数 source_area からサブ領域を取得します。
            一般的にsource_areaはQuad0_1（単位クワッド、全体のテクスチャを意味する）になります。
            タイルのテクスチャ内で、指定されたタイルのUV情報を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Centering(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Translate the TRS so that the normalized point given in input becomes (0,0). 
            There are a few predefined normalized points in TRS.Local.
            </summary>
            <param name="normalized_pos">The normalized position that will become the new center. 
            For example (0.5,0.5) represents the center of the TRS, regardless of the actual size, 
            position and orientation of the TRS. (0,0) is the bottom left point, (1,1) is the top
            right point etc.</param>
            @endif
            @if LANG_JA
            <summary>入力で与えられる、正規化された点が（0,0）になるようにTRSを変換します。TRS.Localで事前に定義され、正規化された点です。
            </summary>
            <param name="normalized_pos">新しい中心になる、正規化された位置。たとえば、実際のサイズ、位置、TRSの向きに関係なく、( 0.5, 0.5 ) はTRSの中心を表しています。 ( 0, 0 )は左下の点、( 1, 1 )は右上の点です。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.ToString">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.X">
            @if LANG_EN
            <summary>The support X vector, which goes from bottom left to bottom right.</summary>
            @endif
            @if LANG_JA
            <summary>左下から右下に向かう、サポートXベクトル。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Y">
            @if LANG_EN
            <summary>The support Y vector, which goes from bottom left to top left.</summary>
            @endif
            @if LANG_JA
            <summary>左下から左上に向かう、サポートYベクトル。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point00">
            @if LANG_EN
            <summary>The bottom left point (the base point), (0,0) in 'local' coordinates.</summary>
            @endif
            @if LANG_JA
            <summary>ロカール座標での左下の点 (基準点), (0,0)。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point10">
            @if LANG_EN
            <summary>The bottom right point, (1,0) in 'local' coordinates.</summary>
            @endif
            @if LANG_JA
            <summary>ロカール座標での右下の点 (1,0)。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point01">
            @if LANG_EN
            <summary>The top left point, (0,1) in 'local' coordinates.</summary>
            @endif
            @if LANG_JA
            <summary>ロカール座標での左上の点 (0,1)。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point11">
            @if LANG_EN
            <summary>The top right point, (1,1) in 'local' coordinates.</summary>
            @endif
            @if LANG_JA
            <summary>ロカール座標での右上の点 (1,1)。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Center">
            @if LANG_EN
            <summary>Return the center of the oriented box defined by this TRS.</summary>
            @endif
            @if LANG_JA
            <summary>このTRSによって定義された向きを持ったボックスの中心を返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.RotationNormalize">
            @if LANG_EN
            <summary>
            RotationNormalize is like Rotation, but it normalizes on set,
            to prevent the unit vector from drifting because of accumulated numerical imprecision.
            </summary>
            @endif
            @if LANG_JA
            <summary>RotationNormalize は Rotation に似ています。しかし RotationNormalize は誤差の蓄積を防ぐために、単位ベクトルを正規化します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Angle">
            @if LANG_EN
            <summary>
            This property lets you set/get rotation as a angle. This is expensive and brings the usual
            angle discontinuity problems. The angle is always stored and returned in the the range -pi,pi.
            </summary>
            @endif
            @if LANG_JA
            <summary>このプロパティは角度で回転を設定/取得します。これは重い処理であり、通常角度の不連続性の問題をもたらします。角度は常に格納され、-pi,piの範囲で値を返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local">
            @if LANG_EN
            <summary>Some aliases for commonly used points that can be passed to Centering.</summary>
            @endif
            @if LANG_JA
            <summary>エイリアス。一般的にCenteringに渡すために使用します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.MiddleLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopCenter">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.Center">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomCenter">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopRight">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.MiddleRight">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomRight">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>
            </summary>
            Hermite spline evaluation given 2 scalar and 2 gradients. Parameter u is in [0,1].
            <param name="v">
            v.x = value at 0
            v.y = value at 1
            v.z = gradient at 0
            v.w = gradient at 1
            </param>
            <param name="u">Curve parameter in [0,1].</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>
            Hermite spline evaluation, given 2 points in xy and their tangents
            (p2's x value must be superior to p0's x value).
            </summary>
            <param name="x">The curve parameter.</param>
            <param name="p0">Left point.</param>
            <param name="p1">Right point.</param>
            <param name="t0">Tangent at p0.</param>
            <param name="t1">Tangent at p2.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            </summary>
            Hermite spline evaluation, given 4 points in xy.
            <param name="x">Eval parameter.</param>
            <param name="p0">Start point.</param>
            <param name="p2">End point.</param>
            <param name="p01">Vector p0,p01 defines the tangent at p0 (length matters).</param>
            <param name="p21">Vector p2,p21 defines the tangent at p2 (lenght matters).</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Cubic bezier, Vector2 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>Cubic bezier, Vector3 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Cubic bezier, Vector4 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Catmull-Rom, Vector2 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>Catmull-Rom, Vector3 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Catmull-Rom, Vector4 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRomAndDerivative(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Catmull-Rom curve evaluation for 4 Vector2 control points.
            Return a Vector4 with position in xy and tangent in zw. Just apply Math.Perp to the tangent to get the normal vector.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BezierAuto(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>
            Piecewise cubic bezier curve.
            </summary>
            <param name="t">The curve parameter.</param>
            <param name="p0">Control point 0.</param>
            <param name="p1">Control point 1.</param>
            <param name="p2">Control point 2.</param>
            <param name="p3">Control point 3.</param>
            <param name="r">Tangent control.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            B-Spline curve evaluation for 4 Vector2 control points.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>
            B-Spline curve evaluation for 4 Vector4 control points.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BsplineAndDerivative(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            B-Spline curve evaluation for 4 Vector2 control points.
            Return a Vector4 with position in xy and tangent in zw. Just apply Math.Perp to the tangent to get the normal vector.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Catmull-Rom curve evaluation for n Vector2 control points (position only).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRomAndDerivative(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Catmull-Rom curve evaluation (with derivative) for n Vector2 control points (position only).
            Return position in xy, tangent in zw. Just apply Math.Perp to the tangent to get the normal.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Bspline curve evaluation for n Vector2 control points (position only).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BsplineAndDerivative(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Bspline curve evaluation (with derivative) for n Vector2 control points.
            Return position in xy, tangent in zw. Just apply Math.Perp to the tangent to get the normal.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase">
            @if LANG_EN
            <summary>
            The base class for all actions.
            </summary>
            @endif
            @if LANG_JA
            <summary>全てのアクションの基底クラス。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Tag">
            @if LANG_EN
            <summary>A tag value that can be used for searching this action.</summary>
            @endif
            @if LANG_JA
            <summary>このアクションを検索するために使用するタグ値。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Run">
            @if LANG_EN
            <summary>Kick the action.</summary>
            @endif
            @if LANG_JA
            <summary>アクションをキック (実行) します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Stop">
            @if LANG_EN
            <summary>Stop the action (some types of actions stop themselves).</summary>
            @endif
            @if LANG_JA
            <summary>アクションを停止します (いくつかのアクションは自動で停止します)。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Update(System.Single)">
            @if LANG_EN
            <summary>The update function for this action, called every frame.</summary>
            @endif
            @if LANG_JA
            <summary>毎フレーム呼び出される、このアクションのUpdate関数。</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.IsRunning">
            @if LANG_EN
            <summary>IsRunning is true when the action is active.</summary>
            @endif
            @if LANG_JA
            <summary>このアクションがアクティブの場合、IsRunning は true になります。</summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Target">
            @if LANG_EN
            <summary>The node affected by this action.</summary>
            @endif
            @if LANG_JA
            <summary>このアクションによって影響を受けるノード。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration">
            @if LANG_EN
            <summary>
            The base class for actions with a finite duration.
            This is an abstract class.
            </summary>
            @endif
            @if LANG_JA
            <summary>有限の期間を持つアクションの基底クラス。
            抽象クラス。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration.Duration">
            @if LANG_EN
            <summary>This action's duration in seconds.</summary>
            @endif
            @if LANG_JA
            <summary>秒単位でのアクションの期間。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration.Run">
            @if LANG_EN
            <summary>Kick this action.</summary>
            @endif
            @if LANG_JA
            <summary>アクションをキックします。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc">
            @if LANG_EN
            <summary>
            A one shot action that calls a user function.
            </summary>
            @endif
            @if LANG_JA
            <summary>指定した関数を呼び出す、ワンショットアクション。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.Func">
            @if LANG_EN
            <summary>The function this action calls.</summary>
            @endif
            @if LANG_JA
            <summary>このアクションが呼び出す関数。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.#ctor(System.Action)">
            @if LANG_EN
            <summary>CallFunc constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.Update(System.Single)">
            @if LANG_EN
            <summary>The update function.</summary>
            @endif
            @if LANG_JA
            <summary>Update関数。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime">
            @if LANG_EN
            <summary>
            A wait action, that ends after a user specified duration.
            </summary>
            @endif
            @if LANG_JA
            <summary>指定した期間ののち終了する、待機アクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.#ctor">
            @if LANG_EN
            <summary>DelayTime constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.#ctor(System.Single)">
            @if LANG_EN
            <summary>DelayTime constructor.</summary>
            <param name="duration">The time to wait, in seconds.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            <param name="duration">秒単位での待機時間。</param>		
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.Run">
            @if LANG_EN
            <summary>Kick this action.</summary>
            @endif
            @if LANG_JA
            <summary>このアクションをキックします。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.Update(System.Single)">
            @if LANG_EN
            <summary>The update function.</summary>
            @endif
            @if LANG_JA
            <summary>Update関数。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1">
            @if LANG_EN
            <summary>
            The base class for generic interpolating actions, you just pass set/get functions.
            This is an abstract class.
            </summary>
            @endif
            @if LANG_JA
            <summary>汎用的な補間アクションの基底クラス。set/get 関数をセットします。
            抽象クラス。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.TargetValue">
            @if LANG_EN
            <summary>The target value.</summary>
            @endif
            @if LANG_JA
            <summary>ターゲットの値。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.IsRelative">
            @if LANG_EN
            <summary>If true, the target value is an offset.</summary>
            @endif
            @if LANG_JA
            <summary>trueの場合、ターゲットの値はオフセットです。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Tween">
            @if LANG_EN
            <summary>
            The tween/interpolation function, basically a f(x) function where f(x) goes from
            0 to 1 when x goes from 0 to 1.
            
            Example of function you can set DTween to:
            
            (t) => Math.Linear(t);
            
            (t) => Math.ExpEaseIn(t,1.0f);
            
            (t) => Math.ExpEaseOut(t,1.0f);
            
            (t) => Math.PowEaseIn(t,4.0f);
            
            (t) => Math.PowEaseOut(t,4.0f);
            
            (t) => Math.PowEaseInOut(t,4.0f);
            
            (t) => Math.BackEaseIn(t,1.0f);
            
            (t) => Math.BackEaseOut(t,1.0f);
            
            (t) => Math.BackEaseInOut(t,1.0f);
            
            (t) => Math.PowerfulScurve(t,3.7f,3.7f);
            
            (t) => Math.Impulse(t,10.0f);
            
            (t) => FMath.Sin(t*Math.Pi*0.5f); // for sin curve tween
            
            More about tweens can be found int he cocos2d documentaiton which itselfs points to:
            
            http://www.robertpenner.com/easing/easing_demo.html
            
            http://www.robertpenner.com/easing/penner_chapter7_tweening.pdf
            
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Tween/補間の関数。基本的に xが0から1になるとき、f(x)が0から1になる f(x)です。
            
            DTween を設定可能な関数の例です。
            
            (t) => Math.Linear(t);
            
            (t) => Math.ExpEaseIn(t,1.0f);
            
            (t) => Math.ExpEaseOut(t,1.0f);
            
            (t) => Math.PowEaseIn(t,4.0f);
            
            (t) => Math.PowEaseOut(t,4.0f);
            
            (t) => Math.PowEaseInOut(t,4.0f);
            
            (t) => Math.BackEaseIn(t,1.0f);
            
            (t) => Math.BackEaseOut(t,1.0f);
            
            (t) => Math.BackEaseInOut(t,1.0f);
            
            (t) => Math.PowerfulScurve(t,3.7f,3.7f);
            
            (t) => Math.Impulse(t,10.0f);
            
            (t) => FMath.Sin(t*Math.Pi*0.5f); // for sin curve tween
            
            tweenの詳細については、cocos2dのドキュメントを参考にしてください。
            
            http://www.robertpenner.com/easing/easing_demo.html
            
            http://www.robertpenner.com/easing/penner_chapter7_tweening.pdf
            
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Set">
            @if LANG_EN
            <summary>
            The function that sets the current value as we execute the tween.
            </summary>
            @endif
            @if LANG_JA
            <summary>tweenを実行しているとき、現在の値をセットする関数。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Get">
            @if LANG_EN
            <summary>
            The function that gets the current value as we execute the tween.
            </summary>
            @endif
            @if LANG_JA
            <summary>tweenを実行しているとき、現在の値を取得する関数。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.#ctor">
            @if LANG_EN
            <summary>ActionTweenGeneric constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric{`0}.DGet,Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric{`0}.DSet)">
            @if LANG_EN
            <summary>ActionTweenGeneric constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Run">
            @if LANG_EN
            <summary>Kick this action.</summary>
            @endif
            @if LANG_JA
            <summary>アクションをキックします。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Update(System.Single)">
            @if LANG_EN
            <summary>The update function.</summary>
            @endif
            @if LANG_JA
            <summary>Update関数。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.DSet">
            @if LANG_EN
            <summary>
            Target value set function delegate.
            </summary>
            @endif
            @if LANG_JA
            <summary>set関数のデリゲート。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.DGet">
            @if LANG_EN
            <summary>
            Target value get function delegate.
            </summary>
            @endif
            @if LANG_JA
            <summary>get関数のデリゲート。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2">
            @if LANG_EN
            <summary>
            ActionTweenGenericVector2 does a simple element wise blend from start value to target value.
            </summary>
            @endif
            @if LANG_JA
            <summary>ActionTweenGenericVector2 はスタート値からターゲット値に移行する、シンプルなwiseブレンドを行います。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector4">
            @if LANG_EN
            <summary>
            ActionTweenGenericVector4 does a simple element wise blend from start value to target value.
            </summary>
            @endif
            @if LANG_JA
            <summary>ActionTweenGenericVector4 はスタート値からターゲット値に移行する、シンプルなwiseブレンドを行います。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2Scale">
            @if LANG_EN
            <summary>
            ActionTweenGenericVector2Scale is similar to ActionTweenGenericVector2, 
            but acts on scale values (multiplicative).
            </summary>
            @endif
            @if LANG_JA
            <summary>ActionTweenGenericVector2Scale は ActionTweenGenericVector2 に似ていますが、
            スケール値 (乗法) で実行します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2Rotation">
            @if LANG_EN
            <summary>
            ActionTweenGenericVector2Rotation interpolates a unit vector 
            (a unit vector interpreted as a rotation).
            </summary>
            @endif
            @if LANG_JA
            <summary>ActionTweenGenericVector2Rotation は単位ベクトルを補間します。単位ベクトルは回転で補間します。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.MoveBy">
            @if LANG_EN
            <summary>An action that gradually adds an offset to the current position.</summary>
            @endif
            @if LANG_JA
            <summary>オフセットの値を現在の位置に徐々に加算していくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.MoveBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>MoveBy constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.MoveTo">
            @if LANG_EN
            <summary>An action that gradually moves position to the specified target.</summary>
            @endif
            @if LANG_JA
            <summary>指定した目標に徐々に移動するアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.MoveTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>MoveTo constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ScaleBy">
            @if LANG_EN
            <summary>An action that gradually applies an extra scale to the current scale.</summary>
            @endif
            @if LANG_JA
            <summary>現在のスケールに徐々に追加のスケールを追加していくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ScaleBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>ScaleBy constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ScaleTo">
            @if LANG_EN
            <summary>An action that gradually sets the scale to the specified value.</summary>
            @endif
            @if LANG_JA
            <summary>指定した値へスケールを徐々にセットしていくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ScaleTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>ScaleTo constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SkewBy">
            @if LANG_EN
            <summary>An action that gradually adds an offset to the current skew.</summary>
            @endif
            @if LANG_JA
            <summary>現在のスキュー値に徐々にオフセット値を加算していくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SkewBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>SkewBy constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SkewTo">
            @if LANG_EN
            <summary>An action that gradually sets the skew to the specified value.</summary>
            @endif
            @if LANG_JA
            <summary>指定した値へ徐々にスキューをセットしていくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SkewTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>SkewTo constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RotateBy">
            @if LANG_EN
            <summary>An action that gradually adds an offset to the current rotation.</summary>
            @endif
            @if LANG_JA
            <summary>現在の回転値に徐々にオフセット値を加算していくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RotateBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>RotateBy constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RotateTo">
            @if LANG_EN
            <summary>An action that gradually sets the rotation to the specified value.</summary>
            @endif
            @if LANG_JA
            <summary>指定した値へ徐々に回転値をセットしていくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RotateTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            @if LANG_EN
            <summary>RotateTo constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TintBy">
            @if LANG_EN
            <summary>An action that gradually adds an offset to the color.</summary>
            @endif
            @if LANG_JA
            <summary>徐々に色を加算していくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TintBy.#ctor(Sce.PlayStation.Core.Vector4,System.Single)">
            @if LANG_EN
            <summary>TintBy constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TintTo">
            @if LANG_EN
            <summary>An action that gradually sets the color to the specified value.</summary>
            @endif
            @if LANG_JA
            <summary>指定した値に徐々に色をセットしていくアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TintTo.#ctor(Sce.PlayStation.Core.Vector4,System.Single)">
            @if LANG_EN
            <summary>TintTo constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Sequence">
            @if LANG_EN
            <summary>
            An action that runs a sequence of other actions, in order.
            </summary>
            @endif
            @if LANG_JA
            <summary>順番に、他の一連のアクションを実行するためのアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.#ctor">
            @if LANG_EN
            <summary>Sequence constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Add(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            @if LANG_EN
            <summary>Add an action this actions sequence.</summary>
            @endif
            @if LANG_JA
            <summary>引数の action をアクションシーケンスに追加します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Run">
            @if LANG_EN
            <summary>Kick this action.</summary>
            @endif
            @if LANG_JA
            <summary>アクションをキックします。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Stop">
            @if LANG_EN
            <summary>Stop this action.</summary>
            @endif
            @if LANG_JA
            <summary>アクションを停止します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Update(System.Single)">
            @if LANG_EN
            <summary>The update function.</summary>
            @endif
            @if LANG_JA
            <summary>Update 関数。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever">
            @if LANG_EN
            <summary>
            An action that repeats an other action forever.
            </summary>
            @endif
            @if LANG_JA
            <summary>他のアクションを永続的に繰り返すアクション。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.InnerAction">
            @if LANG_EN
            <summary>The action to repeat.</summary>
            @endif
            @if LANG_JA
            <summary>繰り返しのアクション。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Run">
            @if LANG_EN
            <summary>Kick this action.</summary>
            @endif
            @if LANG_JA
            <summary>アクションをキックします。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Stop">
            @if LANG_EN
            <summary>Stop this action.</summary>
            @endif
            @if LANG_JA
            <summary>アクションを停止します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Update(System.Single)">
            @if LANG_EN
            <summary>The update function.</summary>
            @endif
            @if LANG_JA
            <summary>Update 関数。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Repeat">
            @if LANG_EN
            <summary>
            An action that repeats an action a finite number of times.
            </summary>
            @endif
            @if LANG_JA
            <summary>アクションを回数指定で繰り返すアクション。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.InnerAction">
            @if LANG_EN
            <summary>The action to repeat.</summary>
            @endif
            @if LANG_JA
            <summary>繰り返すアクション。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Times">
            @if LANG_EN
            <summary>The number of times we want to repeat.</summary>
            @endif
            @if LANG_JA
            <summary>繰り返す回数。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase,System.Int32)">
            @if LANG_EN
            <summary>
            Repeat constructor.
            </summary>
            <param name="inner_action">The action to repeat.</param>
            <param name="times">The number of times the action must be repeated.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="inner_action">繰り返すアクション。</param>
            <param name="times">繰り返す回数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Run">
            @if LANG_EN
            <summary>Kick this action.</summary>
            @endif
            @if LANG_JA
            <summary>このアクションをキックします。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Stop">
            @if LANG_EN
            <summary>Stop this action.</summary>
            @endif
            @if LANG_JA
            <summary>このアクションを停止します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Update(System.Single)">
            @if LANG_EN
            <summary>The update function.</summary>
            @endif
            @if LANG_JA
            <summary>Update 関数。</summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager">
            @if LANG_EN
            <summary>
            The ActionManager is the singleton object that manages all Node's actions.
            Its main update loop is called inside Director.Update().
            </summary>
            @endif
            @if LANG_JA
            <summary>ActionManager は Node のアクションを管理するシングルトンオブジェクトです。
            メインの Update ループは Director.Update() で呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.AddAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase,Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            @if LANG_EN
            <summary>Add an action to the ActionManager.</summary>
            @endif
            @if LANG_JA
            <summary>ActionManager にアクションを追加します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAllActions">
            @if LANG_EN
            <summary>Remove all actions from the action manager.</summary>
            @endif
            @if LANG_JA
            <summary>全てのアクションを削除します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAllActionsFromTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            @if LANG_EN
            <summary>Remove all actions involving Node 'target'.</summary>
            @endif
            @if LANG_JA
            <summary>引数 'target' のノードを含む、全てのアクションを削除します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            @if LANG_EN
            <summary>Remove a single action.</summary>
            @endif
            @if LANG_JA
            <summary>ひとつのアクションを削除します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveActionByTag(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            @if LANG_EN
            <summary>Find an action from tag and remove it.</summary>
            @endif
            @if LANG_JA
            <summary>引数 tag からアクションを見つけ、削除します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.GetActionByTag(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            @if LANG_EN
            <summary>Get an action by tag.</summary>
            @endif
            @if LANG_JA
            <summary>引数 tag からアクションを取得します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.NumRunningActions(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            @if LANG_EN
            <summary>Count the number of actions involving Node 'target'.</summary>
            @endif
            @if LANG_JA
            <summary>引数'target'のノードを含む、アクションの数をカウントします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.NumRunningActions">
            @if LANG_EN
            <summary>count the total number of actions running.</summary>
            @endif
            @if LANG_JA
            <summary>実行中のアクションの総数をカウントします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.Dump">
            @if LANG_EN
            <summary>Print some debug information, content might vary in the future.</summary>
            @endif
            @if LANG_JA
            <summary>デバッグ情報を出力します。(将来変更される可能性があります)
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.Instance">
            @if LANG_EN
            <summary>The ActionManager singleton.</summary>
            @endif
            @if LANG_JA
            <summary>ActionManager のシングルトン。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags">
            @if LANG_EN
            <summary>
            The flag bits used by Director.Instance.DebugFlags. 
            By default they are all turned off.
            </summary>
            @endif
            @if LANG_JA
            <summary>フラグのビットは Director.Instance.DebugFlags によって使用されます。
            デフォルトでは、全てオフです。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawTransform">
            @if LANG_EN
            <summary>
            Draw each node's transform matrix as a red arrow + green arrow.
            </summary>
            @endif
            @if LANG_JA
            <summary>それぞれのノードの変換行列を赤い矢印+緑の矢印として描画します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawPivot">
            @if LANG_EN
            <summary>
            Show the pivot for all nodes.
            </summary>
            @endif
            @if LANG_JA
            <summary>すべてのノードの中心軸を表示します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawContentLocalBounds">
            @if LANG_EN
            <summary>
            Show the content local bounds of nodes that defined GetlContentLocalBounds.
            Note that the content local bounds is transformed by the parent.
            </summary>
            @endif
            @if LANG_JA
            <summary>GetlContentLocalBounds で定義されるノードの、コンテントローカル境界を表示します。
            コンテントローカル境界は親によって変換されることを注意してください。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawContentWorldBounds">
            @if LANG_EN
            <summary>
            Show the content world bounds of nodes that defined GetlContentLocalBounds.
            </summary>
            @endif
            @if LANG_JA
            <summary>GetlContentLocalBounds で定義されるノードの、コンテントワールド境界を表示します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawGrid">
            @if LANG_EN
            <summary>
            Draw a debug world grid, with axis in black and rulers in grey.
            </summary>
            @endif
            @if LANG_JA
            <summary>軸を黒、ルーラーを灰色で、デバッグワールドグリッドを描画します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.Navigate">
            @if LANG_EN
            <summary>
            Enable debug camera navigation (workd with Camera2D only.)
            </summary>
            @endif
            @if LANG_JA
            <summary>デバッグカメラナビゲーションを使用可にします(カメラ2Dのみ動作します)。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Director">
            @if LANG_EN
            <summary>
            The Director is a singleton (accessed via Director.Instance) that manages the scene stack 
            and calls the update loop of the Scheduler and ActionManager. Its Update/Render/PostSwap 
            functions must be called manually once in the user main loop, if you are managing the main
            loop yourself.
            It also holds a graphics context (GL), a SpriteRenderer object (that is mostly for internal
            used but that you can also use directly), and a DrawHelpers that is mosty used internally 
            when drawing debug information.
            </summary>
            @endif
            @if LANG_JA
            <summary>Director はシーンスタックを管理し、Scheduler と ActionManager の update ループを呼び出すシングルトンです。
            開発者自身が独自にメインループを実装する場合、開発者はUpdate / Render / PostSwap 関数をメインループの中で呼び出さなければなりません。
            また Director は、グラフィックスコンテキスト (GL) 、SpriteRenderer オブジェクト ( 主に内部的に利用されますが、開発者が直接使うこともできます )、 デバッグ情報を描画する DrawHelpers を保持します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.GL">
            @if LANG_EN
            <summary>The graphics context + matrix stack.</summary>
            @endif
            @if LANG_JA
            <summary>グラフィックスコンテキスト + 行列スタック。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.SpriteRenderer">
            @if LANG_EN
            <summary>The main SpriteRenderer object.</summary>
            @endif
            @if LANG_JA
            <summary>メインの SpriteRenderer オブジェクト。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.DrawHelpers">
            @if LANG_EN
            <summary>Some draw helpers for debug draw.</summary>
            @endif
            @if LANG_JA
            <summary>デバッグ描画のための描画ヘルパー。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.DebugFlags">
            @if LANG_EN
            <summary>Some debug flags to enable logging, debug draw, camera navigation etc.</summary>
            @endif
            @if LANG_JA
            <summary>ログ、デバッグ描画、カメラナビゲーションなどを有効にするデバッグフラグ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Initialize(System.UInt32,System.UInt32,Sce.PlayStation.Core.Graphics.GraphicsContext)">
            @if LANG_EN
            <summary>
            Initialize GameEngine2D
            </summary>
            <param name="sprites_capacity">The maximum number of sprites, passed to SpriteRenderer's constructor.</param>
            <param name="draw_helpers_capacity">The maximum number of vertices that we can use in DrawHelpers.</param>
            <param name="context">The core graphics context.</param>
            @endif
            @if LANG_JA
            <summary>GameEngine2D を初期化します。
            </summary>
            <param name="sprites_capacity">SpriteRenderer のコンストラクタに渡されるスプライトの最大数。</param>
            <param name="draw_helpers_capacity">DrawHelpers で使用する頂点の最大数。</param>
            <param name="context">コアグラフィックスコンテキスト。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Terminate">
            @if LANG_EN
            <summary>Terminate GameEngine2D</summary>
            @endif
            @if LANG_JA
            <summary>GameEngine2D の終了処理。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.#ctor(System.UInt32,System.UInt32,Sce.PlayStation.Core.Graphics.GraphicsContext)">
            @if LANG_EN
            <summary>Director constructor.</summary>
            @endif
            @if LANG_JA
            <summary>Director コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Dispose の実装。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.ReplaceScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            @if LANG_EN
            <summary>Replace current scene by an other one.</summary>
            @endif
            @if LANG_JA
            <summary>現在のシーンを他のシーンに置き換えます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PushScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            @if LANG_EN
            <summary>Push a new scene on the scene stack.</summary>
            @endif
            @if LANG_JA
            <summary>新しいシーンをシーンスタックにプッシュします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PopScene">
            @if LANG_EN
            <summary>Pop the top scene on the scene stack (sets previous scene).</summary>
            @endif
            @if LANG_JA
            <summary>シーンスタック (前のシーン) のトップのシーンをポップします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Pause">
            @if LANG_EN
            <summary>Pause everything.</summary>
            @endif
            @if LANG_JA
            <summary>一時停止します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Resume">
            @if LANG_EN
            <summary>Resume everything.</summary>
            @endif
            @if LANG_JA
            <summary>
            </summary>再開します。
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Dump">
            @if LANG_EN
            <summary>Print some debug information, content might vary in the future.</summary>
            @endif
            @if LANG_JA
            <summary>デバッグ情報を出力します(内容は将来変更される場合があります)。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Update">
            @if LANG_EN
            <summary>
            The main stepping function, that you must call once a frame.
            </summary>
            @endif
            @if LANG_JA
            <summary>メインのステップ関数です。1フレームに1度呼び出す必要があります。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Render">
            @if LANG_EN
            <summary>
            The main render function, that you must call once a frame.
            </summary>
            @endif
            @if LANG_JA
            <summary>メインの描画関数です。1フレームに1度呼び出す必要があります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PostSwap">
            @if LANG_EN
            <summary>
            A post swap callback that you must call after SwapBuffers().
            </summary>
            @endif
            @if LANG_JA
            <summary>スワップコールバック関数。SwapBuffers() の後に呼び出す必要があります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.RunWithScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene,System.Boolean)">
            @if LANG_EN
            <summary>
            This function must be called once by user, to tell the system which Scene object it should start with.
            </summary>
            <param name="scene">The scene to run.</param>
            <param name="manual_loop">Is set to true, the main loop won't be started (the user will have to implement it).</param>
            @endif
            @if LANG_JA
            <summary>システムにどの Scene オブジェクトをスタートさせるのか伝えるために、開発者はこの関数を1度呼び出さなければなりません。
            </summary>
            <param name="scene">実行するシーン。</param>
            <param name="manual_loop">trueをセットすると、メインループを開始しません ( 開発者はそれを実装する必要があります)。</param>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.DirectorTime">
            @if LANG_EN
            <summary>A timer that gets incremented everytime Update gets called.</summary>
            @endif
            @if LANG_JA
            <summary>Update が呼ばれるたびにインクリメントされるタイマー。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.Instance">
            @if LANG_EN
            <summary>The director singleton.</summary>
            @endif
            @if LANG_JA
            <summary>Director のシングルトン。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.CurrentScene">
            @if LANG_EN
            <summary>Get the currently running Scene object.</summary>
            @endif
            @if LANG_JA
            <summary>現在実行している Scene オブジェクトを取得します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Label">
            @if LANG_EN
            <summary>
            Draw text primitive. 2 types of font data supported:
            - One using SpriteRenderer's embedded debug font
            - The other using a FontMap object
            </summary>
            @endif
            @if LANG_JA
            <summary>テキストのプリミティブを描画します。2つのタイプのフォントデータをサポートしています: 
            - SpriteRenderer に埋め込まれたデバッグフォント。
            - FontMap オブジェクトを使ったもの。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node">
            @if LANG_EN
            <summary>
            Node is the base class for all scenegraph nodes. It holds a standard 2D transform, 
            a list of children and a handle to its parent (a node can have at most 1 parent).
            </summary>
            @endif
            @if LANG_JA
            <summary>ノードは全てのシーングラフノードの基底クラスです。標準的な2D変換行列、子のリスト、親へのハンドラを持ちます。ノードは多くとも1つの親をもつことができます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotate(System.Single)">
            @if LANG_EN
            <summary>
            Rotate the object by an angle 'angle'.
            Note that this function simply affects the the Rotation/Angle property (it simply "increments" the angle, regardless of Pivot and Position; and all those are combined in GetTransform().)
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            引数 'angle' でオブジェクトを回転します。
            この関数は単に Rotation / Angle プロパティに影響を与えることに注意してください。( Pivot や Positionに関わらず、角度をインクリメントします。それらのすべては GetTransform() で結合されます。)
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotate(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Rotate the object by an angle, the angle is given as a unit vector 'rotation'
            This lets you precompute the cos,sin needed during rotation.
            Note that this function simply affects the the Rotation/Angle property (it simply "increments" the angle, regardless of Pivot and Position; and all those are combined in GetTransform().)
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
            @endif
            @if LANG_JA
            <summary>単位ベクトル 'rotation' として渡される角度でオブジェクトを回転します。
            これで、回転中に必要な cos,sinを事前に計算できます。
            この関数は Rotation/Angle プロパティに影響を与えることに注意してください。( Pivot や Positionに関わらず、角度をインクリメントします。それらのすべては GetTransform() で結合されます。)
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.VertexZ">
            @if LANG_EN
            <summary>
            VertexZ is the value set as the z coordinate during drawing. Note that by default ortho view only
            shows the [-1,1] Z range, just set Camera.Znear and Camera.Zfar if you want more.
            </summary>
            @endif
            @if LANG_JA
            <summary>VectorZ は描画中、Z座標としての値のセットです。デフォルトでは、ortho ビューは Z範囲[-1, 1]を示し、任意で Camera.Znear と Camera.Zfar をセットします。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Visible">
            @if LANG_EN
            <summary>If Visible is false, this node and its children are not drawn.</summary>
            @endif
            @if LANG_JA
            <summary>Visible が false の場合、このノードとその子は描画されません。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera">
            @if LANG_EN
            <summary>
            You can use Node.Camera as a workaround to the fact there is normally only one camera in the scene.
            If Node.Camera is set, all transforms up to this node are ignored, and Node.Camera is push/pop
            everytime we draw this node.
            </summary>
            @endif
            @if LANG_JA
            <summary>シーン内には通常ひとつのカメラしか配置されていないことの対応策として、 Node.Camera を使うことができます。
            Node.Camera が設定されている場合、このノードまでの全ての変換行列は無視され、Node.Camera は、このノードを描画するたびに、プッシュ/ポップされます。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Name">
            @if LANG_EN
            <summary>Identifier for user.</summary>
            @endif
            @if LANG_JA
            <summary>開発者用の識別子。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.#ctor">
            @if LANG_EN
            <summary>Node constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PushTransform">
            @if LANG_EN
            <summary>
            This is called before drawing the node and its children.
            </summary>
            @endif
            @if LANG_JA
            <summary>ノードとその子を描画する前にこの関数が呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PopTransform">
            @if LANG_EN
            <summary>
            This is called after drawing the node and its children.
            </summary>
            @endif
            @if LANG_JA
            <summary>ノードとその子が描画されたあとにこの関数が呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnEnter">
            @if LANG_EN
            <summary>
            This function gets called when the scene is started by the Director.Instance.
            </summary>
            @endif
            @if LANG_JA
            <summary>シーンが Director.Instance によって開始されたとき、この関数が呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnExit">
            @if LANG_EN
            <summary>
            This function gets called when we exit the Scene or when a child is explicitely removed 
            with RemoveChild() or RemoveAllChildren().
            </summary>
            @endif
            @if LANG_JA
            <summary>シーンを終了したり、子が RemoveChild() や RemoveAllChildren() で明示的に削除されたとき、この関数が呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RegisterDisposeOnExitRecursive">
            @if LANG_EN
            <summary>
            Recurse through all the subtree (including this node)
            and register Dispose() functions for all the disposable
            objects. Cleanup is called first to make sure we
            don't Dispose() of running objects.
            </summary>
            @endif
            @if LANG_JA
            <summary>すべてのサブツリー(このノードを含む)を再帰し、すべての破棄可能なオブジェクトに Dispose() 関数を登録します。
            実行しているオブジェクトが Dispose() してないことを最初に確認し、Cleanupを呼び出します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RegisterDisposeOnExit(System.IDisposable)">
            @if LANG_EN
            <summary>
            Register a call to Dispose() in the OnExit() function of this node.
            For example, when you want to Dispose() of several objects (TextureInfo,
            FontMap, etc) when you exit a Scene node.
            </summary>
            @endif
            @if LANG_JA
            <summary>このノードの OnExit()関数内に、Dispose() の呼び出しを登録します。
            例えば、いくつかのオブジェクト(TextureInfo, FontMap, など)で Dispose() を行いたいときや、 Scene ノードを終了するときです。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.insert_child(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            	<summary>
            	</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.AddChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            @if LANG_EN
            <summary>
            Add a child with draw priority. 
            </summary>
            <param name="child">The child to add.</param>
            <param name="order">The added node's draw priority. Draw order follows order numerical order, 
            negative priorities mean this child node will be drawn before its parent, and children 
            with positive priorities get drawn after their parent.</param>
            @endif
            @if LANG_JA
            <summary>子に描画プロパティを追加します。
            </summary>
            <param name="child">追加する子ノード。</param>
            <param name="order">追加するノードの描画プロパティ。描画順序は数値順に行われます。
            負の数のプロパティはこの子が親より前に描画されることを意味します。
            正の数のプロパティは親より後に描画されます。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.AddChild(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            @if LANG_EN
            <summary>
            Add a child to this node, using its current order.
            </summary>
            @endif
            @if LANG_JA
            <summary>現在の順序を使って、このノードに子を追加します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RemoveChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Boolean)">
            @if LANG_EN
            <summary>
            Remove a child from this node.
            </summary>
            <param name="child">The child to remove.</param>
            <param name="do_cleanup">Do we call Cleanup for the removed node.</param>
            @endif
            @if LANG_JA
            <summary>このノードから子を削除します。
            </summary>
            <param name="child">削除する子。</param>
            <param name="do_cleanup">削除するノードで Cleanup を呼び出す。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RemoveAllChildren(System.Boolean)">
            @if LANG_EN
            <summary>
            This is equivalent to calling RemoveChild( dispose_flags ) for all children.
            </summary>
            @endif
            @if LANG_JA
            <summary>この関数は、全ての子に対して、RemoveChild( dispose_flags )を呼び出すのと、等価です。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ReorderChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            @if LANG_EN
            <summary>
            Change order of a child within the Children list.
            </summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内での、子の描画順序を変更します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Reorder(System.Int32)">
            @if LANG_EN
            <summary>
            Change the draw order value for this node (see AddChild for details about the draw order).
            </summary>
            @endif
            @if LANG_JA
            <summary>このノードの描画順序の値を変更します。描画順序の詳細は AddChild を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Traverse(Sce.PlayStation.HighLevel.GameEngine2D.Node.DVisitor,System.Int32)">
            @if LANG_EN
            <summary>
            Call the 'visitor' function for this node and all its children, recursively.
            Interrupt traversing if visitor returns false.
            </summary>
            @endif
            @if LANG_JA
            <summary>このノードの引数 'visitor'関数を呼び出し、かつこのノードの全ての子を再帰的に呼び出します。
            visitor が false を返した場合、巡回を中断します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DrawHierarchy">
            @if LANG_EN
            <summary>
            This called by Director only, but PushTransform, Draw,
            and PopTransform can be overriden.
            </summary>
            @endif
            @if LANG_JA
            <summary>この関数は、 Director によってのみ呼び出されます。しかし、PushTransform, Draw, PopTransform は上書きすることができます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Draw">
            @if LANG_EN
            <summary>
            Renders what's *inside* the PushTransform / PopTransform.
            </summary>
            @endif
            @if LANG_JA
            <summary>PushTransform / PopTransform 内の描画を実行します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Update(System.Single)">
            @if LANG_EN
            <summary>
            The update function.
            The Director decides how many times a frame this function should be called, and with which delta time. 
            At the moment, Update functions are called once using the frame delta time as it is.
            </summary>
            <param name="dt">Delta time in seconds.</param>
            @endif
            @if LANG_JA
            <summary>Update 関数。 Director は1フレームあたりと経過時間あたりで、この関数を何度呼び出すか決定します。
            現時点では、Update 関数は、フレーム経過時間をそのまま使って、一度呼び出されています。
            </summary>
            <param name="dt">1秒あたりの経過時間。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawContentLocalBounds">
            @if LANG_EN
            <summary>
            Draw bounds of local content and pivot, in Node local space.
            Normally you don't have to override this function, you just 
            override GetlContentLocalBounds() and this function shows it
            when DebugFlags.DrawContentLocalBounds is set for example. 
            </summary>
            @endif
            @if LANG_JA
            <summary>ノードのローカル空間内に、ローカルコンテントの境界と中心軸を描画します。
            普通は、この関数を上書きする必要はありません。
            GetlContentLocalBounds()を上書きし、例えば DebugFlags.DrawContentLocalBounds が設定されたとき、この関数はそれを表示します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawTransformScale">
            @if LANG_EN
            <summary>
            A scale factor used by DebugDrawTransform to draw arrows.
            By default this is 1.0f, which means that unit length arrows are of length 1 on screen. 
            he game world showed on screen is too big, arrows of length one might be less then 1 pixel,
            and you won't be able to see them even through they are being drawn. In that case you can 
            scale them with DebugDrawTransform.
            </summary>
            @endif
            @if LANG_JA
            <summary>矢印を描画する DebugDrawTransform によって使用されるスケール係数。
            デフォルトではこの値は1.0fで、矢印の単位の長さは、スクリーン上で長さ1にあたります。
            スクリーン上で表示されるゲームの世界では大きすぎるので、長さ1の矢印は、1ピクセル以下であるかもしれず、それらが描画されていても見ることができないかもしれません。
            その場合、DebugDrawTransform でそれらをスケールすることができます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawTransform">
            @if LANG_EN
            <summary>
            Draw the local coordinate system, as arrows, in Parent Node's local space.
            </summary>
            @endif
            @if LANG_JA
            <summary>親ノードのローカル空間内での、ローカル座標系を描画します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RunAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            @if LANG_EN
            <summary>Start an action on this node.</summary>
            @endif
            @if LANG_JA
            <summary>このノードのアクションを開始します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopAllActions">
            @if LANG_EN
            <summary>Stop all actions on this node.</summary>
            @endif
            @if LANG_JA
            <summary>このノードの全てのアクションを停止します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            @if LANG_EN
            <summary>Stop an action on this node.</summary>
            @endif
            @if LANG_JA
            <summary>このノードのアクションを停止します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopActionByTag(System.Int32)">
            @if LANG_EN
            <summary>Search for the first action acting on this node with tag value 'tag' and stop/remove it.</summary>
            @endif
            @if LANG_JA
            <summary>tag の値で、このノード内で実行している最初のアクションを検索し、停止/削除します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetActionByTag(System.Int32,System.Int32)">
            @if LANG_EN
            <summary>Return the 'ith' action with tag 'tag' acting on this node.</summary>
            @endif
            @if LANG_JA
            <summary>このノード内で、実行している 'tag' の 'ith' アクションを返します。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.NumRunningActions">
            @if LANG_EN
            <summary>Get the number of action acting on this node.</summary>
            @endif
            @if LANG_JA
            <summary>このノード内で、実行しているアクションの数を取得します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Cleanup">
            @if LANG_EN
            <summary>Recursively stop all actions and scheduled functions on this node.</summary>
            @endif
            @if LANG_JA
            <summary>このノード内の、全てのアクションとスケジュールされた関数を再帰的に停止します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ScheduleUpdate(System.Int32)">
            @if LANG_EN
            <summary>Register this node's update function to the scheduler, it will get called everyframe.</summary>
            @endif
            @if LANG_JA
            <summary>スケジューラにこのノードのUpdate関数を登録します。update関数は全てのフレームで呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.UnscheduleUpdate">
            @if LANG_EN
            <summary>Remove the update function from the scheduler.</summary>
            @endif
            @if LANG_JA
            <summary>スケジューラからUpdate関数を削除します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Schedule(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Int32)">
            @if LANG_EN
            <summary>Schedule node function 'func', it will get called everyframe.</summary>
            @endif
            @if LANG_JA
            <summary>引数のノード関数 'func' をスケジュールします。関数は全てのフレームで呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ScheduleInterval(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Single,System.Int32)">
            @if LANG_EN
            <summary>Schedule node function 'func' so it gets called every 'interval' seconds.</summary>
            @endif
            @if LANG_JA
            <summary>引数のノード関数 'func' を、引数 'interval'の間隔で呼び出されるようにスケジュールします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Unschedule(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc)">
            @if LANG_EN
            <summary>Unschedule node function 'func'.</summary>
            @endif
            @if LANG_JA
            <summary>引数のノード関数 'func'をアンスケジュールします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.UnscheduleAll">
            @if LANG_EN
            <summary>Unschedule all functions related to this node.</summary>
            @endif
            @if LANG_JA
            <summary>このノードに関連する全ての関数をアンスケジュールします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ResumeSchedulerAndActions">
            @if LANG_EN
            <summary>Sets SchedulerPaused and ActionsPaused to true.</summary>
            @endif
            @if LANG_JA
            <summary>SchedulerPaused と ActionsPaused に true をセットします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PauseSchedulerAndActions">
            @if LANG_EN
            <summary>Sets SchedulerPaused and ActionsPaused to false.</summary>
            @endif
            @if LANG_JA
            <summary>SchedulerPaused と ActionsPaused に false をセットします、。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTransform">
            @if LANG_EN
            <summary>
            Return the transform matrix of this node, expressed in its parent space.
            
            The node transform matrix is formed using the data accessed with the Position, Scale, Skew,
            Rotation/Angle/RotationNormalize, Pivot properties. The transform matrix is equivalent to:
            
            	  Matrix3.Translation( Position )
            	* Matrix3.Translation( Pivot )
            	* Matrix3.Rotation( Rotation )
            	* Matrix3.Scale( Scale )
            	* Matrix3.Skew( Skew )
            	* Matrix3.Translation( -Pivot )
            
            Node that the transform matrix returned is a pure 2D transform. 
            VertexZ is applied separately in the PushTransform function.
            </summary>
            @endif
            @if LANG_JA
            <summary>親空間で表現される、このノードの変換行列を返します。
            
            ノードの変換行列は、位置、スケール、歪み、回転/角度/ RotationNormalize、ピボットプロパティでアクセスされるデータを用いて形成されます。変換行列は次のものと等価です:
            
            	  Matrix3.Translation( Position )
            	* Matrix3.Translation( Pivot )
            	* Matrix3.Rotation( Rotation )
            	* Matrix3.Scale( Scale )
            	* Matrix3.Skew( Skew )
            	* Matrix3.Translation( -Pivot )
            
            変換行列で返されるのは、純粋な2D変換であることに注意してください。
            VertexZ は PushTransform 関数で別々に適用されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTransformInverse">
            @if LANG_EN
            <summary>
            Get the inverse of this node 's transform matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>このノードの変換行列の逆行列を取得します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetWorldTransform">
            @if LANG_EN
            <summary>
            Return the transform matrix of this node, expressed in its world/parent Scene space.
            </summary>
            @endif
            @if LANG_JA
            <summary>ワールド/親 シーン空間で表される、このノードの変換行列を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.CalcWorldTransformInverse">
            @if LANG_EN
            <summary>
            Get the inverse of this node's world transform matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>このノードのワールド変換行列の逆行列を取得します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.LocalToWorld(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            LocalToWorld Should return the same as ( GetWorldTransform() * local_point.Xy1 ).Xy.
            </summary>
            @endif
            @if LANG_JA
            <summary>LocalToWorld は ( GetWorldTransform() * local_point.Xy1 ).Xy と同じものを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.WorldToLocal(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Should return the same as ( CalcWorldTransformInverse() * world_point.Xy1 ).Xy.
            The local space of the node is the space in which its geometry is defined, 
            i.e one level below GetWorldTransform().
            </summary>
            @endif
            @if LANG_JA
            <summary>( CalcWorldTransformInverse() * world_point.Xy1 ).Xy と同じものを返します。
            ノードのローカル空間はその幾何情報を定義した空間です。
            すなわち、1レベル下の GetWorldTransform() 。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            @if LANG_EN
            <summary>
            Get the bounds for the content/geometry of this node (only), in node space (no recursion).
            Nodes that don't have any content just return false.
            </summary>
            @endif
            @if LANG_JA
            <summary>ノード空間内(再帰なし)で、このノードのみのコンテント/幾何情報の境界を取得します。
            任意のコンテントを持たないノードは単に false を返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetContentWorldBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            @if LANG_EN
            <summary>
            Get the bounds for the content of this node (only), in world space (no recursion).
            Nodes that don't have any content just return false and don't touch bounds.
            </summary>
            @endif
            @if LANG_JA
            <summary>ワールド空間(再帰なし)で、このノードのみのコンテントの境界を取得します。
            任意のコンテントを持たないノードは単に false を返します。その場合、境界は扱えません。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.IsWorldPointInsideContentLocalBounds(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Return true if 'world_position' is inside the content oriented bounding box.
            </summary>
            @endif
            @if LANG_JA
            <summary>引数'world_position'が、向きをもったコンテントの境界ボックス内にある場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.FindParentPlane(Sce.PlayStation.Core.Matrix4@)">
            @if LANG_EN
            <summary>
            Follow parent hierarchy until we find a Plane3D node,
            and set 'mat' to the Plane3D's plane matrix.
            </summary>
            @endif
            @if LANG_JA
            <summary>Plane3D ノードが見つかるまで、親の階層構造に従い、
            Plane3D の平面行列に 'mat' をセットします。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Like Director.Instance.CurrentScene.Camera.NormalizedToWorld, but deals with
            the case when there is a Plane3D among ancestors in the scenegraph.
            </summary>
            @endif
            @if LANG_JA
            <summary>Director.Instance.CurrentScene.Camera.NormalizedToWorld に似ていますが、シーングラフ内の祖先に Plane3D が存在したときのケースを扱います。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTouchPos(System.Int32,System.Boolean)">
            @if LANG_EN
            <summary>
            Like Director.Instance.CurrentScene.Camera.GetTouchPos, but deals with
            the case when there is a Plane3D among ancestors in the scenegraph.
            </summary>
            @endif
            @if LANG_JA
            <summary>Like Director.Instance.CurrentScene.Camera.GetTouchPos に似ていますが、シーングラフ内の祖先に Plane3D が存在したときのケースを扱います。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Position">
            @if LANG_EN
            <summary>See GetTransform() for details about how the transform matrix is constructed.</summary>
            @endif
            @if LANG_JA
            <summary>変換行列の構築に関しての詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotation">
            @if LANG_EN
            <summary>
            Rotation is directly stored as a (cos,sin) unit vector. 
            This the code to be potentially cos,sin calls free, and as a side
            effect we get the direction vector for free, and also avoid all the usual angle wrapping problems.
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
            @endif
            @if LANG_JA
            <summary>Rotation は (cos,sin)の単位ベクトルとして直接格納されます。
            
            変換行列の構築に関しての詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.RotationNormalize">
            @if LANG_EN
            <summary>
            RotationNormalize is like Rotation, but it normalizes on set,
            to prevent the unit vector from drifting because of accumulated numerical imprecision.
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
            @endif
            @if LANG_JA
            <summary>RotationNormalize は Rotation に似ていますが、正規化を行います。
            これにより、蓄積される計算誤差で単位ベクトルがドリフトするのを防ぎます。
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Angle">
            @if LANG_EN
            <summary>
            This property lets you set/get rotation as a angle. This is expensive and brings the usual
            angle discontinuity problems. The angle is always stored and returned in the the range -pi,pi.
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
            @endif
            @if LANG_JA
            <summary>このプロパティを使うと、回転を角度として set/getすることができます。
            この処理は重く、角度の不連続の問題を引き起こします。角度は常に格納され、かつ -pi,piの範囲で値を返します。
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Scale">
            @if LANG_EN
            <summary>
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Skew">
            @if LANG_EN
            <summary>
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Pivot">
            @if LANG_EN
            <summary>
            Pivot is the pivot used for scale and rotation, and is expressed in this Node's local 'normalized' space.
            Which means that (0.5,0.5) is always the center of the object, regardless of the Scale for example.
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
            @endif
            @if LANG_JA
            <summary>
            Pivot はスケールや回転に使用される中心軸です。そして Node のローカル '正規化' 空間として表現されます。
            例えば、スケールに関わりなく、(0.5, 0.5)は常にオブジェクトの中心です。
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Parent">
            @if LANG_EN
            <summary>The parent node in the scenegraph. A node can only be the child of at most one parent node.</summary>
            @endif
            @if LANG_JA
            <summary>シーングラフ内の親ノードです。ひとつのノードは、多くともひとつの親ノードの子になります。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Children">
            @if LANG_EN
            <summary>The list of children nodes.</summary>
            @endif
            @if LANG_JA
            <summary>子ノードのリスト。
            </summary>
            @endif
        </member>
        <member name="E:Sce.PlayStation.HighLevel.GameEngine2D.Node.AdHocDraw">
            @if LANG_EN
            <summary>
            If set, AdHocDraw gets called in the base Draw function. This is used mostly so we can setup simple scenes 
            without always having to derive just so we can define a Draw function.
            </summary>
            @endif
            @if LANG_JA
            <summary>セットされた場合、baseの描画関数内でAdHocDrawが呼び出されます。
            描画関数の定義のためにクラスを派生させずに、シンプルなシーンをセットアップするために使用されます。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera2D">
            @if LANG_EN
            <summary>Shortcut to get the camera as a Camera2D.</summary>
            @endif
            @if LANG_JA
            <summary>Camera2D としてのカメラを取得するためのショートカット。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera3D">
            @if LANG_EN
            <summary>Shortcut to get the camera as a Camera3D.</summary>
            @endif
            @if LANG_JA
            <summary>Camera3D としてのカメラを取得するためのショートカット。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.IsRunning">
            @if LANG_EN
            <summary>This property is true when this node is between its OnEnter()/OnExit() calls.</summary>
            @endif
            @if LANG_JA
            <summary>このノードが OnEnter()/OnExit() 呼び出しの合間である時、このプロパティは true になります。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Order">
            @if LANG_EN
            <summary>The draw order value that was set in ReorderChild() or AddChild().</summary>
            @endif
            @if LANG_JA
            <summary>ReorderChild() または AddChild() でセットされた描画順序の値。
            </summary>
            @endif
        </member>
        <member name="E:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnExitEvents">
            @if LANG_EN
            <summary>
            List of events to perform when OnExit gets called.
            The list gets cleared after it is executed.
            </summary>
            @endif
            @if LANG_JA
            <summary>OnExit が呼び出された時、実行するイベントのリスト。
            実行されたあと、リストはクリアされます。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.ActionsPaused">
            @if LANG_EN
            <summary>All actions related to this node can be paused on and off with this flag.</summary>
            @endif
            @if LANG_JA
            <summary>このノードに関連する全てのアクションを、このフラグのon/offで一時停止させることができます。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.SchedulerPaused">
            @if LANG_EN
            <summary>All scheduled functions related to this node can be paused on and off with this flag.</summary>
            @endif
            @if LANG_JA
            <summary>このノードに関連するスケジュールされた全ての関数を、このフラグのon/offで一時停止させることができます。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DDraw">
            @if LANG_EN
            <summary>
            The delegate type used by AdHocDraw property.
            </summary>
            @endif
            @if LANG_JA
            <summary>AdHocDraw で使用されるデリゲート型。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DOnExitEvent">
            @if LANG_EN
            <summary>Delegate for OnExit() events.</summary>
            @endif
            @if LANG_JA
            <summary>OnExit() イベントのデリゲート。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DVisitor">
            @if LANG_EN
            <summary>
            Function type to pass to the .Traverse method.
            </summary>
            @endif
            @if LANG_JA
            <summary>巡回メソッドに渡す関数の型。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Text">
            @if LANG_EN
            <summary>The text to display.</summary>
            @endif
            @if LANG_JA
            <summary>表示するテキスト。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Color">
            @if LANG_EN
            <summary>The text color.</summary>
            @endif
            @if LANG_JA
            <summary>テキストの色。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.BlendMode">
            @if LANG_EN
            <summary>The text blend mode.</summary>
            @endif
            @if LANG_JA
            <summary>テキストのブレンドモード。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.HeightScale">
            @if LANG_EN
            <summary>A scale factor applied to the character's pixel height during rendering.</summary>
            @endif
            @if LANG_JA
            <summary>描画中、文字のピクセル単位の高さに適用されるスケール係数。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.FontMap">
            @if LANG_EN
            <summary>The fontmap used to display this Label (the character set has to match).</summary>
            @endif
            @if LANG_JA
            <summary>この Label を表示するのに使用されるフォントマップ(文字のセットに一致する必要があります)。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Shader">
            @if LANG_EN
            <summary>
            User can set an external shader. 
            The Label class won't dispose of shaders set by user.
            </summary>
            @endif
            @if LANG_JA
            <summary>開発者は、任意のシェーダーをセットすることができます。
            Label クラスは開発者がセットしたシェーダーを 破棄しないので注意してください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.#ctor">
            @if LANG_EN
            <summary>Label constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.HighLevel.GameEngine2D.Label.#ctor(System.String,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap)" -->
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.Draw">
            @if LANG_EN
            <summary>The draw function.</summary>
            @endif
            @if LANG_JA
            <summary>描画関数。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            @if LANG_EN
            <summary>Return the Bounds2 object containing the text, in local space.</summary>
            @endif
            @if LANG_JA
            <summary>ローカル空間での、テキストを囲む Bounds2 オブジェクトを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.GetlContentLocalBounds">
            @if LANG_EN
            <summary>Return the Bounds2 object containing the text, in local space.</summary>
            @endif
            @if LANG_JA
            <summary>ローカル空間での、テキストを囲む Bounds2 オブジェクトを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Label.FontHeight">
            @if LANG_EN
            <summary>The font character height in pixels.</summary>
            @endif
            @if LANG_JA
            <summary>
            </summary>ピクセル単位でのフォントの文字の高さ。
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Label.CharWorldHeight">
            @if LANG_EN
            <summary>The character height in world coordinates = FontHeight * HeightScale.</summary>
            @endif
            @if LANG_JA
            <summary>ワールド座標系 = FontHeight * HeightScale での文字の高さ。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D">
            @if LANG_EN
            <summary>
            The Plane3D node allows 3d orientations in the scenegraph, to some extent.
            That somewhat complicates the way we deal with touch coordinates, so if you have a
            Plane3D in your scene hierarchy, make sure you use Node.GetTouchPos() to get points
            in the Plane3D space (were all subnodes are), instead of using directly
            Director.Instance.CurrentScene.Camera.GetTouchPos().
            </summary>
            @endif
            @if LANG_JA
            <summary>Plane3D ノードは、シーングラフ内で、ある程度まで3Dの方向性を許可します。
            それは、タッチ座標を扱う方法をいくぶんか複雑にします。なのでシーン階層に Plane3D を含んでいる場合、直接 Director.Instance.CurrentScene.Camera.GetTouchPos() を使う代わりに、Plane3D 空間(すべてサブノード)で点を得るのに Node.GetTouchPos() を使うことを確認してください。
            </summary>
            @endif
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.ModelMatrix" -->
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.#ctor">
            @if LANG_EN
            <summary>
            Plane3D constructor.
            Defaults to z=0 plane (identity).
            Please refer to ModelMatrix's comment for more details.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。デフォルトはz=0 平面(単位行列)。
            詳細は  ModelMatrix のコメントを参照してください。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.#ctor(Sce.PlayStation.Core.Matrix4)">
            @if LANG_EN
            <summary>Plane3D constructor.</summary>
            <param name="modelmatrix">The value to set ModelMatrix to. 
            Please refer to ModelMatrix's comment for more details.
            </param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="modelmatrix">平面にセットする ModelMatrix の値。
            詳細は ModelMatrix のコメントを参照してください。
            </param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.FindParentPlane(Sce.PlayStation.Core.Matrix4@)">
            @if LANG_EN
            <summary>
            Note: FindParentPlane stops at the first encounterd Plane3D.
            We assume we can't have several Plane3D nodes along a tree branch.
            </summary>
            @endif
            @if LANG_JA
            <summary>注意: FindParentPlane は最初に見つかった Plane3D で停止します。
            ツリーの枝で、複数の Plane3D ノードを持っていないという前提です。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Scene">
            @if LANG_EN
            <summary>Scene is the type of a root node in the scene graph. You can use the 
            Director singleton to manipulate the scene stack, can the current scene can be 
            accessed with Director.Instance.CurrentScene. Only one scene is active at a time, except 
            during scene transition when 2 scenes might be active at the same time to 
            allow blending.
            
            Scene also holds the main Camera.
            </summary>
            @endif
            @if LANG_JA
            <summary>Scene クラスはシーングラフのルートノードタイプです。
            シーンスタックを操作するため Director シングルトンを使い、現在のシーンは Director.Instance.CurrentScene でアクセスします。
            2つのシーンが画面遷移のためブレンディングされるときを除き、アクティブになるシーンはひとつだけです。
            
            また、シーンはメインカメラを保持しています。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.NoClear">
            @if LANG_EN
            <summary>
            Normally, the scene clears the screen in its internal render function.
            You can suppress this automatic clear by setting NoClear to true.
            Note that if you disable the automatic scene clear, some TransitionScene effects won't work properly
            (since some scene transitions need to render the 2 transitioned scenes offscreen to blend them).
            </summary>
            @endif
            @if LANG_JA
            <summary>通常、シーンは内部的な描画関数内でスクリーンをクリアします。
            開発者はこの NoClear を trueに設定することで、自動クリアを抑制することができます。
            自動クリアを無効にした場合、いくつかの TransitionScene の効果が正常に動作しないことに注意してください。
            ( いくつかの画面遷移は、2つの遷移するシーンを、ブレンドのためオフスクリーンで描画する必要があるためです。)
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.DrawGridStep">
            @if LANG_EN
            <summary>
            Cell size of the debug grid drawn when DebugFlags.DrawGrid is set in Director.Instance.DebugFlags.
            When the value is -1.0f (the default) the debug grid cell size is automatically ajusted to never 
            show more than DrawGridAutoStepMaxCells subdivisions along the longest axis viewed.
            </summary>
            @endif
            @if LANG_JA
            <summary>DebugFlags.DrawGrid が Director.Instance.DebugFlags に設定されているときに描画される、デバッググリッドのセルサイズ。
            値が -1.0f（デフォルト）である場合、デバッググリッドセルのサイズが、 DrawGridAutoStepMaxCells での分割数以上を表示しないよう、自動的に調整されます。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.DrawGridAutoStepMaxCells">
            @if LANG_EN
            <summary>
            When DrawGridStep is set to -1, the debug grid cell size is calculated automatically.
            The cell size increases in powers of 2 as you zoom out, in a way there are never more 
            than DrawGridAutoStepMaxCells subdivisions along the longest axis viewed. 
            Warning: increasing this value too much might cause too many lines to be drawn, and 
            overflow the vertex array used in DrawHelpers'immediate mode. 
            The debug grid stops being drawn if the automatically calculated step size is bigger than 2^15.
            </summary>
            @endif
            @if LANG_JA
            <summary>DrawGridStepが-1に設定されている場合、デバッググリッドのセルサイズは自動的に計算されます。
            ズームアウトすると、DrawGridAutoStepMaxCellsの分割よりも多くならないように、2のべき乗でセルサイズが増加します。
            
            警告：あまりにも多くこの値を増やすと、非常に多くの線が描画されることにつながり、 DrawHelpers のイミーディエイトモードで使用する頂点配列をオーバーフローしてしまう可能性があります。
            自動的に計算されたステップサイズが 2 ^ 15より大きくなった場合、デバッググリッドの描画を停止します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.#ctor">
            @if LANG_EN
            <summary>
            Scene constructor.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.OnEnter">
            @if LANG_EN
            <summary>
            This function gets called when the scene is started by the Director.
            </summary>
            @endif
            @if LANG_JA
            <summary>シーンが Director によって開始された時、この関数が呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.OnExit">
            @if LANG_EN
            <summary>
            Scene's OnExit calls Cleanup() by default. 
            </summary>
            @endif
            @if LANG_JA
            <summary>シーンの OnExit はデフォルトで Cleanup() 呼び出します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.IsTransitionScene">
            @if LANG_EN
            <summary>
            Return true if the scene is of TransitionScene type.
            </summary>
            @endif
            @if LANG_JA
            <summary>シーンが TransitionScene タイプである場合、trueを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.draw_content_world_bounds">
            Render all nodes's content bounding boxes in world space. This is mostly
            to debug GetContentWorldBounds. Note that this  function ignores Plane3D 
            at the moment, so if your scene has any Plane3D, the debug primitive 
            drawn will look confusing.
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Scene.SceneTime">
            @if LANG_EN
            <summary>
            The total time elapse since the scene started, in seconds.
            </summary>
            @endif
            @if LANG_JA
            <summary>シーンの開始時から経過した時間の総計。秒単位。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc">
            @if LANG_EN
            <summary>
            The delegate type for functions added to the Scheduler has to match Node.Update's signature.
            We can't use anonymous functions because we want to be able to find and delete.
            </summary>
            @endif
            @if LANG_JA
            <summary>デリゲート型の関数です。Scheduler は Node.Updateのシグニチャに一致するように追加してください。
            関数名の検索と削除を行うため、匿名の関数は使用できません。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler">
            @if LANG_EN
            <summary>
            The Scheduler is the singleton that manages Node related update functions registered by the user.
            Scheduled functions can be called everyframe, or at user special intervals in seconds.
            The Scheduler update loop is called inside Director.Update().
            </summary>
            @endif
            @if LANG_JA
            <summary>Scheduler は、開発者が登録する update 関数に関連した Node を管理するシングルトンです。
            スケジュールされた関数は毎フレーム呼び出されます。または、開発者は特別な間隔で呼び出すこともできます。
            Scheduler の update ループは Director.Update() の内部で呼び出されます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Schedule(Sce.PlayStation.HighLevel.GameEngine2D.Node,Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Single,System.Boolean,System.Int32)">
            @if LANG_EN
            <summary>
            Register a Node function in the scheduler.
            </summary>
            <param name="target">The target node for the scheduled function.</param>
            <param name="func">The scheduled function.</param>
            <param name="interval">Period at which the function should be called (in seconds). Zero means "everyframe".</param>
            <param name="paused">Set the scheduler paused state for that node.</param>
            @endif
            @if LANG_JA
            <summary>スケジューラに Node 関数を登録します。
            </summary>
            <param name="target">スケジュール関数を登録する対象ノード。</param>
            <param name="func">スケジュール関数。</param>
            <param name="interval">関数が呼び出される期間 (秒単位)。0なら毎フレーム呼び出されます。</param>
            <param name="paused">スケジューラを一時停止します。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Unschedule(Sce.PlayStation.HighLevel.GameEngine2D.Node,Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc)">
            @if LANG_EN
            <summary>
            Remove a function from the scheduler.
            </summary>
            <param name="target">The target node for the removed function.</param>
            <param name="func">The function to remove.</param>
            @endif
            @if LANG_JA
            <summary>スケジューラから関数を削除します。
            </summary>
            <param name="target">削除する関数をもった対象ノード。</param>
            <param name="func">削除する関数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleAll(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            @if LANG_EN
            <summary>
            Remove all functions related to a given node from the scheduler.
            </summary>
            @endif
            @if LANG_JA
            <summary>スケジューラから指定されたノードに関連する全ての関数を削除します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleAll">
            @if LANG_EN
            <summary>
            Remove all functions from the scheduler.
            </summary>
            @endif
            @if LANG_JA
            <summary>スケジューラから全ての関数を削除します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.ScheduleUpdateForTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32,System.Boolean)">
            @if LANG_EN
            <summary>
            Schedule a Node's Update function to be called everyframe.
            </summary>
            <param name="target">The target node.</param>
            <param name="priority">Priority of the Update function in the scheduler.</param>
            <param name="paused">The scheduler paused stated for that node.</param>
            @endif
            @if LANG_JA
            <summary>ノードの Update 関数を毎フレーム呼び出すようにスケジュールします。
            </summary>
            <param name="target">対象ノード。</param>
            <param name="priority">スケジューラ内の Update 関数の優先順位。</param>
            <param name="paused">一時停止状態にします。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleUpdateForTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            @if LANG_EN
            <summary>
            Remove a Node's Update function from the scheduler.
            </summary>
            @endif
            @if LANG_JA
            <summary>スケジューラから Node の Update 関数を削除します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Dump">
            @if LANG_EN
            <summary>Print some debug information, content might vary in the future.</summary>
            @endif
            @if LANG_JA
            <summary>デバッグ情報を出力します。(将来変更される可能性があります)
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Instance">
            @if LANG_EN
            <summary>The scheduler singleton.</summary>
            @endif
            @if LANG_JA
            <summary>スケジューラのシングルトン。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase">
            @if LANG_EN
            <summary>
            Base class for single sprite nodes.
            This is an abstract class.
            </summary>
            @endif
            @if LANG_JA
            <summary>単一のスプライトノードの規定クラス。抽象クラスです。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Quad">
            @if LANG_EN
            <summary>
            Sprite geometry in the node's local space. 
            A TRS defines an oriented rectangle.
            </summary>
            @endif
            @if LANG_JA
            <summary>ノードのローカル空間内のスプライト幾何情報。TRS は矩形の向きを定義します。</summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.FlipU">
            @if LANG_EN
            <summary>If true, the sprite UV are flipped horizontally.</summary>
            @endif
            @if LANG_JA
            <summary>trueなら、スプライトのUVが水平方向に反転します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.FlipV">
            @if LANG_EN
            <summary>If true, the sprite UV are flipped vertically.</summary>
            @endif
            @if LANG_JA
            <summary>trueなら、スプライトのUVが垂直方向に反転します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Color">
            @if LANG_EN
            <summary>The sprite color.</summary>
            @endif
            @if LANG_JA
            <summary>スプライトの色。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.BlendMode">
            @if LANG_EN
            <summary>The blend mode.</summary>
            @endif
            @if LANG_JA
            <summary>ブレンドモード。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.TextureInfo">
            @if LANG_EN
            <summary>
            This is used only if the Sprite is drawn standalone (not in a SpriteList).
            If Sprite is used in a SpriteList, then the SpriteList's TextureInfo is used.
            </summary>
            @endif
            @if LANG_JA
            <summary>このプロパティは、スプライトが別個 ( つまり SpriteList でない) に描画されるときのみ、使用されます。
            スプライトが SpriteList で使用されている場合、後の SpriteList の TextureInfo が使用されます。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Shader">
            @if LANG_EN
            <summary>The shader.</summary>
            @endif
            @if LANG_JA
            <summary>シェーダー。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CalcSizeInPixels">
            @if LANG_EN
            <summary>Return the dimensions of this sprite in pixels.</summary>
            @endif
            @if LANG_JA
            <summary>ピクセル単位でこのスプライトのサイズを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.#ctor">
            @if LANG_EN
            <summary>SpriteBase constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            @if LANG_EN
            <summary>SpriteBase constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Draw">
            @if LANG_EN
            <summary>The draw function (expensive, standalone draw).</summary>
            @endif
            @if LANG_JA
            <summary>描画関数 ( 処理が重い、別個の描画 )。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            @if LANG_EN
            <summary>
            The content local bounds is the smallest Bounds2 containing this 
            sprite's Quad, and Quad itself (the sprite rectangle) if there is 
            no rotation.
            </summary>
            @endif
            @if LANG_JA
            <summary>ローカルの境界は、このスプライトのクワッドを含む最小の Bounds2 です。回転がない場合、クワッドそれ自体 ( スプライトの矩形) と同じです。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.GetlContentLocalBounds">
            @if LANG_EN
            <summary>
            The content local bounds is the smallest Bounds2 containing this 
            sprite's Quad, and Quad itself (the sprite rectangle) if there is 
            no rotation.
            </summary>
            @endif
            @if LANG_JA
            <summary>ローカルの境界は、このスプライトのクワッドを含む最小の Bounds2 です。回転がない場合、クワッドそれ自体 ( スプライトの矩形) と同じです。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.MakeFullScreen">
            @if LANG_EN
            <summary>
            Stretch sprite Quad so that it covers the entire screen. The scene
            needs to have been set/started, since it uses CurrentScene.Camera.
            </summary>
            @endif
            @if LANG_JA
            <summary>スクリーン全体を覆うようにスプライトのクワッドを延ばします。 CurrentScene.Camera を使用しているため、シーンを set/started している必要があります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CenterSprite">
            @if LANG_EN
            <summary>
            Translate sprite geometry so that center of the sprite becomes aligned 
            with the position of the Node.
            </summary>
            @endif
            @if LANG_JA
            <summary>スプライトの中心が Node の中心になるように、スプライトの幾何情報を変更します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CenterSprite(Sce.PlayStation.Core.Vector2)">
            @if LANG_EN
            <summary>
            Modify the center of the sprite geometry.
            </summary>
            <param name="new_center">
            The new center, specified in Node local coordinates.
            You can pass constants defined under TRS.Local for conveniency.
            </param>
            @endif
            @if LANG_JA
            <summary>スプライトの幾何情報の中心を変更します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV">
            @if LANG_EN
            <summary>
            SpriteUV is a sprite for which you set uvs manually. Uvs are stored as a TRS object. 
            Note that the cost of using SpriteUV alone is heavy, try as much as you can to 
            use then as children of SpriteList.
            </summary>
            @endif
            @if LANG_JA
            <summary>SpriteUVは、手動で UV を設定するスプライトです。
            UV は TRS オブジェクトとして格納されます。
            SpriteUVを別個で描画すると、処理が重くなるので注意してください。可能な限り、SpriteList の子として利用してください。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.UV">
            @if LANG_EN
            <summary>The UV is specified as a TRS, which lets you define any oriented rectangle in the UV domain.</summary>
            @endif
            @if LANG_JA
            <summary>TRS として UV を指定します。UV領域内で矩形の向きを定義できます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.#ctor">
            @if LANG_EN
            <summary>SpriteUV constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            @if LANG_EN
            <summary>SpriteUV constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.CalcSizeInPixels">
            @if LANG_EN
            <summary>
            Based on the uv and texture dimensions, return the corresponding size in pixels.
            For example you might want to do something like bob.Quad.S = bob.CalcSizeInPixels().
            If the uv is Quad0_1 (the 0,1 unit quad), then this will return thr texture size in pixels.
            </summary>
            @endif
            @if LANG_JA
            <summary>UVとテクスチャの寸法に基づいて、ピクセル単位で対応するサイズを返します。 
            例えば、bob.Quad.S = bob.CalcSizeInPixels(). といった処理が行えます。
            UV が Quad0_1 ( 0,1 単位クワッド ) の場合、ピクセル単位のテクスチャサイズを返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile">
            @if LANG_EN
            <summary>
            SpriteTile is a sprite for which you specify a tile index (1D or 2D) in a TextureInfo. 
            Note that the cost of using SpriteUV alone is heavy, try as much as you can to use 
            then as children of SpriteList.
            </summary>
            @endif
            @if LANG_JA
            <summary>SpriteTile は、TextureInfo 内のタイルインデックス (1D または 2D) を指定する形式のスプライトです。
            別個で描画すると、処理が重くなるので注意してください。可能な限り、SpriteList の子として利用してください。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.TileIndex2D">
            @if LANG_EN
            <summary>
            TileIndex2D defines the UV that will be used for this sprite. 
            Tiles are indexed in 2 dimensions.
            </summary>
            @endif
            @if LANG_JA
            <summary>TileIndex2D はこのスプライトに使われる UV を定義します。
            2次元でタイルのインデックスを指定します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor">
            @if LANG_EN
            <summary>
            SpriteTile constructor.
            TileIndex2D is set to (0,0) by default.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            TileIndex2D はデフォルトで (0,0)にセットされます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            @if LANG_EN
            <summary>
            SpriteTile constructor.
            TileIndex2D is set to (0,0) by default.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            TileIndex2D はデフォルトで (0,0)にセットされます。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            @if LANG_EN
            <summary>
            SpriteTile constructor.
            TileIndex2D is set to (0,0) by default.
            </summary>
            <param name="texture_info">The tiled texture object.</param>
            <param name="index">2D tile index. (0,0) is the bottom left tile.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            TileIndex2D はデフォルトで (0,0)にセットされます。
            </summary>
            <param name="texture_info">タイルのテクスチャオブジェクト。</param>
            <param name="index">2次元のタイルインデックス。(0,0) は左下のタイルです。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,System.Int32)">
            @if LANG_EN
            <summary>
            SpriteTile constructor.
            </summary>
            <param name="texture_info">The tiled texture object.</param>
            <param name="index">1D tile index. Flat indexing starts from bottom left tile, which is (0,0) in 2D.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="texture_info">タイルのテクスチャオブジェクト。</param>
            <param name="index">1次元のタイルインデックス。インデックスは左下のタイルから始まります(2Dでは (0,0)にあたる)。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.CalcSizeInPixels">
            @if LANG_EN
            <summary>
            Based on the uv and texture dimensions, return the corresponding size in pixels.
            For example you might want to do something like bob.Quad.S = bob.CalcSizeInPixels().
            </summary>
            @endif
            @if LANG_JA
            <summary>UVとテクスチャのサイズに基づき、ピクセル単位で相当するサイズを返します。
            例えば、bob.Quad.S = bob.CalcSizeInPixels()のように使います。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.TileIndex1D">
            @if LANG_EN
            <summary>
            Instead of TileIndex2D you can also work with a flattened 1d index, for animation, etc.
            In that case the set/get calculation depend on TextureInfo, so TextureInfo must have 
            been set properly.
            </summary>
            @endif
            @if LANG_JA
            <summary>TileIndex2D の代わりに、アニメーションの用途などで1次元のインデックスを使うこともできます。
            その場合には、set/get の計算がTextureInfoに依存してしまうので、TextureInfoが正しく設定されている必要があります。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList">
            @if LANG_EN
            <summary>
            Draw sprites in batch to reduce the number of draw calls, state setup etc.
            
            Just adding SpriteUV or SpriteTile objects as children of a SpriteList with AddChild()
            will enable batch rendering, with the limitation that the TextureInfo, BlendMode, 
            and Color property of the sprites will be ignored in favor of the parent SpriteList's 
            TextureInfo, BlendMode, and Color properties.
            
            Important: some functions in SpriteUV and SpriteTile use their local TextureInfo
            instead of the parent's SpriteTile one, so you probably want to set both to be safe.
            </summary>
            @endif
            @if LANG_JA
            <summary>描画呼び出しやステートのセットアップの呼び出し回数を削減するため、スプライトを一括して描画します。
            SpriteUV や SpriteTile オブジェクトを AddChild() で SpriteList の子として追加するだけで、一括描画を可能にします。
            ただし、スプライトの TextureInfo, BlendMode, Color のプロパティは無視されます。それらのプロパティは親の SpriteList に依存します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.EnableLocalTransform">
            @if LANG_EN
            <summary>
            If EnableLocalTransform flag is true, the children sprite's local transform matrices get used,
            but vertices get partly transformed on the cpu. You can turn this behavior off to ignore the local 
            transform matrix to save a little bit of cpu processing (and rely on Sprite's Quad only 
            to position the sprite). In that case (EnableLocalTransform=false) the Position, Scale, Skew, Pivot 
            will be ignored.
            </summary>
            @endif
            @if LANG_JA
            <summary>EnableLocalTransform フラグがtrueの場合、子のスプライトのローカル変換行列が使われます。
            その場合、頂点は CPU 上で変換します。
            
            CPU処理の節約のため、ローカル変換行列を無視するために、この挙動を OFF にすることができます。
            その場合、スプライトの位置はクワッドに依存します。
            
            EnableLocalTransform=false の場合、Position, Scale, Skew, Pivot は無視されます。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.Color">
            @if LANG_EN
            <summary>The color that will be used for all sprites in the Children list.</summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内の全てのスプライトで使用される色。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.BlendMode">
            @if LANG_EN
            <summary>The blend mode that will be used for all sprites in the Children list.</summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内の全てのスプライトで使用されるブレンドモード。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.TextureInfo">
            @if LANG_EN
            <summary>The TextureInfo object that will be used for all sprites in the Children list.</summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内の全てのスプライトで使用される TextureInfo オブジェクト。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.Shader">
            @if LANG_EN
            <summary>The shader that will be used for all sprites in the Children list.</summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内の全てのスプライトで使用されるシェーダー。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            @if LANG_EN
            <summary>
            SpriteList constructor.
            TextureInfo must be specified in constructor since there is no default for it.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            TextureInfo はコンストラクタで必ず指定しなければなりません。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile">
            @if LANG_EN
            <summary>Data struct used by RawSpriteTileList.</summary>
            @endif
            @if LANG_JA
            <summary>RawSpriteTileList で使用される構造体。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.Quad">
            @if LANG_EN
            <summary>Sprite geometry (position, rotation, scale define a rectangle).</summary>
            @endif
            @if LANG_JA
            <summary>スプライトの幾何情報 (位置、回転、スケールで矩形を定義します)。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.TileIndex2D">
            @if LANG_EN
            <summary>The tile index.</summary>
            @endif
            @if LANG_JA
            <summary>タイルインデックス。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.FlipU">
            @if LANG_EN
            <summary>If true, the sprite UV are flipped horizontally.</summary>
            @endif
            @if LANG_JA
            <summary>trueの場合、スプライトのUVは水平方向に反転します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.FlipV">
            @if LANG_EN
            <summary>If true, the sprite UV are flipped vertically.</summary>
            @endif
            @if LANG_JA
            <summary>trueの場合、スプライトのUVは垂直方向に反転します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Boolean,System.Boolean)">
            @if LANG_EN
            <summary>RawSpriteTile constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList">
            @if LANG_EN
            <summary>
            Draw sprites in batch to reduce number of draw calls, state setup etc.
            Unlike SpriteList, instead of holding a list of Node objects, this holds 
            a list of RawSpriteTile, which is more lightweight. In effect this is a 
            thin wrap of SpriteRenderer, usable as a Node.
            </summary>
            @endif
            @if LANG_JA
            <summary>描画呼び出しや、ステートのセットアップの回数を減らすため、スプライトを一括して描画します。
            SpriteListとは違い、Node オブジェクトのリストを保持する代わりに、より軽いRawSpriteTileのリストを保持します。
            これは Node として利用可能な SpriteRenderer のラップです。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Sprites">
            @if LANG_EN
            <summary>The list of RawSpriteTile objects to render.</summary>
            @endif
            @if LANG_JA
            <summary>描画可能な RawSpriteTile オブジェクトのリスト。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Color">
            @if LANG_EN
            <summary>The color that will be used for all sprites in the Children list.</summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内の全てのスプライトで使用される色。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.BlendMode">
            @if LANG_EN
            <summary>The blend mode that will be used for all sprites in the Children list.</summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内の全てのスプライトで使用されるブレンドモード。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.TextureInfo">
            @if LANG_EN
            <summary>The TextureInfo object that will be used for all sprites in the Children list.</summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内の全てのスプライトで使用される TextureInfoオブジェクト。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Shader">
            @if LANG_EN
            <summary>The shader that will be used for all sprites in the Children list.</summary>
            @endif
            @if LANG_JA
            <summary>Children リスト内の全てのスプライトで使用されるシェーダー。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            @if LANG_EN
            <summary>
            RawSpriteTileList constructor.
            TextureInfo must be specified in constructor since there is no default for it.
            </summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            TextureInfo はコンストラクタで必ず指定しなければなりません。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Draw">
            @if LANG_EN
            <summary>The draw function, draws all sprites in Sprites list.</summary>
            @endif
            @if LANG_JA
            <summary>描画関数。スプライトリスト内で全てのスプライトを描画します。
            </summary>
            @endif
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.CalcSizeInPixels" -->
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene">
            @if LANG_EN
            <summary>
            Base class for scenes transition nodes. Those nodes make a visual
            transition between 2 given scenes, the current one and the next
            one. During the transition, both scenes are potentially updated
            and rendered at the same time.
            </summary>
            @endif
            @if LANG_JA
            <summary>画面遷移ノードのための基底クラス。これらのノードは2つのシーンを視覚的に遷移させます。
            遷移中は、両方のシーンを Updateし、描画します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.PreviousScene">
            @if LANG_EN
            <summary>The previous scene we are transitioning from.</summary>
            @endif
            @if LANG_JA
            <summary>遷移前のシーン。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.NextScene">
            @if LANG_EN
            <summary>The scene we are transitioning to.</summary>
            @endif
            @if LANG_JA
            <summary>遷移先のシーン。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.Duration">
            @if LANG_EN
            <summary>Transition duration in seconds.</summary>
            @endif
            @if LANG_JA
            <summary>秒単位での遷移間隔。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.KeepRendering">
            @if LANG_EN
            <summary>If true, keep updating both scenes during the transition (more expensive).</summary>
            @endif
            @if LANG_JA
            <summary>trueの場合、遷移中、両方のシーンを更新します (処理は重くなります)。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.IsTransitionScene">
            @if LANG_EN
            <summary>Returns true for all scene deriving from TransitionScene.</summary>
            @endif
            @if LANG_JA
            <summary>TransitionSceneから派生する全てのシーンで、trueを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            @if LANG_EN
            <summary>Constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.OnEnter">
            @if LANG_EN
            <summary></summary>
            @endif
            @if LANG_JA
            <summary>
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.FadeCompletion">
            @if LANG_EN
            <summary>Fade completion, [0,1] range.</summary>
            @endif
            @if LANG_JA
            <summary>
            </summary>フェイドの完了度合い。[0,1]の範囲。
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase">
            @if LANG_EN
            <summary>
            Base class for scenes transition doing a fade of some kind,
            requiring offscreen rendering for both scenes.
            </summary>
            @endif
            @if LANG_JA
            <summary>フェイドの画面遷移を行う基底クラス。
            両方のシーンをオフスクリーンで描画する必要があります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            @if LANG_EN
            <summary>Constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.Terminate">
            @if LANG_EN
            <summary>Dispose of static resources.</summary>
            @endif
            @if LANG_JA
            <summary>静的なリソースを破棄します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.OnEnter">
            @if LANG_EN
            <summary></summary>
            @endif
            @if LANG_JA
            <summary>
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.Draw">
            @if LANG_EN
            <summary>The draw function.</summary>
            @endif
            @if LANG_JA
            <summary>描画関数。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DTween">
            @if LANG_EN
            <summary>delegate type.</summary>
            @endif
            @if LANG_JA
            <summary>デリゲート型。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade">
            @if LANG_EN
            <summary>
            TransitionSolidFade fades the current scene to black before fading the
            next scene in.
            </summary>
            @endif
            @if LANG_JA
            <summary>TransitionSolidFade は、次のシーンをフェイドする前に、現在のシーンを黒にフェイドします。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.Tween">
            @if LANG_EN
            <summary>DTween.</summary>
            @endif
            @if LANG_JA
            <summary>DTween
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            @if LANG_EN
            <summary>Constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.Draw">
            @if LANG_EN
            <summary>The draw function.</summary>
            @endif
            @if LANG_JA
            <summary>描画関数。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade">
            @if LANG_EN
            <summary>
            TransitionCrossFade uses a blend to cross fades the 2 transitioning scenes.
            You can set a DTween to control the fade.
            </summary>
            @endif
            @if LANG_JA
            <summary>TransitionCrossFade は 2つのシーンをクロスフェードさせるために、ブレンドを使います。
            フェイドのコントロールに DTween を使うことができます。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.Tween">
            @if LANG_EN
            <summary>DTween.</summary>
            @endif
            @if LANG_JA
            <summary>DTween</summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            @if LANG_EN
            <summary>Constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.Draw">
            @if LANG_EN
            <summary>The draw function.</summary>
            @endif
            @if LANG_JA
            <summary>描画関数。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade">
            @if LANG_EN
            <summary>
            TransitionDirectionalFade uses a translating blend mask to cross fade between 2
            scenes. The old gets replaced by the new one as the cross fade line moves
            along a direction specified by user.
            </summary>
            @endif
            @if LANG_JA
            <summary>TransitionDirectionalFade は2つのシーンをクロスフェードさせるのに、変換ブレンドマスクを使います。
            クロスフェードのラインは、開発者が指定した方向に沿って動作し、古いシーンが新しいシーンに置き換わります。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Width">
            @if LANG_EN
            <summary>width of the transition zone (normalized value, roughly 0,1)</summary>
            @endif
            @if LANG_JA
            <summary>遷移ゾーンの幅(正規化された値。おおむね 0,1の範囲。)
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Direction">
            @if LANG_EN
            <summary>moving direction</summary>
            @endif
            @if LANG_JA
            <summary>移動方向。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Tween">
            @if LANG_EN
            <summary>DTween.</summary>
            @endif
            @if LANG_JA
            <summary>DTween
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            @if LANG_EN
            <summary>Constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Terminate">
            @if LANG_EN
            <summary>Dispose of static resources.</summary>
            @endif
            @if LANG_JA
            <summary>静的リソースの破棄。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Draw">
            @if LANG_EN
            <summary>The draw function.</summary>
            @endif
            @if LANG_JA
            <summary>描画関数。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.SpriteShaderDirFade.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem">
            @if LANG_EN
            <summary>
            A simple particle system effect.
            </summary>
            @endif
            @if LANG_JA
            <summary>シンプルなパーティクルシステムエフェクト。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.TextureInfo">
            @if LANG_EN
            <summary>
            The texture information for this particle system. All particles use the same image.
            </summary>
            @endif
            @if LANG_JA
            <summary>このパーティクルシステムのテクスチャ情報。全てのパーティクルは同じイメージを使用します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Color">
            @if LANG_EN
            <summary>
            A global multiplier color for the particle system.
            </summary>
            @endif
            @if LANG_JA
            <summary>パーティクルシステムのためのグローバルな乗算色。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.BlendMode">
            @if LANG_EN
            <summary>
            The blend mode used by the particle system.
            </summary>
            @endif
            @if LANG_JA
            <summary>パーティクルによって使用されるブレンドモード。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Emit">
            @if LANG_EN
            <summary>
            Parameters used for controlling the emission and initial parameters of particles.
            </summary>
            @endif
            @if LANG_JA
            <summary>パラメータは、パーティクルの放出とパラメータの初期化の管理に使用します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Simulation">
            @if LANG_EN
            <summary>
            Parameters used for controlling the simulation.
            </summary>
            @endif
            @if LANG_JA
            <summary>シミュレーションのコントロールに使われるパラメータ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.RenderTransform">
            @if LANG_EN
            <summary>
            The modelview matrix used for rendering the particle system.
            RenderTransform overrides base class's Node.GetTransform() to render the local geometry.
            </summary>
            @endif
            @if LANG_JA
            <summary>パーティクルシステムを描画するためのモデルビュー行列
            </summary>RenderTransform は ローカルの幾何情報を描画するため、基底クラスの Node.GetTransform() を上書きします。
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.m_default_shader">
            particle system's default shader (texture * color).
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Shader">
            @if LANG_EN
            <summary>
            User can set an external shader. 
            The Label class won't dispose of shaders set by user (other than ParticleSystem.DefaultShader).
            </summary>
            @endif
            @if LANG_JA
            <summary>開発者がセットすることのできる外部シェーダー。
            Label クラスは開発者がセットしたシェーダーを破棄しません。(ParticleSystem.DefaultShaderは除く)
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.#ctor(System.Int32)">
            @if LANG_EN
            <summary>
            ParticleSystem constructor.
            </summary>
            <param name="max_particles">The maximum number of particles for this particle system.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            <param name="max_particles">パーティクルシステムのパーティクルの最大数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Terminate">
            @if LANG_EN
            <summary>Dispose of static resources.</summary>
            @endif
            @if LANG_JA
            <summary>静的リソースの破棄。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.CreateParticle(System.Boolean)">
            @if LANG_EN
            <summary>
            Particles get created automatically using Emit parameters,
            but if needed you can also create and init particles yourself.
            </summary>
            <param name="skip_auto_init">
            If false, the created particle gets initialized using the Emit parameters, just 
            like the particles randomly created everyframe (this is in case you want to use 
            a random variation as a starting point).
            </param>
            <returns>A handle to the particle just created</returns>
            @endif
            @if LANG_JA
            <summary>Emit パラメータを使って自動で作成されるパーティクル。
            必要に応じて作成でき、開発者がパーティクルを初期化できます。
            </summary>
            <param name="skip_auto_init">
            falseなら、作成されたパーティクルを Emit パラメータを使って初期化します。パーティクルは毎フレーム、ランダムに作成されます。
            ( 開始時にランダムの分散を使用した場合)。
            </param>
            <returns>作成されたパーティクルのハンドラ。</returns>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Update(System.Single)">
            @if LANG_EN
            <summary>The update function.</summary>
            @endif
            @if LANG_JA
            <summary>Update関数。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Draw">
            @if LANG_EN
            <summary>The draw function.</summary>
            @endif
            @if LANG_JA
            <summary>描画関数。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.MaxParticles">
            @if LANG_EN
            <summary>
            The maximum number of particles the system can deal with.
            </summary>
            @endif
            @if LANG_JA
            <summary>システムが取り扱うパーティクルの数。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticlesCount">
            @if LANG_EN
            <summary>
            The current number of particles alive.
            </summary>
            @endif
            @if LANG_JA
            <summary>生存しているパーティクルの数。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IsFull">
            @if LANG_EN
            <summary>
            Return true if the number of active particles has reached maximum capacity.
            </summary>
            @endif
            @if LANG_JA
            <summary>アクティブなパーティクルが最大数に達すると、trueを返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.DefaultShader">
            @if LANG_EN
            <summary>
            The particle system's default shader (texture * color).
            </summary>
            @endif
            @if LANG_JA
            <summary>パーティクルシステムのデフォルトシェーダー ( texture * color )。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Disposed">
            @if LANG_EN
            <summary>Return true if this object been disposed.</summary>
            @endif
            @if LANG_JA
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticleShaderDefault">
            @if LANG_EN
            <summary>
            Default shader, texture modulated by a color.
            </summary>
            @endif
            @if LANG_JA
            <summary>デフォルトのシェーダー。テクスチャの色は変調されます。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader">
            @if LANG_EN
            <summary>ParticleSystem's shader interface.</summary>
            @endif
            @if LANG_JA
            <summary>ParticleSystem のシェーダーインターフェース。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.SetMVP(Sce.PlayStation.Core.Matrix4@)">
            @if LANG_EN
            <summary>Set the Projection*View*Model matrix.</summary>
            @endif
            @if LANG_JA
            <summary>Projection * View * Model 行列の設定。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.SetColor(Sce.PlayStation.Core.Vector4@)">
            @if LANG_EN
            <summary>Set a global color.</summary>
            @endif
            @if LANG_JA
            <summary>グローバルカラーの設定。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.GetShaderProgram">
            @if LANG_EN
            <summary>Return the shader's ShaderProgram object.</summary>
            @endif
            @if LANG_JA
            <summary>シェーダーの ShaderProgram オブジェクトを返します。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticleShaderDefault.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle">
            @if LANG_EN
            <summary>
            Particle object returned by CreateParticle.
            </summary>
            @endif
            @if LANG_JA
            <summary>CreateParticle で返される、パーティクルオブジェクト。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Position">
            @if LANG_EN
            <summary>
            Position.
            </summary>
            @endif
            @if LANG_JA
            <summary>位置。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Velocity">
            @if LANG_EN
            <summary>
            Velocity.
            </summary>
            @endif
            @if LANG_JA
            <summary>速度。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Age">
            @if LANG_EN
            <summary>
            Age (particle dies when Age >= LifeSpan).
            </summary>
            @endif
            @if LANG_JA
            <summary>年齢 (Age)。 ( Age >= LifeSpan でパーティクルは死亡します)。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.LifeSpan">
            @if LANG_EN
            <summary>
            Life span
            </summary>
            @endif
            @if LANG_JA
            <summary>寿命。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.LifeSpanRcp">
            @if LANG_EN
            <summary>
            Life span reciprocal - if you don't use the automatic init, you must make sure to set this to 1.0f/LifeSpan
            </summary>
            @endif
            @if LANG_JA
            <summary>寿命 (LifeSpan) の逆数。自動の初期化を使わない場合、この値に1.0f/LifeSpanをセットすることを確認してください。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Angle">
            @if LANG_EN
            <summary>
            Rotation angle
            </summary>
            @endif
            @if LANG_JA
            <summary>回転角。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.AngularVelocity">
            @if LANG_EN
            <summary>
            Angular velocity
            </summary>
            @endif
            @if LANG_JA
            <summary>角速度。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ScaleStart">
            @if LANG_EN
            <summary>
            Scale when Age=0.0
            </summary>
            @endif
            @if LANG_JA
            <summary>Age=0.0時のスケール。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ScaleDelta">
            @if LANG_EN
            <summary>
            ScaleDelta must be initialized to ( scale_end - ScaleStart ) / LifeSpan
            </summary>
            @endif
            @if LANG_JA
            <summary>ScaleDelta は ( scale_end - ScaleStart ) / LifeSpan で初期化する必要があります。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ColorStart">
            @if LANG_EN
            <summary>
            Color when Age=0.0
            </summary>
            @endif
            @if LANG_JA
            <summary>Age=0.0時の色。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ColorDelta">
            @if LANG_EN
            <summary>
            ColorDelta must be initialized to ( color_end - ColorStart ) / LifeSpan
            </summary>
            @endif
            @if LANG_JA
            <summary>ColorDelta は ( color_end - ColorStart ) / LifeSpan で初期化する必要があります。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ToString">
            @if LANG_EN
            <summary>Return the string representation of this Particle.</summary>
            @endif
            @if LANG_JA
            <summary>このパーティクルの文字列表現を返します。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Scale">
            @if LANG_EN
            <summary>
            Scale
            </summary>
            @endif
            @if LANG_JA
            <summary>スケール。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Color">
            @if LANG_EN
            <summary>
            Color
            </summary>
            @endif
            @if LANG_JA
            <summary>色。
            </summary>
            @endif
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Dead">
            @if LANG_EN
            <summary>
            Check if the particle is still alive
            </summary>
            @endif
            @if LANG_JA
            <summary>パーティクルが生きているかチェックします。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams">
            @if LANG_EN
            <summary>
            This class regroups all the parameters needed to initialize a particle.
            Most values have a variance associated to them (-Var suffix), to give a 
            randomization range. When the variance is a "relative" value (-RelVar suffix), 
            a value between  0,1 is expected. For example: 0.2f means the corresponding 
            value will be randomized -+20% at creation time.
            </summary>
            @endif
            @if LANG_JA
            <summary>このクラスは、パーティクルの初期化に必要な全てのパラメータを再グループ化します。
            ランダムの範囲を与えるため、多くの値は分散しています(-Var の接尾辞)。
            分散が "相対"値（-RelVarの接尾辞）である場合、0,1の間の値が期待されています。
            例: 0.2f は、作成時に対応する値は -+20%でランダム化されることを意味します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Transform">
            @if LANG_EN
            <summary>
            The generated position, velocity, angle are transformed by this.
            </summary>
            @endif
            @if LANG_JA
            <summary>生成される位置・速度・角度はこの行列によって変換されます。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.TransformForVelocityEstimate">
            @if LANG_EN
            <summary>
            The transform matrix we use to estimate a velocity and an angular velocity.
            You probably want to set it everyframe to something relevant (the current 
            transform of the object node for example).
            </summary>
            @endif
            @if LANG_JA
            <summary>速度と角速度の推定に使用する変換行列。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ForwardMomentum">
            @if LANG_EN
            <summary>
            Control how much of the "observed velocity" we add to the created particles.
            </summary>
            @endif
            @if LANG_JA
            <summary>作成したパーティクルに追加する速度のコントロール。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularMomentun">
            @if LANG_EN
            <summary>
            Control how much of the "observed angular velocity" we add to the created particles.
            </summary>
            @endif
            @if LANG_JA
            <summary>作成したパーティクルに追加する角速度のコントロール。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.WaitTime">
            @if LANG_EN
            <summary>
            The time to wait until the next particle gets created, in seconds.
            </summary>
            @endif
            @if LANG_JA
            <summary>次のパーティクルが生成されるまで待機する時間。秒単位。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.WaitTimeRelVar">
            @if LANG_EN
            <summary>
            WaitTime's variance (relative)
            </summary>
            @endif
            @if LANG_JA
            <summary>待機時間の分散 (相対)。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.LifeSpan">
            @if LANG_EN
            <summary>
            Created particles's life span in seconds.
            </summary>
            @endif
            @if LANG_JA
            <summary>作成されたパーティクルの寿命。秒単位。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.LifeSpanRelVar">
            @if LANG_EN
            <summary>
            LifeSpan's variance (relative)
            </summary>
            @endif
            @if LANG_JA
            <summary>寿命の長さの分散(相対)。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Position">
            @if LANG_EN
            <summary>
            Created particles's initial position (see also InLocalSpace)
            </summary>
            @endif
            @if LANG_JA
            <summary>作成されたパーティクルの初期位置 ( InLocalSpaceも参考にしてください )。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.PositionVar">
            @if LANG_EN
            <summary>
            Position's variance
            </summary>
            @endif
            @if LANG_JA
            <summary>位置の分散。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Velocity">
            @if LANG_EN
            <summary>
            Created particles's initial velocity given to created particles (see also InLocalSpace) 
            </summary>
            @endif
            @if LANG_JA
            <summary>作成したパーティクルの初期速度 ( InLocalSpaceも参考にしてください )。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.VelocityVar">
            @if LANG_EN
            <summary>
            Velocity's variance
            </summary>
            @endif
            @if LANG_JA
            <summary>速度の分散。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularVelocity">
            @if LANG_EN
            <summary>
            Created particles's initial angular velocity, in radians (see also InLocalSpace) 
            </summary>
            @endif
            @if LANG_JA
            <summary>作成したパーティクルの初期角速度。ラジアン単位 ( InLocalSpaceも参考にしてください )。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularVelocityVar">
            @if LANG_EN
            <summary>
            AngularVelocity's variance
            </summary>
            @endif
            @if LANG_JA
            <summary>AngularVelocityの分散。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Angle">
            @if LANG_EN
            <summary>
            Created particles's initial rotation angle in radians (see also InLocalSpace) 
            </summary>
            @endif
            @if LANG_JA
            <summary>作成したパーティクルの初期回転角度。ラジアン単位 ( InLocalSpaceも参考にしてください )。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngleVar">
            @if LANG_EN
            <summary>
            Angle's variance
            </summary>
            @endif
            @if LANG_JA
            <summary>角度の分散。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorStart">
            @if LANG_EN
            <summary>
            Created particles's initial color
            </summary>
            @endif
            @if LANG_JA
            <summary>作成したパーティクルの初期色。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorStartVar">
            @if LANG_EN
            <summary>
            ColorStart's variance
            </summary>
            @endif
            @if LANG_JA
            <summary>初期色の分散。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorEnd">
            @if LANG_EN
            <summary>
            Color the particle will have when they reach their life span
            </summary>
            @endif
            @if LANG_JA
            <summary>寿命に達したときのパーティクルの色。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorEndVar">
            @if LANG_EN
            <summary>
            ColorEnd's variance
            </summary>
            @endif
            @if LANG_JA
            <summary>ColorEndの分散。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleStart">
            @if LANG_EN
            <summary>
            Created particles's initial size 
            </summary>
            @endif
            @if LANG_JA
            <summary>作成したパーティクルの初期サイズ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleStartRelVar">
            @if LANG_EN
            <summary>
            ScaleStart's variance (relative)
            </summary>
            @endif
            @if LANG_JA
            <summary>ScaleStartの分散。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleEnd">
            @if LANG_EN
            <summary>
            Size the particle will have when they reach their life span
            </summary>
            @endif
            @if LANG_JA
            <summary>寿命に達したときの粒子のサイズ。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleEndRelVar">
            @if LANG_EN
            <summary>
            ScaleEnd's variance (relative)
            </summary>
            @endif
            @if LANG_JA
            <summary>ScaleEndの分散。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.#ctor">
            @if LANG_EN
            <summary>EmitterParams constructor.</summary>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ToString(System.String)">
            @if LANG_EN
            <summary>Return the string representation of this EmitterParams.</summary>
            <param name="prefix">A prefix string added to the beginning of each line.</param> 
            @endif
            @if LANG_JA
            <summary>EmitterParams の文字列表現を返します。
            </summary>
            <param name="prefix">それぞれの行の最初に追加される接頭辞の文字列。</param> 
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams">
            @if LANG_EN
            <summary>
            SimulationParams regroups all the parameters needed by the Update and Draw 
            to advance and render the particles.
            </summary>
            @endif
            @if LANG_JA
            <summary>SimulationParams は、Update と Draw で必要とされる全てのパラメータを、再グループ化します。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Friction">
            @if LANG_EN
            <summary>
            A global friction applied to all particles.
            </summary>
            @endif
            @if LANG_JA
            <summary>全てのパーティクルに適用される摩擦。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.GravityDirection">
            @if LANG_EN
            <summary>
            Gravity direction (unit vector).
            </summary>
            @endif
            @if LANG_JA
            <summary>重力の方向 (単位ベクトル)。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Gravity">
            @if LANG_EN
            <summary>
            Gravity amount.
            </summary>
            @endif
            @if LANG_JA
            <summary>重力量。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.WindDirection">
            @if LANG_EN
            <summary>
            Wind direction (unit vector).
            </summary>
            @endif
            @if LANG_JA
            <summary>風の方向。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Wind">
            @if LANG_EN
            <summary>
            Amount of wind.
            </summary>
            @endif
            @if LANG_JA
            <summary>風量。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.BrownianScale">
            @if LANG_EN
            <summary>
            Amount of brownian motion you want to add to each particle.
            For each particle, a different random direction is added to 
            the wind everyframe. You can use that to add a touch of gas/dust 
            effects.
            </summary>
            @endif
            @if LANG_JA
            <summary>各パーティクルに追加するブラウン運動の量です。
            各パーティクルに対し、毎フレーム、異なったランダム方向を風に追加します。
            ガス/塵のエフェクトを追加することができます。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Fade">
            @if LANG_EN
            <summary>
            The Fade value is a value in 0,1 that controls how fast you want the 
            particle to fade in/fade out (when it dies)
            The particle's color's alpha value is multiplied by a symmetric fade
            curve; Fade is the length of the start and end fade areas, for example 
            if Fade is 0.25, the particle will be fully visible at 25% of its age.
            </summary>
            @endif
            @if LANG_JA
            <summary>Fade の値は、0,1の範囲の値です。この値は、パーティクルがフェイドイン/フェイドアウトする速さ(つまり死亡する時期)をコントロールします。
            パーティクルの色のアルファ値は、対称フェイドカーブで乗算します。
            Fade はフェイドスタートとフェイドエンドの長さです。
            例えば、Fade が0.25であれば、粒子はその年齢の25％で完全に見えるようになります。
            </summary>
            @endif
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Particles">
            @if LANG_EN
            <summary>
            Particles wraps a single ParticleSystem into a scenegraph node.
            </summary>
            @endif
            @if LANG_JA
            <summary>ひとつの ParticleSystem を シーングラフノードにラップしたパーティクルクラス。
            </summary>
            @endif
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Particles.ParticleSystem">
            @if LANG_EN
            <summary>
            The actual ParticleSystem object used by this Particles node.
            </summary>
            @endif
            @if LANG_JA
            <summary>この Particles によって使用される、実質的な ParticleSystem オブジェクト。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.#ctor(System.Int32)">
            @if LANG_EN
            <summary>
            ParticleSystem constructor.
            Note that the constructor calls ScheduleUpdate().
            </summary>
            <param name="max_particles">The maximum number of particles for this particle system.</param>
            @endif
            @if LANG_JA
            <summary>コンストラクタ。コンストラクタが ScheduleUpdate() を呼び出すことに注意してください。
            </summary>
            <param name="max_particles">このパーティクルシステムの最大パーティクル数。</param>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Update(System.Single)">
            @if LANG_EN
            <summary>The update function.</summary>
            @endif
            @if LANG_JA
            <summary>Update関数。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Draw">
            @if LANG_EN
            <summary>The draw function.</summary>
            @endif
            @if LANG_JA
            <summary>描画関数。
            </summary>
            @endif
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Dispose">
            @if LANG_EN
            <summary>
            Dispose implementation.
            </summary>
            @endif
            @if LANG_JA
            <summary>Disposeの実装。
            </summary>
            @endif
        </member>
    </members>
</doc>
