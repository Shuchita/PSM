<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sce.PlayStation.Core</name>
    </assembly>
    <members>
        <member name="T:Sce.PlayStation.Core.IShallowCloneable">
            <summary>シャローコピー（浅いコピー）が可能な共通のインターフェイス。</summary>
            <remarks>シャローコピーでは、フィールド(メンバー変数)がオブジェクトへの参照型なら、その参照(つまりアドレス)をコピーするだけにとどまります。そのため参照先のオブジェクトはコピーされた複数のオブジェクトから参照されることになります。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.IDeepCloneable">
            <summary>ディープコピーが可能な共通のインターフェイス。</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Rgba">
            <summary>32 bit color struct, with 8 bits per channel</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba.R">
            <summary>red</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba.G">
            <summary>green</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba.B">
            <summary>blue</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba.A">
            <summary>alpha</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 integers</summary>
            <param name="r">red</param>
            <param name="g">green</param>
            <param name="b">blue</param>
            <param name="a">alpha</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.ToVector4">
            <summary>return the color as a Vector4</summary>
            <returns>the color as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.Equals(Sce.PlayStation.Core.Rgba)">
            <summary>equality test</summary>
            <param name="c">the color to compare this to</param>
            <returns>true if this == c, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.ToString">
            <summary>get the string representation of color value</summary>
            <returns>the string representation of color value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.op_Equality(Sce.PlayStation.Core.Rgba,Sce.PlayStation.Core.Rgba)">
            <summary>equality operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if color 1 == color 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.op_Inequality(Sce.PlayStation.Core.Rgba,Sce.PlayStation.Core.Rgba)">
            <summary>not equals operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if c 1 != c 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Rgba4444">
            <summary>16 bit color struct with 4 bits per channel</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba4444.Bits">
            <summary>color data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.#ctor(System.UInt16)">
            <summary>constructor taking ushort data</summary>
            <param name="bits">bits to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.#ctor(Sce.PlayStation.Core.Rgba)">
            <summary>constructor taking a 32 bit color</summary>
            <param name="rgba">the color to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.ToRgba">
            <summary>return the color as a 32 bit color</summary>
            <returns>the color as a 32 bit color</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.Equals(Sce.PlayStation.Core.Rgba4444)">
            <summary>equality test</summary>
            <param name="c">the color to compare this to</param>
            <returns>true if this == rgba, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.ToString">
            <summary>get the string representation of color value</summary>
            <returns>the string representation of color value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.op_Equality(Sce.PlayStation.Core.Rgba4444,Sce.PlayStation.Core.Rgba4444)">
            <summary>equality operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if color 1 == color 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.op_Inequality(Sce.PlayStation.Core.Rgba4444,Sce.PlayStation.Core.Rgba4444)">
            <summary>not equals operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if c 1 != c 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Rgba5551">
            <summary>16 bit color struct with 5 bits per channel for R, G, and B. and 1 bit for A</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba5551.Bits">
            <summary>color data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.#ctor(System.UInt16)">
            <summary>constructor taking ushort data</summary>
            <param name="bits">bits to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.#ctor(Sce.PlayStation.Core.Rgba)">
            <summary>constructor taking a 32 bit color</summary>
            <param name="rgba">the color to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.ToRgba">
            <summary>return the color as a 32 bit color</summary>
            <returns>the color as a 32 bit color</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.Equals(Sce.PlayStation.Core.Rgba5551)">
            <summary>equality test</summary>
            <param name="c">the color to compare this to</param>
            <returns>true if this == rgba, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.ToString">
            <summary>get the string representation of color value</summary>
            <returns>the string representation of color value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.op_Equality(Sce.PlayStation.Core.Rgba5551,Sce.PlayStation.Core.Rgba5551)">
            <summary>equality operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if color 1 == color 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.op_Inequality(Sce.PlayStation.Core.Rgba5551,Sce.PlayStation.Core.Rgba5551)">
            <summary>not equals operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if c 1 != c 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Rgb565">
            <summary>16 bit color struct with 5 bits for R, 6 bits for G, and 5 bits for G</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgb565.Bits">
            <summary>color data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.#ctor(System.UInt16)">
            <summary>constructor taking ushort data</summary>
            <param name="bits">bits to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.#ctor(Sce.PlayStation.Core.Rgba)">
            <summary>constructor taking a 32 bit color</summary>
            <param name="rgba">the color to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.ToRgba">
            <summary>return the color as a 32 bit color</summary>
            <returns>the color as a 32 bit color</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.Equals(Sce.PlayStation.Core.Rgb565)">
            <summary>equality test</summary>
            <param name="c">the color to compare this to</param>
            <returns>true if this == rgba, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.ToString">
            <summary>get the string representation of color value</summary>
            <returns>the string representation of color value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.op_Equality(Sce.PlayStation.Core.Rgb565,Sce.PlayStation.Core.Rgb565)">
            <summary>equality operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if color 1 == color 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.op_Inequality(Sce.PlayStation.Core.Rgb565,Sce.PlayStation.Core.Rgb565)">
            <summary>not equals operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if c 1 != c 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.FMath">
            <summary>math wrapper and convenience functions</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.FMath.E">
            <summary>E</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.FMath.PI">
            <summary>PI</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.FMath.DegToRad">
            <summary>conversion ratio from degrees to radians</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.FMath.RadToDeg">
            <summary>conversion ratio from radians to degrees</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Radians(System.Single)">
            <summary>convert from degrees to radians</summary>
            <param name="x">the value to convert</param>
            <returns>value converted from degrees to radians</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Degrees(System.Single)">
            <summary>convert from radians to degrees</summary>
            <param name="x">the value to convert</param>
            <returns>value converted from radians to degrees</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Sin(System.Single)">
            <summary>equivalent to (float)Math.Sin(x)</summary>
            <param name="x">the value to take the sin of</param>
            <returns>the sin of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Cos(System.Single)">
            <summary>equivalent to (float)Math.Cos(x)</summary>
            <param name="x">the value to take the cos of</param>
            <returns>the cos of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Tan(System.Single)">
            <summary>equivalent to (float)Math.Tan(x)</summary>
            <param name="x">the value to take the tan of</param>
            <returns>the tan of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Asin(System.Single)">
            <summary>equivalent to (float)Math.Asin(x)</summary>
            <param name="x">the value to take the asin of</param>
            <returns>the asin of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Acos(System.Single)">
            <summary>equivalent to (float)Math.Acos(x)</summary>
            <param name="x">the value to take the acos of</param>
            <returns>the acos of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Atan(System.Single)">
            <summary>equivalent to (float)Math.Atan(x)</summary>
            <param name="x">the value to take the atan of</param>
            <returns>the atan of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Atan2(System.Single,System.Single)">
            <summary>equivalent to (float)Math.Atan2(x,y)</summary>
            <param name="x">the x coordinate to take the atan2 of</param>
            <param name="y">the y coordinate to take the atan2 of</param>
            <returns>the atan2 of (x,y)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Sqrt(System.Single)">
            <summary>equivalent to (float)Math.Sqrt(x)</summary>
            <param name="x">the value to take the square root of</param>
            <returns>the square root of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Pow(System.Single,System.Single)">
            <summary>equivalent to (float)Math.Pow(x,y)</summary>
            <param name="x">the value to raise</param>
            <param name="y">the power to raise to</param>
            <returns>x to y power</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Exp(System.Single)">
            <summary>equivalent to (float)Math.Exp(x)</summary>
            <param name="x">the value to take the exp of</param>
            <returns>the exp of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Log(System.Single)">
            <summary>equivalent to (float)Math.Log(x)</summary>
            <param name="x">the value to take the log of</param>
            <returns>the log of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Log10(System.Single)">
            <summary>equivalent to (float)Math.Log10(x)</summary>
            <param name="x">the value to take the log 10 of</param>
            <returns>the log 10 of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Abs(System.Single)">
            <summary>equivalent to Math.Abs(x)</summary>
            <param name="x">the value to take the absolute value of</param>
            <returns>the absolute value of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Sign(System.Single)">
            <summary>equivalent to Math.Sign(x)</summary>
            <param name="x">the value to take the sign of</param>
            <returns>the sign of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Min(System.Single,System.Single)">
            <summary>equivalent to Math.Min(x,y)</summary>
            <param name="x">first input to min</param>
            <param name="y">second input to min</param>
            <returns>the min of x and y</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Max(System.Single,System.Single)">
            <summary>equivalent to Math.Max(x,y)</summary>
            <param name="x">first input to max</param>
            <param name="y">second input to max</param>
            <returns>the max of x and y</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Floor(System.Single)">
            <summary>equivalent to (float)Math.Floor(x)</summary>
            <param name="x">the value to take the floor of</param>
            <returns>the floor of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Ceiling(System.Single)">
            <summary>equivalent to (float)Math.Ceiling(x)</summary>
            <param name="x">the value to take the ceil of</param>
            <returns>the ceil of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Round(System.Single)">
            <summary>equivalent to (float)Math.Round(x)</summary>
            <param name="x">the value to take the round of</param>
            <returns>the round of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Truncate(System.Single)">
            <summary>equivalent to (float)Math.Truncate(x)</summary>
            <param name="x">the value to take the trunc of</param>
            <returns>the trunc of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>clamp between two values</summary>
            <param name="x">the value to clamp</param>
            <param name="min">the min to clamp against</param>
            <param name="max">the max to clamp against</param>
            <returns>x clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Repeat(System.Single,System.Single,System.Single)">
            <summary>repeat between two values</summary>
            <param name="x">the value to repeat</param>
            <param name="min">the min to repeat over</param>
            <param name="max">the max to repeat over</param>
            <returns>x repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Mirror(System.Single,System.Single,System.Single)">
            <summary>repeat shuttlewise between two values</summary>
            <param name="x">the value to repeat</param>
            <param name="min">the min to repeat over</param>
            <param name="max">the max to repeat over</param>
            <returns>x repeated shuttlewise between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Lerp(System.Single,System.Single,System.Single)">
            <summary>lerp between two values</summary>
            <param name="x1">value 1</param>
            <param name="x2">value 2</param>
            <param name="f">lerp amount</param>
            <returns>the result of lerping f between x1 and x2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.MoveTo(System.Single,System.Single,System.Single)">
            <summary>move one value to another value by specified amount</summary>
            <param name="x1">value 1</param>
            <param name="x2">value 2</param>
            <param name="amount">step amount</param>
            <returns>value moved to another value by specified amount</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.FMath.Step(System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.FMath.LinearStep(System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.FMath.SmoothStep(System.Single,System.Single,System.Single)" -->
        <member name="T:Sce.PlayStation.Core.Short4">
            <summary>vector of 4 signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.Equals(Sce.PlayStation.Core.Short4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.op_Equality(Sce.PlayStation.Core.Short4,Sce.PlayStation.Core.Short4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.op_Inequality(Sce.PlayStation.Core.Short4,Sce.PlayStation.Core.Short4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short3">
            <summary>vector of 3 signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 3 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.Equals(Sce.PlayStation.Core.Short3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.op_Equality(Sce.PlayStation.Core.Short3,Sce.PlayStation.Core.Short3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.op_Inequality(Sce.PlayStation.Core.Short3,Sce.PlayStation.Core.Short3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short2">
            <summary>vector of 2 signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.#ctor(System.Int32,System.Int32)">
            <summary>constructor taking 2 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.Equals(Sce.PlayStation.Core.Short2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.op_Equality(Sce.PlayStation.Core.Short2,Sce.PlayStation.Core.Short2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.op_Inequality(Sce.PlayStation.Core.Short2,Sce.PlayStation.Core.Short2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort4">
            <summary>vector of 4 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.Equals(Sce.PlayStation.Core.UShort4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.op_Equality(Sce.PlayStation.Core.UShort4,Sce.PlayStation.Core.UShort4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.op_Inequality(Sce.PlayStation.Core.UShort4,Sce.PlayStation.Core.UShort4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort3">
            <summary>vector of 3 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 3 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.Equals(Sce.PlayStation.Core.UShort3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.op_Equality(Sce.PlayStation.Core.UShort3,Sce.PlayStation.Core.UShort3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.op_Inequality(Sce.PlayStation.Core.UShort3,Sce.PlayStation.Core.UShort3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort2">
            <summary>vector of 2 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.#ctor(System.Int32,System.Int32)">
            <summary>constructor taking 2 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.Equals(Sce.PlayStation.Core.UShort2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.op_Equality(Sce.PlayStation.Core.UShort2,Sce.PlayStation.Core.UShort2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.op_Inequality(Sce.PlayStation.Core.UShort2,Sce.PlayStation.Core.UShort2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte4">
            <summary>vector of 4 signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.Equals(Sce.PlayStation.Core.Byte4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.op_Equality(Sce.PlayStation.Core.Byte4,Sce.PlayStation.Core.Byte4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.op_Inequality(Sce.PlayStation.Core.Byte4,Sce.PlayStation.Core.Byte4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte3">
            <summary>vector of 3 signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 3 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.Equals(Sce.PlayStation.Core.Byte3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.op_Equality(Sce.PlayStation.Core.Byte3,Sce.PlayStation.Core.Byte3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.op_Inequality(Sce.PlayStation.Core.Byte3,Sce.PlayStation.Core.Byte3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte2">
            <summary>vector of 2 signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.#ctor(System.Int32,System.Int32)">
            <summary>constructor taking 2 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.Equals(Sce.PlayStation.Core.Byte2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.op_Equality(Sce.PlayStation.Core.Byte2,Sce.PlayStation.Core.Byte2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.op_Inequality(Sce.PlayStation.Core.Byte2,Sce.PlayStation.Core.Byte2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte4">
            <summary>vector of 4 unsigned bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.Equals(Sce.PlayStation.Core.UByte4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.op_Equality(Sce.PlayStation.Core.UByte4,Sce.PlayStation.Core.UByte4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.op_Inequality(Sce.PlayStation.Core.UByte4,Sce.PlayStation.Core.UByte4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte3">
            <summary>vector of 3 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 3 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.Equals(Sce.PlayStation.Core.UByte3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.op_Equality(Sce.PlayStation.Core.UByte3,Sce.PlayStation.Core.UByte3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.op_Inequality(Sce.PlayStation.Core.UByte3,Sce.PlayStation.Core.UByte3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte2">
            <summary>vector of 2 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.#ctor(System.Int32,System.Int32)">
            <summary>constructor taking 2 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.Equals(Sce.PlayStation.Core.UByte2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.op_Equality(Sce.PlayStation.Core.UByte2,Sce.PlayStation.Core.UByte2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.op_Inequality(Sce.PlayStation.Core.UByte2,Sce.PlayStation.Core.UByte2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short4N">
            <summary>vector of 4 normalized signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4N.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4N.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.Equals(Sce.PlayStation.Core.Short4N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.op_Equality(Sce.PlayStation.Core.Short4N,Sce.PlayStation.Core.Short4N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.op_Inequality(Sce.PlayStation.Core.Short4N,Sce.PlayStation.Core.Short4N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short3N">
            <summary>vector of 3 normalized signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3N.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.Equals(Sce.PlayStation.Core.Short3N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.op_Equality(Sce.PlayStation.Core.Short3N,Sce.PlayStation.Core.Short3N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.op_Inequality(Sce.PlayStation.Core.Short3N,Sce.PlayStation.Core.Short3N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short2N">
            <summary>vector of 2 normalized signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short2N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short2N.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.Equals(Sce.PlayStation.Core.Short2N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.op_Equality(Sce.PlayStation.Core.Short2N,Sce.PlayStation.Core.Short2N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.op_Inequality(Sce.PlayStation.Core.Short2N,Sce.PlayStation.Core.Short2N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.ShortN">
            <summary>a scalar normalized signed short</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.ShortN.Bits">
            <summary>the short data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.#ctor(System.Single)">
            <summary>constructor taking a float to convert to normalized signed short</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.Equals(Sce.PlayStation.Core.ShortN)">
            <summary>equality test</summary>
            <param name="v">the value to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.op_Equality(Sce.PlayStation.Core.ShortN,Sce.PlayStation.Core.ShortN)">
            <summary>equality operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 == value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.op_Inequality(Sce.PlayStation.Core.ShortN,Sce.PlayStation.Core.ShortN)">
            <summary>not equals operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 != value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.op_Implicit(Sce.PlayStation.Core.ShortN)~System.Single">
            <summary>float casting operator</summary>
            <param name="v">the value to convert to float</param>
            <returns>the float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.op_Explicit(System.Single)~Sce.PlayStation.Core.ShortN">
            <summary>normalized signed short casting operator</summary>
            <param name="f">the float to convert to normalized signed short</param>
            <returns>the normalized signed short value</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort4N">
            <summary>vector of 4 normalized unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4N.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4N.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.Equals(Sce.PlayStation.Core.UShort4N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.op_Equality(Sce.PlayStation.Core.UShort4N,Sce.PlayStation.Core.UShort4N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.op_Inequality(Sce.PlayStation.Core.UShort4N,Sce.PlayStation.Core.UShort4N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort3N">
            <summary>vector of 3 normalized unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3N.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.Equals(Sce.PlayStation.Core.UShort3N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.op_Equality(Sce.PlayStation.Core.UShort3N,Sce.PlayStation.Core.UShort3N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.op_Inequality(Sce.PlayStation.Core.UShort3N,Sce.PlayStation.Core.UShort3N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort2N">
            <summary>vector of 2 normalized unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort2N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort2N.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.Equals(Sce.PlayStation.Core.UShort2N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.op_Equality(Sce.PlayStation.Core.UShort2N,Sce.PlayStation.Core.UShort2N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.op_Inequality(Sce.PlayStation.Core.UShort2N,Sce.PlayStation.Core.UShort2N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShortN">
            <summary>a scalar normalized unsigned short</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShortN.Bits">
            <summary>the short data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.#ctor(System.Single)">
            <summary>constructor taking a float to convert to normalized unsigned short</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.Equals(Sce.PlayStation.Core.UShortN)">
            <summary>equality test</summary>
            <param name="v">the value to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.op_Equality(Sce.PlayStation.Core.UShortN,Sce.PlayStation.Core.UShortN)">
            <summary>equality operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 == value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.op_Inequality(Sce.PlayStation.Core.UShortN,Sce.PlayStation.Core.UShortN)">
            <summary>not equals operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 != value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.op_Implicit(Sce.PlayStation.Core.UShortN)~System.Single">
            <summary>float casting operator</summary>
            <param name="v">the value to convert to float</param>
            <returns>the float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.op_Explicit(System.Single)~Sce.PlayStation.Core.UShortN">
            <summary>normalized unsigned short casting operator</summary>
            <param name="f">the float to convert to normalized unsigned short</param>
            <returns>the normalized unsigned short value</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte4N">
            <summary>vector of 4 normalized signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4N.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4N.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.Equals(Sce.PlayStation.Core.Byte4N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.op_Equality(Sce.PlayStation.Core.Byte4N,Sce.PlayStation.Core.Byte4N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.op_Inequality(Sce.PlayStation.Core.Byte4N,Sce.PlayStation.Core.Byte4N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte3N">
            <summary>vector of 3 normalized signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3N.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.Equals(Sce.PlayStation.Core.Byte3N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.op_Equality(Sce.PlayStation.Core.Byte3N,Sce.PlayStation.Core.Byte3N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.op_Inequality(Sce.PlayStation.Core.Byte3N,Sce.PlayStation.Core.Byte3N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte2N">
            <summary>vector of 2 normalized signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte2N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte2N.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.Equals(Sce.PlayStation.Core.Byte2N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.op_Equality(Sce.PlayStation.Core.Byte2N,Sce.PlayStation.Core.Byte2N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.op_Inequality(Sce.PlayStation.Core.Byte2N,Sce.PlayStation.Core.Byte2N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.ByteN">
            <summary>a scalar normalized signed byte</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.ByteN.Bits">
            <summary>the byte data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.#ctor(System.Single)">
            <summary>constructor taking a float to convert to normalized signed byte</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.Equals(Sce.PlayStation.Core.ByteN)">
            <summary>equality test</summary>
            <param name="v">the value to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.op_Equality(Sce.PlayStation.Core.ByteN,Sce.PlayStation.Core.ByteN)">
            <summary>equality operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 == value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.op_Inequality(Sce.PlayStation.Core.ByteN,Sce.PlayStation.Core.ByteN)">
            <summary>not equals operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 != value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.op_Implicit(Sce.PlayStation.Core.ByteN)~System.Single">
            <summary>float casting operator</summary>
            <param name="v">the value to convert to float</param>
            <returns>the float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.op_Explicit(System.Single)~Sce.PlayStation.Core.ByteN">
            <summary>normalized signed byte casting operator</summary>
            <param name="f">the float to convert to normalized signed byte</param>
            <returns>the normalized signed byte value</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte4N">
            <summary>vector of 4 normalized unsigned bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4N.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4N.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.Equals(Sce.PlayStation.Core.UByte4N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.op_Equality(Sce.PlayStation.Core.UByte4N,Sce.PlayStation.Core.UByte4N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.op_Inequality(Sce.PlayStation.Core.UByte4N,Sce.PlayStation.Core.UByte4N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte3N">
            <summary>vector of 3 normalized unsigned bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3N.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.Equals(Sce.PlayStation.Core.UByte3N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.op_Equality(Sce.PlayStation.Core.UByte3N,Sce.PlayStation.Core.UByte3N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.op_Inequality(Sce.PlayStation.Core.UByte3N,Sce.PlayStation.Core.UByte3N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte2N">
            <summary>vector of 2 normalized unsigned bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte2N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte2N.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.Equals(Sce.PlayStation.Core.UByte2N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.op_Equality(Sce.PlayStation.Core.UByte2N,Sce.PlayStation.Core.UByte2N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.op_Inequality(Sce.PlayStation.Core.UByte2N,Sce.PlayStation.Core.UByte2N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByteN">
            <summary>a scalar normalized unsigned byte</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByteN.Bits">
            <summary>the byte data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.#ctor(System.Single)">
            <summary>constructor taking a float to convert to normalized unsigned byte</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.Equals(Sce.PlayStation.Core.UByteN)">
            <summary>equality test</summary>
            <param name="v">the value to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.op_Equality(Sce.PlayStation.Core.UByteN,Sce.PlayStation.Core.UByteN)">
            <summary>equality operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 == value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.op_Inequality(Sce.PlayStation.Core.UByteN,Sce.PlayStation.Core.UByteN)">
            <summary>not equals operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 != value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.op_Implicit(Sce.PlayStation.Core.UByteN)~System.Single">
            <summary>float casting operator</summary>
            <param name="v">the value to convert to float</param>
            <returns>the float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.op_Explicit(System.Single)~Sce.PlayStation.Core.UByteN">
            <summary>normalized unsigned byte casting operator</summary>
            <param name="f">the float to convert to normalized unsigned byte</param>
            <returns>the normalized unsigned byte value</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Half4">
            <summary>vector of 4 halfs</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.Equals(Sce.PlayStation.Core.Half4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.op_Equality(Sce.PlayStation.Core.Half4,Sce.PlayStation.Core.Half4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.op_Inequality(Sce.PlayStation.Core.Half4,Sce.PlayStation.Core.Half4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Half3">
            <summary>vector of 3 halfs</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.Equals(Sce.PlayStation.Core.Half3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.op_Equality(Sce.PlayStation.Core.Half3,Sce.PlayStation.Core.Half3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.op_Inequality(Sce.PlayStation.Core.Half3,Sce.PlayStation.Core.Half3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Half2">
            <summary>vector of 2 halfs</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.Equals(Sce.PlayStation.Core.Half2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.op_Equality(Sce.PlayStation.Core.Half2,Sce.PlayStation.Core.Half2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.op_Inequality(Sce.PlayStation.Core.Half2,Sce.PlayStation.Core.Half2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Half">
            <summary>a scalar half</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half.Bits">
            <summary>the half data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.#ctor(System.Single)">
            <summary>constructor taking a float to convert to half</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.Equals(Sce.PlayStation.Core.Half)">
            <summary>equality test</summary>
            <param name="h">the half to compare this to</param>
            <returns>true if this == h, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.op_Equality(Sce.PlayStation.Core.Half,Sce.PlayStation.Core.Half)">
            <summary>equality operator</summary>
            <param name="h1">half 1</param>
            <param name="h2">half 2</param>
            <returns>true if half 1 == half 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.op_Inequality(Sce.PlayStation.Core.Half,Sce.PlayStation.Core.Half)">
            <summary>not equals operator</summary>
            <param name="h1">half 1</param>
            <param name="h2">half 2</param>
            <returns>true if half 1 != half 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.op_Implicit(Sce.PlayStation.Core.Half)~System.Single">
            <summary>float casting operator</summary>
            <param name="h">the half to convert to float</param>
            <returns>the float value of the half</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.op_Explicit(System.Single)~Sce.PlayStation.Core.Half">
            <summary>half casting operator</summary>
            <param name="f">the float to convert to half</param>
            <returns>the half value of the float</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Matrix4">
            <summary>matrix of 16 floats</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M11">
            <summary>column 1, element 1</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M12">
            <summary>column 1, element 2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M13">
            <summary>column 1, element 3</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M14">
            <summary>column 1, element 4</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M21">
            <summary>column 2, element 1</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M22">
            <summary>column 2, element 2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M23">
            <summary>column 2, element 3</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M24">
            <summary>column 2, element 4</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M31">
            <summary>column 3, element 1</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M32">
            <summary>column 3, element 2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M33">
            <summary>column 3, element 3</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M34">
            <summary>column 3, element 4</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M41">
            <summary>column 4, element 1</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M42">
            <summary>column 4, element 2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M43">
            <summary>column 4, element 3</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M44">
            <summary>column 4, element 4</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.Zero">
            <summary>a matrix of all zeroes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.Identity">
            <summary>identity matrix</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>matrix constructor taking 16 scalar floats</summary>
            <param name="m11">value to initialize column 1 element 1 with</param>
            <param name="m12">value to initialize column 1 element 2 with</param>
            <param name="m13">value to initialize column 1 element 3 with</param>
            <param name="m14">value to initialize column 1 element 4 with</param>
            <param name="m21">value to initialize column 2 element 1 with</param>
            <param name="m22">value to initialize column 2 element 2 with</param>
            <param name="m23">value to initialize column 2 element 3 with</param>
            <param name="m24">value to initialize column 2 element 4 with</param>
            <param name="m31">value to initialize column 3 element 1 with</param>
            <param name="m32">value to initialize column 3 element 2 with</param>
            <param name="m33">value to initialize column 3 element 3 with</param>
            <param name="m34">value to initialize column 3 element 4 with</param>
            <param name="m41">value to initialize column 4 element 1 with</param>
            <param name="m42">value to initialize column 4 element 2 with</param>
            <param name="m43">value to initialize column 4 element 3 with</param>
            <param name="m44">value to initialize column 4 element 4 with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.#ctor(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>matrix constructor initializing the 4 matrix column vectors</summary>
            <param name="x">vector to initialize matrix column 1 with</param>
            <param name="y">vector to initialize matrix column 2 with</param>
            <param name="z">vector to initialize matrix column 3 with</param>
            <param name="w">vector to initialize matrix column 4 with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.#ctor(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>matrix constructor initializing the 4 matrix column vectors</summary>
            <param name="x">vector to initialize matrix column 1 with</param>
            <param name="y">vector to initialize matrix column 2 with</param>
            <param name="z">vector to initialize matrix column 3 with</param>
            <param name="w">vector to initialize matrix column 4 with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Determinant">
            <summary>return the determinant of this matrix</summary>
            <returns>the determinant of this matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transpose">
            <summary>get the transpose of the matrix</summary>
            <returns>matrix transpose</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transpose(Sce.PlayStation.Core.Matrix4@)">
            <summary>get the transpose of the matrix</summary>
            <param name="result">matrix transpose</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Inverse">
            <summary>inverse for a matrix</summary>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Inverse(Sce.PlayStation.Core.Matrix4@)">
            <summary>inverse for a matrix</summary>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseAffine">
            <summary>inverse for an affine matrix</summary>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseAffine(Sce.PlayStation.Core.Matrix4@)">
            <summary>inverse for an affine matrix</summary>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseOrthonormal">
            <summary>inverse for a orthonormal martix</summary>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseOrthonormal(Sce.PlayStation.Core.Matrix4@)">
            <summary>inverse for a orthonormal matrix</summary>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Orthonormalize">
            <summary>orthonormalize a matrix</summary>
            <returns>orthonormalized matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Orthonormalize(Sce.PlayStation.Core.Matrix4@)">
            <summary>orthonormalize a matrix</summary>
            <param name="result">orthonormalized matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transform(Sce.PlayStation.Core.Vector4)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transform(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v (X,Y,Z,1)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,Z,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v (X,Y,Z,1)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,Z,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v (X,Y,0,1)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,0,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v (X,Y,0,1)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,0,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v (X,Y,Z,0)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,Z,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v (X,Y,Z,0)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,Z,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v (X,Y,0,0)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,0,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v (X,Y,0,0)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,0,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector4)">
            <summary>return this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <returns>this * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <param name="result">this * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <returns>this * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <param name="result">this * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <returns>this * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <param name="result">this * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Add(Sce.PlayStation.Core.Matrix4)">
            <summary>return this + m</summary>
            <param name="m">matrix</param>
            <returns>this + m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Add(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this + m</summary>
            <param name="m">matrix</param>
            <param name="result">this + m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Subtract(Sce.PlayStation.Core.Matrix4)">
            <summary>return this - m</summary>
            <param name="m">matrix</param>
            <returns>this - m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Subtract(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this - m</summary>
            <param name="m">matrix</param>
            <param name="result">this - m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4)">
            <summary>return this * m</summary>
            <param name="m">matrix</param>
            <returns>this * m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this * m</summary>
            <param name="m">matrix</param>
            <param name="result">this * m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.MultiplyAffine(Sce.PlayStation.Core.Matrix4)">
            <summary>return this * m ( for affine matrices )</summary>
            <param name="m">matrix</param>
            <returns>this * m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.MultiplyAffine(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this * m ( for affine matrices )</summary>
            <param name="m">matrix</param>
            <param name="result">this * m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Divide(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Negate(Sce.PlayStation.Core.Matrix4@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.IsOrthonormal(System.Single)">
            <summary>test to determine if a matrix is orthonormal</summary>
            <param name="epsilon">epsilon for testing if vectors are unit vectors</param>
            <returns>true if the matrix is orthonormal, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.IsIdentity">
            <summary>test if this is an identity matrix</summary>
            <returns>true if this is an identity matrix, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Matrix4.Equals(Sce.PlayStation.Core.Matrix4,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Matrix4.Equals(Sce.PlayStation.Core.Matrix4)">
            <summary>equality test</summary>
            <param name="m">the matrix to compare this to</param>
            <returns>true if this == m, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.ToString">
            <summary>convert matrix to string for printing</summary>
            <returns>matrix as string</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Vector3)">
            <summary>gets translation matrix times rotation matrix times scale matrix</summary>
            <param name="translation">x, y, z translation values</param>
            <param name="rotation">quaternion rotation values</param>
            <param name="scale">x, y, z scale values</param>
            <returns>translation matrix times rotation matrix times scale matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets translation matrix times rotation matrix times scale matrix</summary>
            <param name="translation">x, y, z translation values</param>
            <param name="rotation">quaternion rotation values</param>
            <param name="scale">x, y, z scale values</param>
            <param name="result">translation matrix times rotation matrix times scale matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector2,System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>gets translation matrix times rotation matrix times scale matrix</summary>
            <param name="translation">x, y translation values</param>
            <param name="rotation">z rotation angle</param>
            <param name="scale">x, y scale values</param>
            <returns>translation matrix times rotation matrix times scale matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets translation matrix times rotation matrix times scale matrix</summary>
            <param name="translation">x, y translation values</param>
            <param name="rotation">z rotation angle</param>
            <param name="scale">x, y scale values</param>
            <param name="result">translation matrix times rotation matrix times scale matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>gets translation matrix times scale matrix</summary>
            <param name="translation">x, y, z translation values</param>
            <param name="scale">x, y, z scale values</param>
            <returns>translation matrix times scale matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets translation matrix times scale matrix</summary>
            <param name="translation">x, y, z translation values</param>
            <param name="scale">x, y, z scale values</param>
            <param name="result">translation matrix times scale matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>gets translation matrix times scale matrix</summary>
            <param name="translation">x, y translation values</param>
            <param name="scale">x, y scale values</param>
            <returns>translation matrix times scale matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets translation matrix times scale matrix</summary>
            <param name="translation">x, y translation values</param>
            <param name="scale">x, y scale values</param>
            <param name="result">translation matrix times scale matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>get a matrix for translating a point</summary>
            <param name="x">x translation</param>
            <param name="y">y translation</param>
            <param name="z">z translation</param>
            <returns>translation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for translating a point</summary>
            <param name="x">x translation</param>
            <param name="y">y translation</param>
            <param name="z">z translation</param>
            <param name="result">translation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(Sce.PlayStation.Core.Vector3)">
            <summary>get a matrix for translating a point</summary>
            <param name="translation">a vector containing the x, y, z translation values</param>
            <returns>translation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for translating a point</summary>
            <param name="translation">a vector containing the x, y, z translation values</param>
            <param name="result">translation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(Sce.PlayStation.Core.Vector2)">
            <summary>get a matrix for translating a point</summary>
            <param name="translation">a vector containing the x, y translation values</param>
            <returns>translation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for translating a point</summary>
            <param name="translation">a vector containing the x, y translation values</param>
            <param name="result">translation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationAxis(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>gets the matrix for rotating about an axis</summary>
            <param name="axis">the axis to rotate around</param>
            <param name="angle">the angle to rotate</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationAxis(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets the matrix for rotating about an axis</summary>
            <param name="axis">the axis to rotate around</param>
            <param name="angle">the angle to rotate</param>
            <param name="result">rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationX(System.Single)">
            <summary>gets a matrix for rotating around the x axis</summary>
            <param name="angle">the angle to rotate</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationX(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a matrix for rotating around the x axis</summary>
            <param name="angle">the angle to rotate</param>
            <param name="result">rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationY(System.Single)">
            <summary>gets a matrix for rotating around the y axis</summary>
            <param name="angle">the angle to rotate</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationY(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a matrix for rotating around the y axis</summary>
            <param name="angle">the angle to rotate</param>
            <param name="result">rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZ(System.Single)">
            <summary>gets a matrix for rotating around the z axis</summary>
            <param name="angle">the angle to rotate</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZ(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a matrix for rotating around the z axis</summary>
            <param name="angle">the angle to rotate</param>
            <param name="result">rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZyx(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZyx(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZyx(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the z, y, x euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZyx(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the z, y, x euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYxz(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYxz(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYxz(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the y, x, z euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYxz(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the y, x, z euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXzy(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXzy(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXzy(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the x, z, y euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXzy(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the x, z, y euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXyz(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXyz(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXyz(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the x, y, z euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXyz(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the x, y, z euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYzx(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYzx(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYzx(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the y, z, x euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYzx(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the y, z, x euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZxy(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZxy(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZxy(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the z, x, y euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZxy(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the z, x, y euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>get a matrix for scaling a point</summary>
            <param name="x">x scale</param>
            <param name="y">y scale</param>
            <param name="z">z scale</param>
            <returns>scaling matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for scaling a point</summary>
            <param name="x">x scale</param>
            <param name="y">y scale</param>
            <param name="z">z scale</param>
            <param name="result">scaling matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(Sce.PlayStation.Core.Vector3)">
            <summary>get a matrix for scaling a point</summary>
            <param name="scale">a vector containing the x, y, z scale values</param>
            <returns>scaling matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for scaling a point</summary>
            <param name="scale">a vector containing the x, y, z scale values</param>
            <param name="result">scaling matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(Sce.PlayStation.Core.Vector2)">
            <summary>get a matrix for scaling a point</summary>
            <param name="scale">a vector containing the x, y scale values</param>
            <returns>scaling matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for scaling a point</summary>
            <param name="scale">a vector containing the x, y scale values</param>
            <param name="result">scaling matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>gets a perspective matrix</summary>
            <param name="fovy">field of view angle in the y direction</param>
            <param name="aspect">aspect ratio</param>
            <param name="n">distance from the viewer to the near clip</param>
            <param name="f">distance from the viewer to the far clip</param>
            <returns>perspective matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a perspective matrix</summary>
            <param name="fovy">field of view angle in the y direction</param>
            <param name="aspect">aspect ratio</param>
            <param name="n">distance from the viewer to the near clip</param>
            <param name="f">distance from the viewer to the far clip</param>
            <param name="result">perspective matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>gets a perspective matrix</summary>
            <param name="l">coordinates for the left vertical clip plane</param>
            <param name="r">coordinates for the right vertical clip plane</param>
            <param name="b">coordinates for the bottom horizontal clip plane</param>
            <param name="t">coordinates for the top horizontal clip plane</param>
            <param name="n">distance to the near clip plane</param>
            <param name="f">distance to the far clip plane</param>
            <returns>perspective matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a perspective matrix</summary>
            <param name="l">coordinates for the left vertical clip plane</param>
            <param name="r">coordinates for the right vertical clip plane</param>
            <param name="b">coordinates for the bottom horizontal clip plane</param>
            <param name="t">coordinates for the top horizontal clip plane</param>
            <param name="n">distance to the near clip plane</param>
            <param name="f">distance to the far clip plane</param>
            <param name="result">perspective matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>gets an orthographic matrix</summary>
            <param name="l">coordinates for the left vertical clip plane</param>
            <param name="r">coordinates for the right vertical clip plane</param>
            <param name="b">coordinates for the bottom horizontal clip plane</param>
            <param name="t">coordinates for the top horizontal clip plane</param>
            <param name="n">distance to the near clip plane</param>
            <param name="f">distance to the far clip plane</param>
            <returns>orthographic matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets an orthographic matrix</summary>
            <param name="l">coordinates for the left vertical clip plane</param>
            <param name="r">coordinates for the right vertical clip plane</param>
            <param name="b">coordinates for the bottom horizontal clip plane</param>
            <param name="t">coordinates for the top horizontal clip plane</param>
            <param name="n">distance to the near clip plane</param>
            <param name="f">distance to the far clip plane</param>
            <param name="result">orthographic matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.LookAt(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>gets the matrix for a viewing transformation</summary>
            <param name="eye">position of the eye point</param>
            <param name="center">position of the reference point</param>
            <param name="up">the up vector</param>
            <returns>viewing transformation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.LookAt(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets the matrix for a viewing transformation</summary>
            <param name="eye">position of the eye point</param>
            <param name="center">position of the reference point</param>
            <param name="up">the up vector</param>
            <param name="result">viewing transformation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Determinant(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Determinant()</summary>
            <param name="m">matrix</param>
            <returns>the determinant of this matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Determinant(Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Determinant()</summary>
            <param name="m">matrix</param>
            <returns>the determinant of this matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transpose(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Transpose()</summary>
            <param name="m">matrix</param>
            <returns>matrix transpose</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transpose(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Transpose(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">matrix transpose</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Inverse(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Inverse()</summary>
            <param name="m">matrix</param>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Inverse(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Inverse(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseAffine(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to InverseAffine()</summary>
            <param name="m">matrix</param>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseAffine(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to InverseAffine(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseOrthonormal(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to InverseOrthonormal()</summary>
            <param name="m">matrix</param>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseOrthonormal(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to InverseOrthonormal(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Orthonormalize(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Orthonormalize()</summary>
            <param name="m">matrix</param>
            <returns>orthonormalized matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Orthonormalize(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Orthonormalize(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">orthonormalized matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transform(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Transform(Vector4)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transform(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Transform(ref Vector4, out Vector4)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to TransformPoint(Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v (X,Y,Z,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to TransformPoint(ref Vector3, out Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v (X,Y,Z,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformPoint(Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v (X,Y,0,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformPoint(ref Vector2, out Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v (X,Y,0,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to TransformVector(Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v (X,Y,Z,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to TransformVector(ref Vector3, out Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v (X,Y,Z,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformVector(Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v (X,Y,0,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformVector(ref Vector2, out Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v (X,Y,0,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to TransformProjection(Vector4)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to TransformProjection(ref Vector4, out Vector4)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to TransformProjection(Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to TransformProjection(ref Vector3, out Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformProjection(Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformProjection(ref Vector2, out Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Add(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Add(Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>m1 + m2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Add(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Add(ref Matrix4, out Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <param name="result">m1 + m2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Subtract(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Subtract(Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>m1 - m2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Subtract(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Subtract(ref Matrix4, out Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <param name="result">m1 - m2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Multiply(Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>m1 * m2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Multiply(ref Matrix4, out Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <param name="result">m1 * m2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.MultiplyAffine(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to MultiplyAffine(Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>m1 * m2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.MultiplyAffine(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to MultiplyAffine(ref Matrix4, out Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <param name="result">m1 * m2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="m">matrix</param>
            <param name="f">scalar</param>
            <returns>m * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4@,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Multiply(float, out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="f">scalar</param>
            <param name="result">m * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Divide(Sce.PlayStation.Core.Matrix4,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="m">matrix</param>
            <param name="f">scalar</param>
            <returns>m / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Divide(Sce.PlayStation.Core.Matrix4@,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Divide(float, out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="f">scalar</param>
            <param name="result">m / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Negate(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Negate()</summary>
            <param name="m">matrix</param>
            <returns>-m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Negate(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Negate(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">-m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Equality(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator to test if two matrices are equal</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>true is equal, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Inequality(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator to test if two matrices are not equal</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>true if not equal, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Addition(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator adding each element of matrix 1 to the corresponding element of matrix 2</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Subtraction(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator subtracting each element of matrix 2 from the corresponding element of matrix 1</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>matrix 1 - matrix 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_UnaryNegation(Sce.PlayStation.Core.Matrix4)">
            <summary>unary minus operator</summary>
            <param name="m">matrix to negate</param>
            <returns>unary minus applied to each member of m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Multiply(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator multiplying a matrix by a matrix</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Multiply(Sce.PlayStation.Core.Matrix4,System.Single)">
            <summary>operator multiplying each matrix element by a scalar float value</summary>
            <param name="m">the matrix to multiply</param>
            <param name="f">the scalar float to multiply each matrix element by</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Multiply(System.Single,Sce.PlayStation.Core.Matrix4)">
            <summary>operator multiplying each matrix element by a scalar float value</summary>
            <param name="f">the scalar float to multiply each matrix element by</param>
            <param name="m">the matrix to multiply</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Multiply(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector4)">
            <summary>operator multiplying a matrix by a vector</summary>
            <param name="m">the matrix to multiply</param>
            <param name="v">the vector to multiply the matrix by</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Division(Sce.PlayStation.Core.Matrix4,System.Single)">
            <summary>operator dividing each matrix element by a scalar float value</summary>
            <param name="m">the matrix to divide</param>
            <param name="f">the scalar float to divide each element by</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.ColumnX">
            <summary>the first column in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.ColumnY">
            <summary>the second column in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.ColumnZ">
            <summary>the third column in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.ColumnW">
            <summary>the fourth column in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.RowX">
            <summary>the first row in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.RowY">
            <summary>the second row in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.RowZ">
            <summary>the third row in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.RowW">
            <summary>the fourth row in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.AxisX">
            <summary>XYZ components of ColumnX</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.AxisY">
            <summary>XYZ components of ColumnY</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.AxisZ">
            <summary>XYZ components of ColumnZ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.AxisW">
            <summary>XYZ components of ColumnW</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Quaternion">
            <summary>quaternion</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.W">
            <summary>W</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.Identity">
            <summary>identity quaternion</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.#ctor(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>constructor taking a Vector3 and a scalar float</summary>
            <param name="xyz">the x, y, z values to init with</param>
            <param name="w">the w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Length">
            <summary>return the length of this quaternion</summary>
            <returns>the length of this quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.LengthSquared">
            <summary>return the length squared of this quaternion</summary>
            <returns>the length squared of this quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Dot(Sce.PlayStation.Core.Quaternion)">
            <summary>dot product</summary>
            <param name="q">quaternion to take the dot product with</param>
            <returns>dot product of this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Dot(Sce.PlayStation.Core.Quaternion@)">
            <summary>dot product</summary>
            <param name="q">quaternion to take the dot product with</param>
            <returns>dot product of this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Normalize">
            <summary>return a unit quaternion</summary>
            <returns>this as a unit quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Normalize(Sce.PlayStation.Core.Quaternion@)">
            <summary>return a unit quaternion</summary>
            <param name="result">this as a unit quaternion</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Conjugate">
            <summary>quaternion conjugate</summary>
            <returns>quaternion conjugate</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Conjugate(Sce.PlayStation.Core.Quaternion@)">
            <summary>quaternion conjugate</summary>
            <param name="result">quaternion conjugate</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Inverse">
            <summary>quaternion inverse</summary>
            <returns>quaternion inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Inverse(Sce.PlayStation.Core.Quaternion@)">
            <summary>quaternion inverse</summary>
            <param name="result">quaternion inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Slerp(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>slerp between 2 quaternions</summary>
            <param name="q">second quaternion</param>
            <param name="f">slerp amount</param>
            <returns>slerp between this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Slerp(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>slerp between 2 quaternions</summary>
            <param name="q">second quaternion</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between this and q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Lerp(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>lerp between 2 quaternions</summary>
            <param name="q">second quaternion</param>
            <param name="f">lerp amount</param>
            <returns>lerp between this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Lerp(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>lerp between 2 quaternions</summary>
            <param name="q">second quaternion</param>
            <param name="f">lerp amount</param>
            <param name="result">lerp between this and q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Log">
            <summary>quaternion log</summary>
            <returns>quaternion log</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Log(Sce.PlayStation.Core.Quaternion@)">
            <summary>quaternion log</summary>
            <param name="result">quaternion log</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Exp">
            <summary>quaternion exp</summary>
            <returns>quaternion exp</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Exp(Sce.PlayStation.Core.Quaternion@)">
            <summary>quaternion exp</summary>
            <param name="result">quaternion exp</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.TurnTo(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>turn to target quaternion by specified angle</summary>
            <param name="q">target quaternion</param>
            <param name="angle">step angle</param>
            <returns>a new quaternion turned to target quaternion by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.TurnTo(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>turn to target quaternion by specified angle</summary>
            <param name="q">target quaternion</param>
            <param name="angle">step angle</param>
            <param name="result">a new quaternion turned to target quaternion by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Angle(Sce.PlayStation.Core.Quaternion)">
            <summary>get the angle between this and the input quaternion</summary>
            <param name="q">the quaternion to get the angle to</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Angle(Sce.PlayStation.Core.Quaternion@)">
            <summary>get the angle between this and the input quaternion</summary>
            <param name="q">the quaternion to get the angle to</param>
            <returns>the angle between this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector4)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Add(Sce.PlayStation.Core.Quaternion)">
            <summary>return this + q</summary>
            <param name="q">quaternion</param>
            <returns>this + q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Add(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this + q</summary>
            <param name="q">quaternion</param>
            <param name="result">this + q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Subtract(Sce.PlayStation.Core.Quaternion)">
            <summary>return this - q</summary>
            <param name="q">quaternion</param>
            <returns>this - q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Subtract(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this - q</summary>
            <param name="q">quaternion</param>
            <param name="result">this - q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion)">
            <summary>return this * q</summary>
            <param name="q">quaternion</param>
            <returns>this * q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this * q</summary>
            <param name="q">quaternion</param>
            <param name="result">this * q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Divide(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Negate(Sce.PlayStation.Core.Quaternion@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToVector4">
            <summary>return the quaternion as a Vector4</summary>
            <returns>the quaternion as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToVector4(Sce.PlayStation.Core.Vector4@)">
            <summary>return the quaternion as a Vector4</summary>
            <param name="result">the quaternion as a Vector4</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToMatrix4">
            <summary>convert this quaternion to a Matrix4</summary>
            <returns>Matrix4 representation of this quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToMatrix4(Sce.PlayStation.Core.Matrix4@)">
            <summary>convert this quaternion to a Matrix4</summary>
            <param name="result">Matrix4 representation of this quaternion</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToAxisAngle(Sce.PlayStation.Core.Vector3@,System.Single@)">
            <summary>extract the rotation axis and angle from this quaternion</summary>
            <param name="axis">the rotation axis</param>
            <param name="angle">the rotation angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.IsUnit(System.Single)">
            <summary>test if this is a unit quaternion</summary>
            <param name="epsilon">epsilon used in testing</param>
            <returns>true if this is a unit quaternion, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.IsIdentity">
            <summary>test if this is an identity quaternion</summary>
            <returns>true if this is an identity quaternion, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Quaternion.Equals(Sce.PlayStation.Core.Quaternion,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Quaternion.Equals(Sce.PlayStation.Core.Quaternion)">
            <summary>equality test</summary>
            <param name="q">the quaternion to compare this to</param>
            <returns>true if this == q, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToString">
            <summary>get the string representation of this quaternion</summary>
            <returns>the string representation of this quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.FromMatrix4(Sce.PlayStation.Core.Matrix4)">
            <summary>return a quaternion representing a rotation matrix</summary>
            <param name="m">matrix to form the quaternion out of</param>
            <returns>a quaternion representing a rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.FromMatrix4(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation matrix</summary>
            <param name="m">matrix to form the quaternion out of</param>
            <param name="result">a quaternion representing a rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationAxis(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>return a quaternion representing a rotation about an arbitrary axis</summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">the angle to rotate</param>
            <returns>a quaternion representing a rotation about an arbitrary axis</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationAxis(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation about an arbitrary axis</summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">the angle to rotate</param>
            <param name="result">a quaternion representing a rotation about an arbitrary axis</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationX(System.Single)">
            <summary>return a quaternion representing a rotation about the x axis</summary>
            <param name="angle">the angle to rotate by</param>
            <returns>a quaternion representing a rotation about the x axis</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationX(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation about the x axis</summary>
            <param name="angle">the angle to rotate by</param>
            <param name="result">a quaternion representing a rotation about the x axis</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationY(System.Single)">
            <summary>return a quaternion representing a rotation about the y axis</summary>
            <param name="angle">the angle to rotate by</param>
            <returns>a quaternion representing a rotation about the y axis</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationY(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation about the y axis</summary>
            <param name="angle">the angle to rotate by</param>
            <param name="result">a quaternion representing a rotation about the y axis</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZ(System.Single)">
            <summary>return a quaternion representing a rotation about the z axis</summary>
            <param name="angle">the angle to rotate by</param>
            <returns>a quaternion representing a rotation about the z axis</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZ(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation about the z axis</summary>
            <param name="angle">the angle to rotate by</param>
            <param name="result">a quaternion representing a rotation about the z axis</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZyx(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZyx(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZyx(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the z, y, x euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZyx(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the z, y, x euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYxz(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYxz(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYxz(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the y, x, z euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYxz(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the y, x, z euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXzy(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXzy(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXzy(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the x, z, y euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXzy(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the x, z, y euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXyz(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXyz(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXyz(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the x, y, z euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXyz(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the x, y, z euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYzx(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYzx(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYzx(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the y, z, x euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYzx(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the y, z, x euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZxy(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZxy(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZxy(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the z, x, y euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZxy(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the z, x, y euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Length(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Length()</summary>
            <param name="q">quaternion</param>
            <returns>the length of quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Length(Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Length()</summary>
            <param name="q">quaternion</param>
            <returns>the length of quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.LengthSquared(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="q">quaternion</param>
            <returns>the length squared of quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.LengthSquared(Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="q">quaternion</param>
            <returns>the length squared of quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Dot(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Dot(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>dot product of q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Dot(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Dot(ref Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>dot product of q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Normalize(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Normalize()</summary>
            <param name="q">quaternion</param>
            <returns>q as a unit quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Normalize(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Normalize(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">q as a unit quaternion</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Conjugate(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Conjugate()</summary>
            <param name="q">quaternion</param>
            <returns>quaternion conjugate</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Conjugate(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Conjugate(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">quaternion conjugate</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Inverse(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Inverse()</summary>
            <param name="q">quaternion</param>
            <returns>quaternion inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Inverse(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Inverse(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">quaternion inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Slerp(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to Slerp(Quaternion, float)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="f">slerp amount</param>
            <returns>slerp between q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Slerp(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Slerp(ref Quaternion, float, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between q1 and q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Lerp(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to Lerp(Quaternion, float)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="f">lerp amount</param>
            <returns>lerp between q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Lerp(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Lerp(ref Quaternion, float, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="f">lerp amount</param>
            <param name="result">lerp between q1 and q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Log(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Log()</summary>
            <param name="q">quaternion</param>
            <returns>quaternion log</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Log(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Log(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">quaternion log</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Exp(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Exp()</summary>
            <param name="q">quaternion</param>
            <returns>quaternion exp</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Exp(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Exp(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">quaternion exp</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.TurnTo(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to TurnTo(Quaternion, float)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="angle">step angle</param>
            <returns>a new quaternion turned to target quaternion by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.TurnTo(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to TurnTo(ref Quaternion, float, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="angle">step angle</param>
            <param name="result">a new quaternion turned to target quaternion by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Angle(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Angle(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>the angle between q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Angle(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Angle(ref Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>the angle between q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Transform(Vector4)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <returns>q * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Transform(ref Vector4, out Vector4)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <param name="result">q * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Transform(Vector3)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <returns>q * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Transform(ref Vector3, out Vector3)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <param name="result">q * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Transform(Vector2)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <returns>q * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Transform(ref Vector2, out Vector2)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <param name="result">q * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Add(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Add(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>q1 + q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Add(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Add(ref Quaternion, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="result">q1 + q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Subtract(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Subtract(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>q1 - q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Subtract(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Subtract(ref Quaternion, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="result">q1 - q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Multiply(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>q1 * q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Multiply(ref Quaternion, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="result">q1 * q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="q">quaternion</param>
            <param name="f">scalar</param>
            <returns>q * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Multiply(float, out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="f">scalar</param>
            <param name="result">q * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Divide(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="q">quaternion</param>
            <param name="f">scalar</param>
            <returns>q / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Divide(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Divide(float, out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="f">scalar</param>
            <param name="result">q / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Negate(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Negate()</summary>
            <param name="q">quaternion</param>
            <returns>-q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Negate(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Negate(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">-q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Equality(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>equality operator</summary>
            <param name="q1">first quaternion to compare</param>
            <param name="q2">second quaternion to compare</param>
            <returns>true if q1 == q2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Inequality(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>not equals operator</summary>
            <param name="q1">first quaternion to compare</param>
            <param name="q2">second quaternion to compare</param>
            <returns>true if q1 != q2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Addition(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>addition operator</summary>
            <param name="q1">first quaternion to add</param>
            <param name="q2">second quaternion to add</param>
            <returns>q1 + q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Subtraction(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>subtraction operator</summary>
            <param name="q1">value to subtract from</param>
            <param name="q2">value to subtract</param>
            <returns>q1 - q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_UnaryNegation(Sce.PlayStation.Core.Quaternion)">
            <summary>unary minus operator</summary>
            <param name="q">quaternion to negate</param>
            <returns>unary minus applied to each member of q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Multiply(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>multiplication operator</summary>
            <param name="q1">first value to multiply</param>
            <param name="q2">second value to multiply</param>
            <returns>q1 * q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Multiply(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>multiply a quaternion by a scalar float</summary>
            <param name="q">quaternion to multiply</param>
            <param name="f">float to multiply by</param>
            <returns>q * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Multiply(System.Single,Sce.PlayStation.Core.Quaternion)">
            <summary>multiply a quaternion by a scalar float</summary>
            <param name="f">float to multiply by</param>
            <param name="q">quaternion to multiply</param>
            <returns>f * q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Division(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>division operator</summary>
            <param name="q">quaternion to divide</param>
            <param name="f">scalar float value to divide by</param>
            <returns>q / f</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Rectangle">
            <summary>rectangle</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Width">
            <summary>Width</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Height">
            <summary>Height</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Zero">
            <summary>a rectangle of all zeroes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Identity">
            <summary>identity rectangle</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="width">width value to init with</param>
            <param name="height">height value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a two Vector2s</summary>
            <param name="position">the x, y values to init with</param>
            <param name="size">the width, height value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Inverse">
            <summary>rectangle inverse</summary>
            <returns>rectangle inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Inverse(Sce.PlayStation.Core.Rectangle@)">
            <summary>rectangle inverse</summary>
            <param name="result">rectangle inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Lerp(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>lerp between 2 rectangles</summary>
            <param name="r">second rectangle</param>
            <param name="f">lerp amount</param>
            <returns>lerp between this and r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Lerp(Sce.PlayStation.Core.Rectangle@,System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>lerp between 2 rectangles</summary>
            <param name="r">second rectangle</param>
            <param name="f">lerp amount</param>
            <param name="result">lerp between this and r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformPoint(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v (X,Y,0,1)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,0,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformPoint(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v (X,Y,0,1)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,0,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformVector(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v (X,Y,0,0)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,0,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformVector(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v (X,Y,0,0)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,0,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Add(Sce.PlayStation.Core.Rectangle)">
            <summary>return this + r</summary>
            <param name="r">rectangle</param>
            <returns>this + r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Add(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this + r</summary>
            <param name="r">rectangle</param>
            <param name="result">this + r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Subtract(Sce.PlayStation.Core.Rectangle)">
            <summary>return this - r</summary>
            <param name="r">rectangle</param>
            <returns>this - r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Subtract(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this - r</summary>
            <param name="r">rectangle</param>
            <param name="result">this - r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle)">
            <summary>return this * r</summary>
            <param name="r">rectangle</param>
            <returns>this * r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this * r</summary>
            <param name="r">rectangle</param>
            <param name="result">this * r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Divide(System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Negate(Sce.PlayStation.Core.Rectangle@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToVector4">
            <summary>return the rectangle as a Vector4</summary>
            <returns>the rectangle as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToVector4(Sce.PlayStation.Core.Vector4@)">
            <summary>return the rectangle as a Vector4</summary>
            <param name="result">the rectangle as a Vector4</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToMatrix4">
            <summary>convert this rectangle to a Matrix4</summary>
            <returns>Matrix4 representation of this rectangle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToMatrix4(Sce.PlayStation.Core.Matrix4@)">
            <summary>convert this rectangle to a Matrix4</summary>
            <param name="result">Matrix4 representation of this rectangle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.IsIdentity">
            <summary>test if this is an identity rectangle</summary>
            <returns>true if this is an identity rectangle, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Rectangle.Equals(Sce.PlayStation.Core.Rectangle,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Rectangle.Equals(Sce.PlayStation.Core.Rectangle)">
            <summary>equality test</summary>
            <param name="r">the rectangle to compare this to</param>
            <returns>true if this == r, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToString">
            <summary>get the string representation of this rectangle</summary>
            <returns>the string representation of this rectangle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.FromMatrix4(Sce.PlayStation.Core.Matrix4)">
            <summary>return a rectangle representing a 2D translation/scale matrix</summary>
            <param name="m">matrix to form the rectangle out of</param>
            <returns>a rectangle representing a rectangle matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.FromMatrix4(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Rectangle@)">
            <summary>return a rectangle representing a 2D translation/scale matrix</summary>
            <param name="m">matrix to form the rectangle out of</param>
            <param name="result">a rectangle representing a rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Inverse(Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Inverse()</summary>
            <param name="r">rectangle</param>
            <returns>rectangle inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Inverse(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Inverse(out Rectangle)</summary>
            <param name="r">rectangle</param>
            <param name="result">rectangle inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Lerp(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>static function equivalent to Lerp(Rectangle, float)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="f">lerp amount</param>
            <returns>lerp between r1 and r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Lerp(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@,System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Lerp(ref Rectangle, float, out Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="f">lerp amount</param>
            <param name="result">lerp between r1 and r2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformPoint(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformPoint(Vector2)</summary>
            <param name="r">rectangle</param>
            <param name="v">vector</param>
            <returns>r * v (X,Y,0,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformPoint(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformPoint(ref Vector2, out Vector2)</summary>
            <param name="r">rectangle</param>
            <param name="v">vector</param>
            <param name="result">r * v (X,Y,0,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformVector(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformVector(Vector2)</summary>
            <param name="r">rectangle</param>
            <param name="v">vector</param>
            <returns>r * v (X,Y,0,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformVector(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformVector(ref Vector2, out Vector2)</summary>
            <param name="r">rectangle</param>
            <param name="v">vector</param>
            <param name="result">r * v (X,Y,0,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Add(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Add(Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <returns>r1 + r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Add(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Add(ref Rectangle, out Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="result">r1 + r2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Subtract(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Subtract(Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <returns>r1 - r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Subtract(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Subtract(ref Rectangle, out Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="result">r1 - r2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Multiply(Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <returns>r1 * r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Multiply(ref Rectangle, out Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="result">r1 * r2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="r">rectangle</param>
            <param name="f">scalar</param>
            <returns>r * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle@,System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Multiply(float, out Rectangle)</summary>
            <param name="r">rectangle</param>
            <param name="f">scalar</param>
            <param name="result">r * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Divide(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="r">rectangle</param>
            <param name="f">scalar</param>
            <returns>r / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Divide(Sce.PlayStation.Core.Rectangle@,System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Divide(float, out Rectangle)</summary>
            <param name="r">rectangle</param>
            <param name="f">scalar</param>
            <param name="result">r / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Negate(Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Negate()</summary>
            <param name="r">rectangle</param>
            <returns>-r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Negate(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Negate(out Rectangle)</summary>
            <param name="r">rectangle</param>
            <param name="result">-r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Equality(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>equality operator</summary>
            <param name="r1">first rectangle to compare</param>
            <param name="r2">second rectangle to compare</param>
            <returns>true if r1 == r2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Inequality(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>not equals operator</summary>
            <param name="r1">first rectangle to compare</param>
            <param name="r2">second rectangle to compare</param>
            <returns>true if r1 != r2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Addition(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>addition operator</summary>
            <param name="r1">first rectangle to add</param>
            <param name="r2">second rectangle to add</param>
            <returns>r1 + r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Subtraction(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>subtraction operator</summary>
            <param name="r1">value to subtract from</param>
            <param name="r2">value to subtract</param>
            <returns>r1 - r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_UnaryNegation(Sce.PlayStation.Core.Rectangle)">
            <summary>unary minus operator</summary>
            <param name="r">rectangle to negate</param>
            <returns>unary minus applied to each member of r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Multiply(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>multiplication operator</summary>
            <param name="r1">first value to multiply</param>
            <param name="r2">second value to multiply</param>
            <returns>r1 * r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Multiply(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>multiply a rectangle by a scalar float</summary>
            <param name="r">rectangle to multiply</param>
            <param name="f">float to multiply by</param>
            <returns>r * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Multiply(System.Single,Sce.PlayStation.Core.Rectangle)">
            <summary>multiply a rectangle by a scalar float</summary>
            <param name="f">float to multiply by</param>
            <param name="r">rectangle to multiply</param>
            <returns>f * r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Division(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>division operator</summary>
            <param name="r">rectangle to divide</param>
            <param name="f">scalar float value to divide by</param>
            <returns>r / f</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Rectangle.Position">
            <summary>the base position of the rectangle</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Rectangle.Size">
            <summary>the size dimensions of the rectangle</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Vector4">
            <summary>vector of 4 floats</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.W">
            <summary>W</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.Zero">
            <summary>return a new vector of all zeros</summary>
            <returns>a new vector of all zeros</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.One">
            <summary>return a new vector of all ones</summary>
            <returns>a new vector of all ones</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.UnitX">
            <summary>return a new vector of all zeros with only the x value set to one</summary>
            <returns>a new vector of all zeros with only the x value set to one</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.UnitY">
            <summary>return a new vector of all zeros with only the y value set to one</summary>
            <returns>a new vector of all zeros with only the y value set to one</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.UnitZ">
            <summary>return a new vector of all zeros with only the z value set to one</summary>
            <returns>a new vector of all zeros with only the z value set to one</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.UnitW">
            <summary>return a new vector of all zeros with only the w value set to one</summary>
            <returns>a new vector of all zeros with only the w value set to one</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>constructor taking a Vector3 and a scalar float</summary>
            <param name="xyz">xyz value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>constructor taking a Vector2 and two scalar floats</summary>
            <param name="xy">xy values to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking two Vector2s</summary>
            <param name="xy">xy values to init with</param>
            <param name="zw">zw values to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(System.Single)">
            <summary>constructor taking one float</summary>
            <param name="f">f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Length">
            <summary>return the length of this vector</summary>
            <returns>the length of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.LengthSquared">
            <summary>return the length squared of this vector</summary>
            <returns>the length squared of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Distance(Sce.PlayStation.Core.Vector4)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Distance(Sce.PlayStation.Core.Vector4@)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.DistanceSquared(Sce.PlayStation.Core.Vector4)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.DistanceSquared(Sce.PlayStation.Core.Vector4@)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Dot(Sce.PlayStation.Core.Vector4)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Dot(Sce.PlayStation.Core.Vector4@)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Normalize">
            <summary>return this vector normalized</summary>
            <returns>this vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Normalize(Sce.PlayStation.Core.Vector4@)">
            <summary>return this vector normalized</summary>
            <param name="result">this vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Abs">
            <summary>element wise absolute value</summary>
            <returns>element wise absolute value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Abs(Sce.PlayStation.Core.Vector4@)">
            <summary>element wise absolute value</summary>
            <param name="result">element wise absolute value of this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <returns>the min of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the min of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(System.Single)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the min of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the min of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <returns>the max of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the max of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(System.Single)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the max of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the max of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(System.Single,System.Single)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(System.Single,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(System.Single,System.Single)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(System.Single,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Lerp(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <returns>a Vector4 where each element is the result of lerping f between the corresponding elements of this and other</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Lerp(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector4 where each element is the result of lerping f between the corresponding elements of this and other</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.MoveTo(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.MoveTo(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Add(Sce.PlayStation.Core.Vector4)">
            <summary>return this + v</summary>
            <param name="v">vector</param>
            <returns>this + v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Add(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this + v</summary>
            <param name="v">vector</param>
            <param name="result">this + v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Subtract(Sce.PlayStation.Core.Vector4)">
            <summary>return this - v</summary>
            <param name="v">vector</param>
            <returns>this - v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Subtract(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this - v</summary>
            <param name="v">vector</param>
            <param name="result">this - v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4)">
            <summary>return this / v</summary>
            <param name="v">vector</param>
            <returns>this / v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this / v</summary>
            <param name="v">vector</param>
            <param name="result">this / v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Negate(Sce.PlayStation.Core.Vector4@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector4.IsUnit(System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector4.IsZero">
            <summary>test if all elements of this are zero</summary>
            <returns>true if all elements of this are zero, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.IsOne">
            <summary>test if all elements of this are one</summary>
            <returns>true if all elements of this are one, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector4.Equals(Sce.PlayStation.Core.Vector4,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector4.Equals(Sce.PlayStation.Core.Vector4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.ToString">
            <summary>get the string representation of this vector</summary>
            <returns>the string representation of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Length(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Length(Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.LengthSquared(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.LengthSquared(Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Distance(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Distance(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Distance(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Distance(ref Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.DistanceSquared(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to DistanceSquared(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.DistanceSquared(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to DistanceSquared(ref Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Dot(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Dot(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Dot(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Dot(ref Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Normalize(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Normalize()</summary>
            <param name="v">vector</param>
            <returns>the vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Normalize(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Normalize(out Vector4)</summary>
            <param name="v">vector</param>
            <param name="result">the vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Abs(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Abs()</summary>
            <param name="v">vector</param>
            <returns>element wise absolute value of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Abs(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Abs(out Vector4)</summary>
            <param name="v">vector</param>
            <param name="result">element wise absolute value of v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Min(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the min of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Min(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the min of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Min(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the min of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Min(float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the min of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Max(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the max of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Max(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the max of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Max(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the max of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Max(float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the max of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Clamp(Vector4, Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Clamp(ref Vector4, ref Vector4, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4,System.Single,System.Single)">
            <summary>static function equivalent to Clamp(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4@,System.Single,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Clamp(float, float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Repeat(Vector4, Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Repeat(ref Vector4, ref Vector4, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4,System.Single,System.Single)">
            <summary>static function equivalent to Repeat(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4@,System.Single,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Repeat(float, float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Lerp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Lerp(Vector4, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <returns>a Vector4 where each element is the result of lerping f between the corresponding elements of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Lerp(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Lerp(ref Vector4, float, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector4 where each element is the result of lerping f between the corresponding elements of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.MoveTo(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to MoveTo(Vector4, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.MoveTo(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to MoveTo(ref Vector4, float, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Add(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Add(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Add(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Add(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 + v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Subtract(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Subtract(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Subtract(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Subtract(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 - v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Multiply(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 * v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Multiply(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 * v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Multiply(float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Divide(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 / v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Divide(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 / v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Divide(float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Negate(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Negate()</summary>
            <param name="v">vector</param>
            <returns>-v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Negate(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Negate(out Vector4)</summary>
            <param name="v">vector</param>
            <param name="result">-v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Equality(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Inequality(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 != vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Addition(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>vector addition operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 + vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Addition(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="v">the vector to add</param>
            <param name="f">the scalar float to add each element of the vector</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Addition(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="f">the scalar float to add each element of the vector</param>
            <param name="v">the vector to add</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Subtraction(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>vector subtraction operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 - vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Subtraction(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>subtract a scalar float from each element of a vector</summary>
            <param name="v">the vector to subtract from</param>
            <param name="f">the scalar float to subtract from each element of the vector</param>
            <returns>a new vector with f subtracted from each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Subtraction(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>creates a new vector consisting of {f, f, f, f}, and then subtracts v from it</summary>
            <param name="f">the scalar that we subtract v from</param>
            <param name="v">the vector to subtract</param>
            <returns>a new vector consisting of v subtracted from the vector {f, f, f, f}</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_UnaryNegation(Sce.PlayStation.Core.Vector4)">
            <summary>unary minus operator</summary>
            <param name="v">vector to negate</param>
            <returns>unary minus applied to each member of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Multiply(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>multiplication operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 * vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Multiply(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="v">the vector to multiply</param>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Multiply(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <param name="v">the vector to multiply</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Division(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>division operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 / vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Division(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>divide each element of a vector by a scalar float</summary>
            <param name="v">the vector to divide by scalar</param>
            <param name="f">the scalar to divide by</param>
            <returns>a new Vector4 consisting of each element of v divided by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Division(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>create a new vector consisting of {f, f, f, f} and divide it by vec</summary>
            <param name="f">the scalar to divide by vector</param>
            <param name="v">the vector to divide by</param>
            <returns>a new vector {f, f, f, f} divided by v</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxxx">
            <returns>a new vector consisting of the current vector's x, x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxxx">
            <returns>a new vector consisting of the current vector's y, x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxxx">
            <returns>a new vector consisting of the current vector's z, x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxxx">
            <returns>a new vector consisting of the current vector's w, x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyxx">
            <returns>a new vector consisting of the current vector's x, y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyxx">
            <returns>a new vector consisting of the current vector's y, y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyxx">
            <returns>a new vector consisting of the current vector's z, y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyxx">
            <returns>a new vector consisting of the current vector's w, y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzxx">
            <returns>a new vector consisting of the current vector's x, z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzxx">
            <returns>a new vector consisting of the current vector's y, z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzxx">
            <returns>a new vector consisting of the current vector's z, z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzxx">
            <returns>a new vector consisting of the current vector's w, z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwxx">
            <returns>a new vector consisting of the current vector's x, w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywxx">
            <returns>a new vector consisting of the current vector's y, w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwxx">
            <returns>a new vector consisting of the current vector's z, w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwxx">
            <returns>a new vector consisting of the current vector's w, w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxyx">
            <returns>a new vector consisting of the current vector's x, x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxyx">
            <returns>a new vector consisting of the current vector's y, x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxyx">
            <returns>a new vector consisting of the current vector's z, x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxyx">
            <returns>a new vector consisting of the current vector's w, x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyyx">
            <returns>a new vector consisting of the current vector's x, y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyyx">
            <returns>a new vector consisting of the current vector's y, y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyyx">
            <returns>a new vector consisting of the current vector's z, y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyyx">
            <returns>a new vector consisting of the current vector's w, y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzyx">
            <returns>a new vector consisting of the current vector's x, z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzyx">
            <returns>a new vector consisting of the current vector's y, z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzyx">
            <returns>a new vector consisting of the current vector's z, z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzyx">
            <returns>a new vector consisting of the current vector's w, z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwyx">
            <returns>a new vector consisting of the current vector's x, w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywyx">
            <returns>a new vector consisting of the current vector's y, w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwyx">
            <returns>a new vector consisting of the current vector's z, w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwyx">
            <returns>a new vector consisting of the current vector's w, w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxzx">
            <returns>a new vector consisting of the current vector's x, x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxzx">
            <returns>a new vector consisting of the current vector's y, x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxzx">
            <returns>a new vector consisting of the current vector's z, x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxzx">
            <returns>a new vector consisting of the current vector's w, x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyzx">
            <returns>a new vector consisting of the current vector's x, y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyzx">
            <returns>a new vector consisting of the current vector's y, y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyzx">
            <returns>a new vector consisting of the current vector's z, y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyzx">
            <returns>a new vector consisting of the current vector's w, y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzzx">
            <returns>a new vector consisting of the current vector's x, z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzzx">
            <returns>a new vector consisting of the current vector's y, z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzzx">
            <returns>a new vector consisting of the current vector's z, z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzzx">
            <returns>a new vector consisting of the current vector's w, z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwzx">
            <returns>a new vector consisting of the current vector's x, w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywzx">
            <returns>a new vector consisting of the current vector's y, w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwzx">
            <returns>a new vector consisting of the current vector's z, w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwzx">
            <returns>a new vector consisting of the current vector's w, w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxwx">
            <returns>a new vector consisting of the current vector's x, x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxwx">
            <returns>a new vector consisting of the current vector's y, x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxwx">
            <returns>a new vector consisting of the current vector's z, x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxwx">
            <returns>a new vector consisting of the current vector's w, x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xywx">
            <returns>a new vector consisting of the current vector's x, y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yywx">
            <returns>a new vector consisting of the current vector's y, y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zywx">
            <returns>a new vector consisting of the current vector's z, y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wywx">
            <returns>a new vector consisting of the current vector's w, y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzwx">
            <returns>a new vector consisting of the current vector's x, z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzwx">
            <returns>a new vector consisting of the current vector's y, z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzwx">
            <returns>a new vector consisting of the current vector's z, z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzwx">
            <returns>a new vector consisting of the current vector's w, z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwwx">
            <returns>a new vector consisting of the current vector's x, w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywwx">
            <returns>a new vector consisting of the current vector's y, w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwwx">
            <returns>a new vector consisting of the current vector's z, w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwwx">
            <returns>a new vector consisting of the current vector's w, w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxxy">
            <returns>a new vector consisting of the current vector's x, x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxxy">
            <returns>a new vector consisting of the current vector's y, x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxxy">
            <returns>a new vector consisting of the current vector's z, x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxxy">
            <returns>a new vector consisting of the current vector's w, x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyxy">
            <returns>a new vector consisting of the current vector's x, y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyxy">
            <returns>a new vector consisting of the current vector's y, y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyxy">
            <returns>a new vector consisting of the current vector's z, y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyxy">
            <returns>a new vector consisting of the current vector's w, y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzxy">
            <returns>a new vector consisting of the current vector's x, z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzxy">
            <returns>a new vector consisting of the current vector's y, z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzxy">
            <returns>a new vector consisting of the current vector's z, z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzxy">
            <returns>a new vector consisting of the current vector's w, z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwxy">
            <returns>a new vector consisting of the current vector's x, w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywxy">
            <returns>a new vector consisting of the current vector's y, w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwxy">
            <returns>a new vector consisting of the current vector's z, w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwxy">
            <returns>a new vector consisting of the current vector's w, w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxyy">
            <returns>a new vector consisting of the current vector's x, x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxyy">
            <returns>a new vector consisting of the current vector's y, x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxyy">
            <returns>a new vector consisting of the current vector's z, x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxyy">
            <returns>a new vector consisting of the current vector's w, x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyyy">
            <returns>a new vector consisting of the current vector's x, y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyyy">
            <returns>a new vector consisting of the current vector's y, y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyyy">
            <returns>a new vector consisting of the current vector's z, y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyyy">
            <returns>a new vector consisting of the current vector's w, y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzyy">
            <returns>a new vector consisting of the current vector's x, z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzyy">
            <returns>a new vector consisting of the current vector's y, z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzyy">
            <returns>a new vector consisting of the current vector's z, z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzyy">
            <returns>a new vector consisting of the current vector's w, z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwyy">
            <returns>a new vector consisting of the current vector's x, w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywyy">
            <returns>a new vector consisting of the current vector's y, w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwyy">
            <returns>a new vector consisting of the current vector's z, w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwyy">
            <returns>a new vector consisting of the current vector's w, w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxzy">
            <returns>a new vector consisting of the current vector's x, x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxzy">
            <returns>a new vector consisting of the current vector's y, x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxzy">
            <returns>a new vector consisting of the current vector's z, x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxzy">
            <returns>a new vector consisting of the current vector's w, x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyzy">
            <returns>a new vector consisting of the current vector's x, y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyzy">
            <returns>a new vector consisting of the current vector's y, y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyzy">
            <returns>a new vector consisting of the current vector's z, y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyzy">
            <returns>a new vector consisting of the current vector's w, y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzzy">
            <returns>a new vector consisting of the current vector's x, z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzzy">
            <returns>a new vector consisting of the current vector's y, z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzzy">
            <returns>a new vector consisting of the current vector's z, z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzzy">
            <returns>a new vector consisting of the current vector's w, z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwzy">
            <returns>a new vector consisting of the current vector's x, w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywzy">
            <returns>a new vector consisting of the current vector's y, w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwzy">
            <returns>a new vector consisting of the current vector's z, w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwzy">
            <returns>a new vector consisting of the current vector's w, w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxwy">
            <returns>a new vector consisting of the current vector's x, x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxwy">
            <returns>a new vector consisting of the current vector's y, x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxwy">
            <returns>a new vector consisting of the current vector's z, x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxwy">
            <returns>a new vector consisting of the current vector's w, x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xywy">
            <returns>a new vector consisting of the current vector's x, y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yywy">
            <returns>a new vector consisting of the current vector's y, y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zywy">
            <returns>a new vector consisting of the current vector's z, y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wywy">
            <returns>a new vector consisting of the current vector's w, y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzwy">
            <returns>a new vector consisting of the current vector's x, z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzwy">
            <returns>a new vector consisting of the current vector's y, z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzwy">
            <returns>a new vector consisting of the current vector's z, z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzwy">
            <returns>a new vector consisting of the current vector's w, z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwwy">
            <returns>a new vector consisting of the current vector's x, w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywwy">
            <returns>a new vector consisting of the current vector's y, w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwwy">
            <returns>a new vector consisting of the current vector's z, w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwwy">
            <returns>a new vector consisting of the current vector's w, w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxxz">
            <returns>a new vector consisting of the current vector's x, x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxxz">
            <returns>a new vector consisting of the current vector's y, x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxxz">
            <returns>a new vector consisting of the current vector's z, x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxxz">
            <returns>a new vector consisting of the current vector's w, x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyxz">
            <returns>a new vector consisting of the current vector's x, y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyxz">
            <returns>a new vector consisting of the current vector's y, y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyxz">
            <returns>a new vector consisting of the current vector's z, y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyxz">
            <returns>a new vector consisting of the current vector's w, y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzxz">
            <returns>a new vector consisting of the current vector's x, z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzxz">
            <returns>a new vector consisting of the current vector's y, z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzxz">
            <returns>a new vector consisting of the current vector's z, z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzxz">
            <returns>a new vector consisting of the current vector's w, z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwxz">
            <returns>a new vector consisting of the current vector's x, w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywxz">
            <returns>a new vector consisting of the current vector's y, w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwxz">
            <returns>a new vector consisting of the current vector's z, w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwxz">
            <returns>a new vector consisting of the current vector's w, w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxyz">
            <returns>a new vector consisting of the current vector's x, x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxyz">
            <returns>a new vector consisting of the current vector's y, x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxyz">
            <returns>a new vector consisting of the current vector's z, x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxyz">
            <returns>a new vector consisting of the current vector's w, x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyyz">
            <returns>a new vector consisting of the current vector's x, y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyyz">
            <returns>a new vector consisting of the current vector's y, y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyyz">
            <returns>a new vector consisting of the current vector's z, y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyyz">
            <returns>a new vector consisting of the current vector's w, y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzyz">
            <returns>a new vector consisting of the current vector's x, z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzyz">
            <returns>a new vector consisting of the current vector's y, z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzyz">
            <returns>a new vector consisting of the current vector's z, z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzyz">
            <returns>a new vector consisting of the current vector's w, z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwyz">
            <returns>a new vector consisting of the current vector's x, w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywyz">
            <returns>a new vector consisting of the current vector's y, w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwyz">
            <returns>a new vector consisting of the current vector's z, w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwyz">
            <returns>a new vector consisting of the current vector's w, w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxzz">
            <returns>a new vector consisting of the current vector's x, x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxzz">
            <returns>a new vector consisting of the current vector's y, x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxzz">
            <returns>a new vector consisting of the current vector's z, x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxzz">
            <returns>a new vector consisting of the current vector's w, x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyzz">
            <returns>a new vector consisting of the current vector's x, y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyzz">
            <returns>a new vector consisting of the current vector's y, y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyzz">
            <returns>a new vector consisting of the current vector's z, y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyzz">
            <returns>a new vector consisting of the current vector's w, y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzzz">
            <returns>a new vector consisting of the current vector's x, z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzzz">
            <returns>a new vector consisting of the current vector's y, z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzzz">
            <returns>a new vector consisting of the current vector's z, z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzzz">
            <returns>a new vector consisting of the current vector's w, z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwzz">
            <returns>a new vector consisting of the current vector's x, w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywzz">
            <returns>a new vector consisting of the current vector's y, w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwzz">
            <returns>a new vector consisting of the current vector's z, w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwzz">
            <returns>a new vector consisting of the current vector's w, w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxwz">
            <returns>a new vector consisting of the current vector's x, x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxwz">
            <returns>a new vector consisting of the current vector's y, x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxwz">
            <returns>a new vector consisting of the current vector's z, x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxwz">
            <returns>a new vector consisting of the current vector's w, x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xywz">
            <returns>a new vector consisting of the current vector's x, y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yywz">
            <returns>a new vector consisting of the current vector's y, y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zywz">
            <returns>a new vector consisting of the current vector's z, y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wywz">
            <returns>a new vector consisting of the current vector's w, y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzwz">
            <returns>a new vector consisting of the current vector's x, z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzwz">
            <returns>a new vector consisting of the current vector's y, z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzwz">
            <returns>a new vector consisting of the current vector's z, z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzwz">
            <returns>a new vector consisting of the current vector's w, z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwwz">
            <returns>a new vector consisting of the current vector's x, w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywwz">
            <returns>a new vector consisting of the current vector's y, w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwwz">
            <returns>a new vector consisting of the current vector's z, w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwwz">
            <returns>a new vector consisting of the current vector's w, w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxxw">
            <returns>a new vector consisting of the current vector's x, x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxxw">
            <returns>a new vector consisting of the current vector's y, x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxxw">
            <returns>a new vector consisting of the current vector's z, x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxxw">
            <returns>a new vector consisting of the current vector's w, x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyxw">
            <returns>a new vector consisting of the current vector's x, y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyxw">
            <returns>a new vector consisting of the current vector's y, y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyxw">
            <returns>a new vector consisting of the current vector's z, y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyxw">
            <returns>a new vector consisting of the current vector's w, y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzxw">
            <returns>a new vector consisting of the current vector's x, z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzxw">
            <returns>a new vector consisting of the current vector's y, z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzxw">
            <returns>a new vector consisting of the current vector's z, z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzxw">
            <returns>a new vector consisting of the current vector's w, z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwxw">
            <returns>a new vector consisting of the current vector's x, w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywxw">
            <returns>a new vector consisting of the current vector's y, w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwxw">
            <returns>a new vector consisting of the current vector's z, w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwxw">
            <returns>a new vector consisting of the current vector's w, w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxyw">
            <returns>a new vector consisting of the current vector's x, x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxyw">
            <returns>a new vector consisting of the current vector's y, x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxyw">
            <returns>a new vector consisting of the current vector's z, x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxyw">
            <returns>a new vector consisting of the current vector's w, x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyyw">
            <returns>a new vector consisting of the current vector's x, y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyyw">
            <returns>a new vector consisting of the current vector's y, y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyyw">
            <returns>a new vector consisting of the current vector's z, y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyyw">
            <returns>a new vector consisting of the current vector's w, y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzyw">
            <returns>a new vector consisting of the current vector's x, z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzyw">
            <returns>a new vector consisting of the current vector's y, z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzyw">
            <returns>a new vector consisting of the current vector's z, z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzyw">
            <returns>a new vector consisting of the current vector's w, z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwyw">
            <returns>a new vector consisting of the current vector's x, w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywyw">
            <returns>a new vector consisting of the current vector's y, w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwyw">
            <returns>a new vector consisting of the current vector's z, w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwyw">
            <returns>a new vector consisting of the current vector's w, w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxzw">
            <returns>a new vector consisting of the current vector's x, x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxzw">
            <returns>a new vector consisting of the current vector's y, x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxzw">
            <returns>a new vector consisting of the current vector's z, x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxzw">
            <returns>a new vector consisting of the current vector's w, x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyzw">
            <returns>a new vector consisting of the current vector's x, y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyzw">
            <returns>a new vector consisting of the current vector's y, y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyzw">
            <returns>a new vector consisting of the current vector's z, y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyzw">
            <returns>a new vector consisting of the current vector's w, y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzzw">
            <returns>a new vector consisting of the current vector's x, z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzzw">
            <returns>a new vector consisting of the current vector's y, z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzzw">
            <returns>a new vector consisting of the current vector's z, z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzzw">
            <returns>a new vector consisting of the current vector's w, z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwzw">
            <returns>a new vector consisting of the current vector's x, w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywzw">
            <returns>a new vector consisting of the current vector's y, w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwzw">
            <returns>a new vector consisting of the current vector's z, w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwzw">
            <returns>a new vector consisting of the current vector's w, w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxww">
            <returns>a new vector consisting of the current vector's x, x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxww">
            <returns>a new vector consisting of the current vector's y, x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxww">
            <returns>a new vector consisting of the current vector's z, x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxww">
            <returns>a new vector consisting of the current vector's w, x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyww">
            <returns>a new vector consisting of the current vector's x, y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyww">
            <returns>a new vector consisting of the current vector's y, y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyww">
            <returns>a new vector consisting of the current vector's z, y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyww">
            <returns>a new vector consisting of the current vector's w, y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzww">
            <returns>a new vector consisting of the current vector's x, z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzww">
            <returns>a new vector consisting of the current vector's y, z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzww">
            <returns>a new vector consisting of the current vector's z, z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzww">
            <returns>a new vector consisting of the current vector's w, z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwww">
            <returns>a new vector consisting of the current vector's x, w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywww">
            <returns>a new vector consisting of the current vector's y, w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwww">
            <returns>a new vector consisting of the current vector's z, w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwww">
            <returns>a new vector consisting of the current vector's w, w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxx">
            <returns>a new vector consisting of the current vector's x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxx">
            <returns>a new vector consisting of the current vector's y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxx">
            <returns>a new vector consisting of the current vector's z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxx">
            <returns>a new vector consisting of the current vector's w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyx">
            <returns>a new vector consisting of the current vector's x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyx">
            <returns>a new vector consisting of the current vector's y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyx">
            <returns>a new vector consisting of the current vector's z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyx">
            <returns>a new vector consisting of the current vector's w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzx">
            <returns>a new vector consisting of the current vector's x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzx">
            <returns>a new vector consisting of the current vector's y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzx">
            <returns>a new vector consisting of the current vector's z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzx">
            <returns>a new vector consisting of the current vector's w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwx">
            <returns>a new vector consisting of the current vector's x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywx">
            <returns>a new vector consisting of the current vector's y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwx">
            <returns>a new vector consisting of the current vector's z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwx">
            <returns>a new vector consisting of the current vector's w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxy">
            <returns>a new vector consisting of the current vector's x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxy">
            <returns>a new vector consisting of the current vector's y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxy">
            <returns>a new vector consisting of the current vector's z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxy">
            <returns>a new vector consisting of the current vector's w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyy">
            <returns>a new vector consisting of the current vector's x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyy">
            <returns>a new vector consisting of the current vector's y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyy">
            <returns>a new vector consisting of the current vector's z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyy">
            <returns>a new vector consisting of the current vector's w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzy">
            <returns>a new vector consisting of the current vector's x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzy">
            <returns>a new vector consisting of the current vector's y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzy">
            <returns>a new vector consisting of the current vector's z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzy">
            <returns>a new vector consisting of the current vector's w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwy">
            <returns>a new vector consisting of the current vector's x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywy">
            <returns>a new vector consisting of the current vector's y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwy">
            <returns>a new vector consisting of the current vector's z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwy">
            <returns>a new vector consisting of the current vector's w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxz">
            <returns>a new vector consisting of the current vector's x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxz">
            <returns>a new vector consisting of the current vector's y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxz">
            <returns>a new vector consisting of the current vector's z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxz">
            <returns>a new vector consisting of the current vector's w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyz">
            <returns>a new vector consisting of the current vector's x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyz">
            <returns>a new vector consisting of the current vector's y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyz">
            <returns>a new vector consisting of the current vector's z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyz">
            <returns>a new vector consisting of the current vector's w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzz">
            <returns>a new vector consisting of the current vector's x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzz">
            <returns>a new vector consisting of the current vector's y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzz">
            <returns>a new vector consisting of the current vector's z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzz">
            <returns>a new vector consisting of the current vector's w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwz">
            <returns>a new vector consisting of the current vector's x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywz">
            <returns>a new vector consisting of the current vector's y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwz">
            <returns>a new vector consisting of the current vector's z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwz">
            <returns>a new vector consisting of the current vector's w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxw">
            <returns>a new vector consisting of the current vector's x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxw">
            <returns>a new vector consisting of the current vector's y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxw">
            <returns>a new vector consisting of the current vector's z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxw">
            <returns>a new vector consisting of the current vector's w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyw">
            <returns>a new vector consisting of the current vector's x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyw">
            <returns>a new vector consisting of the current vector's y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyw">
            <returns>a new vector consisting of the current vector's z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyw">
            <returns>a new vector consisting of the current vector's w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzw">
            <returns>a new vector consisting of the current vector's x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzw">
            <returns>a new vector consisting of the current vector's y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzw">
            <returns>a new vector consisting of the current vector's z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzw">
            <returns>a new vector consisting of the current vector's w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xww">
            <returns>a new vector consisting of the current vector's x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yww">
            <returns>a new vector consisting of the current vector's y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zww">
            <returns>a new vector consisting of the current vector's z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Www">
            <returns>a new vector consisting of the current vector's w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xx">
            <returns>a new vector consisting of the current vector's x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yx">
            <returns>a new vector consisting of the current vector's y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zx">
            <returns>a new vector consisting of the current vector's z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wx">
            <returns>a new vector consisting of the current vector's w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xy">
            <returns>a new vector consisting of the current vector's x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yy">
            <returns>a new vector consisting of the current vector's y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zy">
            <returns>a new vector consisting of the current vector's z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wy">
            <returns>a new vector consisting of the current vector's w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xz">
            <returns>a new vector consisting of the current vector's x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yz">
            <returns>a new vector consisting of the current vector's y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zz">
            <returns>a new vector consisting of the current vector's z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wz">
            <returns>a new vector consisting of the current vector's w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xw">
            <returns>a new vector consisting of the current vector's x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yw">
            <returns>a new vector consisting of the current vector's y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zw">
            <returns>a new vector consisting of the current vector's z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ww">
            <returns>a new vector consisting of the current vector's w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyz0">
            <summary>
            return a 4 element vector consisting of the current vector with the w component set to 0
            </summary>
            <returns>a 4 element vector consisting of the current vector with the w component set to 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyz1">
            <summary>
            return a 4 element vector consisting of the current vector with the w component set to 1
            </summary>
            <returns>a 4 element vector consisting of the current vector with the w component set to 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.R">
            <summary>Red</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.G">
            <summary>Green</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.B">
            <summary>Blue</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.A">
            <summary>Alpha</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Vector3">
            <summary>vector of 3 floats</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.Zero">
            <summary>return a vector of all zeros</summary>
            <returns>a vector of all zeros</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.One">
            <summary>return a vector of all ones</summary>
            <returns>a vector of all ones</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.UnitX">
            <summary>return a Vector3 with the x component set to one, and all others set to zero</summary>
            <returns>a Vector3 with the x component set to one, and all others set to zero</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.UnitY">
            <summary>return a Vector3 with the y component set to one, and all others set to zero</summary>
            <returns>a Vector3 with the y component set to one, and all others set to zero</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.UnitZ">
            <summary>return a Vector3 with the z component set to one, and all others set to zero</summary>
            <returns>a Vector3 with the z component set to one, and all others set to zero</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking three floats</summary>
            <param name="x">x value to initialize with</param>
            <param name="y">y value to initialize with</param>
            <param name="z">z value to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>constructor taking a Vector2 and a float</summary>
            <param name="xy">x and y values to initialize with</param>
            <param name="z">z value to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.#ctor(System.Single)">
            <summary>constructor taking one float</summary>
            <param name="f">f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Length">
            <summary>return the length of this vector</summary>
            <returns>the length of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.LengthSquared">
            <summary>return the length squared of this vector</summary>
            <returns>the length squared of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Distance(Sce.PlayStation.Core.Vector3)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Distance(Sce.PlayStation.Core.Vector3@)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.DistanceSquared(Sce.PlayStation.Core.Vector3)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.DistanceSquared(Sce.PlayStation.Core.Vector3@)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Dot(Sce.PlayStation.Core.Vector3)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Dot(Sce.PlayStation.Core.Vector3@)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Cross(Sce.PlayStation.Core.Vector3)">
            <summary>cross product</summary>
            <param name="v">vector to take the cross product with</param>
            <returns>cross product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Cross(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>cross product</summary>
            <param name="v">vector to take the cross product with</param>
            <param name="result">cross product of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Normalize">
            <summary>return this vector normalized</summary>
            <returns>this vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Normalize(Sce.PlayStation.Core.Vector3@)">
            <summary>return this vector normalized</summary>
            <param name="result">this vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Abs">
            <summary>element wise absolute value</summary>
            <returns>element wise absolute value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Abs(Sce.PlayStation.Core.Vector3@)">
            <summary>element wise absolute value</summary>
            <param name="result">element wise absolute value of this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <returns>the min of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the min of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(System.Single)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the min of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the min of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <returns>the max of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the max of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(System.Single)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the max of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the max of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(System.Single,System.Single)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(System.Single,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(System.Single,System.Single)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(System.Single,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Lerp(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <returns>a Vector3 where each element is the result of lerping f between the corresponding elements of this and other</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Lerp(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector3 where each element is the result of lerping f between the corresponding elements of this and other</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Slerp(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>slerp between this and the other vector</summary>
            <param name="v">the other vector to slerp to</param>
            <param name="f">slerp amount</param>
            <returns>slerp between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Slerp(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>slerp between this and the other vector</summary>
            <param name="v">the other vector to slerp to</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.MoveTo(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.MoveTo(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.TurnTo(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>turn to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="angle">step angle</param>
            <returns>a new vector turned to target vector by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.TurnTo(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>turn to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="angle">step angle</param>
            <param name="result">a new vector turned to target vector by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Angle(Sce.PlayStation.Core.Vector3)">
            <summary>get the angle between this and the input vector</summary>
            <param name="v">the vector to get the angle to</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Angle(Sce.PlayStation.Core.Vector3@)">
            <summary>get the angle between this and the input vector</summary>
            <param name="v">the vector to get the angle to</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(System.Single)">
            <summary>rotate this around the x axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the x axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector2)">
            <summary>rotate this around the x axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the x axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(System.Single)">
            <summary>rotate this around the y axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the y axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector2)">
            <summary>rotate this around the y axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the y axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(System.Single)">
            <summary>rotate this around the z axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the z axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector2)">
            <summary>rotate this around the z axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the z axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Reflect(Sce.PlayStation.Core.Vector3)">
            <summary>return this vector reflected about normal </summary>
            <param name="normal">the vector to reflect about</param>
            <returns>this vector reflected about normal</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Reflect(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>return this vector reflected about normal </summary>
            <param name="normal">the vector to reflect about</param>
            <param name="result">this vector reflected about normal</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Perpendicular">
            <summary>return a vector perpendicular to this</summary>
            <returns>a vector perpendicular to this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Perpendicular(Sce.PlayStation.Core.Vector3@)">
            <summary>return a vector perpendicular to this</summary>
            <param name="result">a vector perpendicular to this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ProjectOnLine(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>project this vector onto the line (point,direction)</summary>
            <param name="point">line start point</param>
            <param name="direction">line direction</param>
            <returns>this vector projected onto the line (point,direction)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ProjectOnLine(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>project this vector onto the line (point,direction)</summary>
            <param name="point">line start point</param>
            <param name="direction">line direction</param>
            <param name="result">this vector projected onto the line (point,direction)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Add(Sce.PlayStation.Core.Vector3)">
            <summary>return this + v</summary>
            <param name="v">vector</param>
            <returns>this + v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Add(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this + v</summary>
            <param name="v">vector</param>
            <param name="result">this + v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Subtract(Sce.PlayStation.Core.Vector3)">
            <summary>return this - v</summary>
            <param name="v">vector</param>
            <returns>this - v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Subtract(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this - v</summary>
            <param name="v">vector</param>
            <param name="result">this - v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3)">
            <summary>return this / v</summary>
            <param name="v">vector</param>
            <returns>this / v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this / v</summary>
            <param name="v">vector</param>
            <param name="result">this / v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Negate(Sce.PlayStation.Core.Vector3@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector3.IsUnit(System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector3.IsZero">
            <summary>test if all elements of this are zero</summary>
            <returns>true if all elements of this are zero, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.IsOne">
            <summary>test if all elements of this are one</summary>
            <returns>true if all elements of this are one, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector3.Equals(Sce.PlayStation.Core.Vector3,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector3.Equals(Sce.PlayStation.Core.Vector3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ToString">
            <summary>return the string representation of this</summary>
            <returns>the string representation of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Length(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Length(Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.LengthSquared(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.LengthSquared(Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Distance(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Distance(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Distance(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Distance(ref Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.DistanceSquared(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to DistanceSquared(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.DistanceSquared(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to DistanceSquared(ref Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Dot(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Dot(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Dot(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Dot(ref Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Cross(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Cross(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>cross product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Cross(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Cross(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">cross product of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Normalize(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Normalize()</summary>
            <param name="v">vector</param>
            <returns>the vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Normalize(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Normalize(out Vector3)</summary>
            <param name="v">vector</param>
            <param name="result">the vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Abs(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Abs()</summary>
            <param name="v">vector</param>
            <returns>element wise absolute value of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Abs(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Abs(out Vector3)</summary>
            <param name="v">vector</param>
            <param name="result">element wise absolute value of v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Min(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the min of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Min(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the min of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Min(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the min of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Min(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the min of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Max(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the max of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Max(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the max of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Max(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the max of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Max(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the max of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Clamp(Vector3, Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Clamp(ref Vector3, ref Vector3, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3,System.Single,System.Single)">
            <summary>static function equivalent to Clamp(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3@,System.Single,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Clamp(float, float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Repeat(Vector3, Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Repeat(ref Vector3, ref Vector3, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3,System.Single,System.Single)">
            <summary>static function equivalent to Repeat(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3@,System.Single,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Repeat(float, float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Lerp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Lerp(Vector3, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <returns>a Vector3 where each element is the result of lerping f between the corresponding elements of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Lerp(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Lerp(ref Vector3, float, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector3 where each element is the result of lerping f between the corresponding elements of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Slerp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Slerp(Vector3, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">slerp amount</param>
            <returns>slerp between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Slerp(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Slerp(ref Vector3, float, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.MoveTo(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to MoveTo(Vector3, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.MoveTo(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to MoveTo(ref Vector3, float, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector3.TurnTo(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector3.TurnTo(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to TurnTo(ref Vector3, float, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="angle">step angle</param>
            <param name="result">a new vector turned to target vector by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Angle(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Angle(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the angle between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Angle(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Angle(ref Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the angle between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to RotateX(float)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateX(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to RotateX(Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateX(ref Vector2, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to RotateY(float)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateY(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to RotateY(Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateY(ref Vector2, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to RotateZ(float)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateZ(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to RotateZ(Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateZ(ref Vector2, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Reflect(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Reflect(Vector3)</summary>
            <param name="v">vector</param>
            <param name="normal">the vector to reflect about</param>
            <returns>the vector reflected about normal</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Reflect(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Reflect(ref Vector3, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="normal">the vector to reflect about</param>
            <param name="result">the vector reflected about normal</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Perpendicular(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Perpendicular()</summary>
            <param name="v">vector</param>
            <returns>a vector perpendicular to v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Perpendicular(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Perpendicular(out Vector3)</summary>
            <param name="v">vector</param>
            <param name="result">a vector perpendicular to v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ProjectOnLine(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to ProjectOnLine(Vector3, Vector3)</summary>
            <param name="v">vector</param>
            <param name="point">line start point</param>
            <param name="direction">line direction</param>
            <returns>the vector projected onto the line (point,direction)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ProjectOnLine(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to ProjectOnLine(ref Vector3, ref Vector3, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="point">line start point</param>
            <param name="direction">line direction</param>
            <param name="result">the vector projected onto the line (point,direction)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Add(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Add(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Add(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Add(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 + v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Subtract(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Subtract(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Subtract(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Subtract(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 - v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Multiply(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 * v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Multiply(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 * v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Multiply(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Divide(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 / v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Divide(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 / v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Divide(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Negate(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Negate()</summary>
            <param name="v">vector</param>
            <returns>-v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Negate(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Negate(out Vector3)</summary>
            <param name="v">vector</param>
            <param name="result">-v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Equality(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Inequality(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 != vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Addition(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>vector addition operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 + vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Addition(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="v">the vector to add</param>
            <param name="f">the scalar float to add each element of the vector</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Addition(System.Single,Sce.PlayStation.Core.Vector3)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="f">the scalar float to add each element of the vector</param>
            <param name="v">the vector to add</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Subtraction(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>vector subtraction operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 - vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Subtraction(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>subtract a scalar float from each element of a vector</summary>
            <param name="v">the vector to subtract from</param>
            <param name="f">the scalar float to subtract from each element of the vector</param>
            <returns>a new vector with f subtracted from each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Subtraction(System.Single,Sce.PlayStation.Core.Vector3)">
            <summary>creates a new vector consisting of {f, f, f}, and then subtracts v from it</summary>
            <param name="f">the scalar that we subtract v from</param>
            <param name="v">the vector to subtract</param>
            <returns>a new vector consisting of v subtracted from the vector {f, f, f}</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_UnaryNegation(Sce.PlayStation.Core.Vector3)">
            <summary>unary minus operator</summary>
            <param name="v">the vector to negate</param>
            <returns>unary minus applied to each member of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Multiply(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>multiplication operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 * vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Multiply(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="v">the vector to multiply</param>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Multiply(System.Single,Sce.PlayStation.Core.Vector3)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <param name="v">the vector to multiply</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Division(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>division operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 / vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Division(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>divide each element of a vector by a scalar float</summary>
            <param name="v">the vector to divide by scalar</param>
            <param name="f">the scalar to divide by</param>
            <returns>a new Vector3 consisting of each element of v divided by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Division(System.Single,Sce.PlayStation.Core.Vector3)">
            <summary>create a new vector consisting of {f, f, f} and divide it by vec</summary>
            <param name="f">the scalar to divide by vector</param>
            <param name="v">the vector to divide by</param>
            <returns>a new vector {f, f, f} divided by v</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xxx">
            <returns>a new vector consisting of the current vector's x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yxx">
            <returns>a new vector consisting of the current vector's y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zxx">
            <returns>a new vector consisting of the current vector's z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyx">
            <returns>a new vector consisting of the current vector's x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yyx">
            <returns>a new vector consisting of the current vector's y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zyx">
            <returns>a new vector consisting of the current vector's z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xzx">
            <returns>a new vector consisting of the current vector's x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yzx">
            <returns>a new vector consisting of the current vector's y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zzx">
            <returns>a new vector consisting of the current vector's z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xxy">
            <returns>a new vector consisting of the current vector's x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yxy">
            <returns>a new vector consisting of the current vector's y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zxy">
            <returns>a new vector consisting of the current vector's z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyy">
            <returns>a new vector consisting of the current vector's x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yyy">
            <returns>a new vector consisting of the current vector's y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zyy">
            <returns>a new vector consisting of the current vector's z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xzy">
            <returns>a new vector consisting of the current vector's x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yzy">
            <returns>a new vector consisting of the current vector's y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zzy">
            <returns>a new vector consisting of the current vector's z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xxz">
            <returns>a new vector consisting of the current vector's x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yxz">
            <returns>a new vector consisting of the current vector's y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zxz">
            <returns>a new vector consisting of the current vector's z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyz">
            <returns>a new vector consisting of the current vector's x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yyz">
            <returns>a new vector consisting of the current vector's y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zyz">
            <returns>a new vector consisting of the current vector's z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xzz">
            <returns>a new vector consisting of the current vector's x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yzz">
            <returns>a new vector consisting of the current vector's y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zzz">
            <returns>a new vector consisting of the current vector's z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xx">
            <returns>a new vector consisting of the current vector's x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yx">
            <returns>a new vector consisting of the current vector's y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zx">
            <returns>a new vector consisting of the current vector's z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xy">
            <returns>a new vector consisting of the current vector's x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yy">
            <returns>a new vector consisting of the current vector's y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zy">
            <returns>a new vector consisting of the current vector's z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xz">
            <returns>a new vector consisting of the current vector's x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yz">
            <returns>a new vector consisting of the current vector's y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zz">
            <returns>a new vector consisting of the current vector's z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyz0">
            <summary>
            return a 4 element vector consisting of the current vector with the w component set to 0
            </summary>
            <returns>a 4 element vector consisting of the current vector with the w component set to 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyz1">
            <summary>
            return a 4 element vector consisting of the current vector with the w component set to 1
            </summary>
            <returns>a 4 element vector consisting of the current vector with the w component set to 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.R">
            <summary>Red</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.G">
            <summary>Green</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.B">
            <summary>Blue</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Vector2">
            <summary>vector of 2 floats</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.X">
            <summary>x</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.Y">
            <summary>y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.Zero">
            <summary>return a new vector with x and y set to 0 and 0</summary>
            <returns>a new vector with x and y set to 0 and 0</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.One">
            <summary>return a new vector with x and y set to 1 and 1</summary>
            <returns>a new vector with x and y set to 1 and 1</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.UnitX">
            <summary>return a new vector with x and y set to 1 and 0</summary>
            <returns>a new vector with x and y set to 1 and 0</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.UnitY">
            <summary>return a new vector with x and y set to 0 and 1</summary>
            <returns>a new vector with x and y set to 0 and 1</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.#ctor(System.Single,System.Single)">
            <summary>constructor taking two floats</summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.#ctor(System.Single)">
            <summary>constructor taking one float</summary>
            <param name="f">f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Length">
            <summary>return the length of this vector</summary>
            <returns>the length of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.LengthSquared">
            <summary>return the length squared of this vector</summary>
            <returns>the length squared of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Distance(Sce.PlayStation.Core.Vector2)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Distance(Sce.PlayStation.Core.Vector2@)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.DistanceSquared(Sce.PlayStation.Core.Vector2)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.DistanceSquared(Sce.PlayStation.Core.Vector2@)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Dot(Sce.PlayStation.Core.Vector2)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Dot(Sce.PlayStation.Core.Vector2@)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Determinant(Sce.PlayStation.Core.Vector2)">
            <summary>return the determinant of the 2x2 matrix formed by this and v</summary>
            <param name="v">vector used to form the 2x2 matrix to take the determinant of</param>
            <returns>the determinant of the 2x2 matrix formed by this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Determinant(Sce.PlayStation.Core.Vector2@)">
            <summary>return the determinant of the 2x2 matrix formed by this and v</summary>
            <param name="v">vector used to form the 2x2 matrix to take the determinant of</param>
            <returns>the determinant of the 2x2 matrix formed by this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Normalize">
            <summary>return this vector normalized</summary>
            <returns>this vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Normalize(Sce.PlayStation.Core.Vector2@)">
            <summary>return this vector normalized</summary>
            <param name="result">this vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Abs">
            <summary>element wise absolute value</summary>
            <returns>element wise absolute value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Abs(Sce.PlayStation.Core.Vector2@)">
            <summary>element wise absolute value</summary>
            <param name="result">element wise absolute value of this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <returns>the min of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the min of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(System.Single)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the min of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the min of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <returns>the max of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the max of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(System.Single)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the max of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the max of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(System.Single,System.Single)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(System.Single,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(System.Single,System.Single)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(System.Single,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Lerp(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <returns>a Vector2 where each element is the result of lerping f between the corresponding elements of this and other</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Lerp(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector2 where each element is the result of lerping f between the corresponding elements of this and other</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Slerp(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>slerp between this and the other vector</summary>
            <param name="v">the other vector to slerp to</param>
            <param name="f">slerp amount</param>
            <returns>slerp between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Slerp(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>slerp between this and the other vector</summary>
            <param name="v">the other vector to slerp to</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.MoveTo(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.MoveTo(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>move to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.TurnTo(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>turn to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="angle">step angle</param>
            <returns>a new vector turned to target vector by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.TurnTo(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>turn to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="angle">step angle</param>
            <param name="result">a new vector turned to target vector by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Angle(Sce.PlayStation.Core.Vector2)">
            <summary>return the angle between this and v</summary>
            <param name="v">vector to get the angle with</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Angle(Sce.PlayStation.Core.Vector2@)">
            <summary>return the angle between this and v</summary>
            <param name="v">vector to get the angle with</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(System.Single)">
            <summary>return this vector rotated by angle</summary>
            <param name="angle">angle to rotate by</param>
            <returns>this vector rotated by angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>return this vector rotated by angle</summary>
            <param name="angle">angle to rotate by</param>
            <param name="result">this vector rotated by angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2)">
            <summary>return this vector rotated by angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>this vector rotated by angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>return this vector rotated by angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">this vector rotated by angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Reflect(Sce.PlayStation.Core.Vector2)">
            <summary>return this vector reflected about normal </summary>
            <param name="normal">the vector to reflect about</param>
            <returns>this vector reflected about normal</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Reflect(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>return this vector reflected about normal </summary>
            <param name="normal">the vector to reflect about</param>
            <param name="result">this vector reflected about normal</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Perpendicular">
            <summary>return a vector perpendicular to this</summary>
            <returns>a vector perpendicular to this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Perpendicular(Sce.PlayStation.Core.Vector2@)">
            <summary>return this rotated by +pi/2</summary>
            <param name="result">return this rotated by +pi/2 (this is different from Vector3.Perpendicular)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ProjectOnLine(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>project this onto the line (point,direction)</summary>
            <param name="point">point of the line to project onto</param>
            <param name="direction">direction of the line to project onto</param>
            <returns>projection of this onto the line (point,direction)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ProjectOnLine(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>project this onto the line (point,direction)</summary>
            <param name="point">point of the line to project onto</param>
            <param name="direction">direction of the line to project onto</param>
            <param name="result">projection of this onto the line (point,direction)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Add(Sce.PlayStation.Core.Vector2)">
            <summary>return this + v</summary>
            <param name="v">vector</param>
            <returns>this + v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Add(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this + v</summary>
            <param name="v">vector</param>
            <param name="result">this + v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Subtract(Sce.PlayStation.Core.Vector2)">
            <summary>return this - v</summary>
            <param name="v">vector</param>
            <returns>this - v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Subtract(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this - v</summary>
            <param name="v">vector</param>
            <param name="result">this - v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2)">
            <summary>return this / v</summary>
            <param name="v">vector</param>
            <returns>this / v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this / v</summary>
            <param name="v">vector</param>
            <param name="result">this / v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Negate(Sce.PlayStation.Core.Vector2@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector2.IsUnit(System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector2.IsZero">
            <summary>test if all elements of this are zero</summary>
            <returns>true if all elements of this are zero, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.IsOne">
            <summary>test if all elements of this are one</summary>
            <returns>true if all elements of this are one, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.IsNaN">
            <summary>test if any of the elements of this are NaN</summary>
            <returns>true is any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector2.Equals(Sce.PlayStation.Core.Vector2,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector2.Equals(Sce.PlayStation.Core.Vector2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ToString">
            <summary>convert vector to string</summary>
            <returns>string representation of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotation(System.Single)">
            <summary>return a new vector that breaks a rotation angle into its x and y components</summary>
            <param name="angle">the rotation angle</param>
            <returns>a new vector that breaks a rotation angle into its x and y components</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotation(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>return a new vector that breaks a rotation angle into its x and y components</summary>
            <param name="angle">the rotation angle</param>
            <param name="result">a new vector that breaks a rotation angle into its x and y components</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Length(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Length(Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.LengthSquared(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.LengthSquared(Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Distance(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Distance(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Distance(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Distance(ref Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.DistanceSquared(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to DistanceSquared(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.DistanceSquared(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to DistanceSquared(ref Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Dot(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Dot(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Dot(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Dot(ref Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Determinant(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Determinant(Vector2 v)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the determinant of the 2x2 matrix formed by v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Determinant(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Determinant(ref Vector2 v)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the determinant of the 2x2 matrix formed by v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Normalize(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Normalize()</summary>
            <param name="v">vector</param>
            <returns>the vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Normalize(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Normalize(out Vector2)</summary>
            <param name="v">vector</param>
            <param name="result">the vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Abs(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Abs()</summary>
            <param name="v">vector</param>
            <returns>element wise absolute value of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Abs(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Abs(out Vector2)</summary>
            <param name="v">vector</param>
            <param name="result">element wise absolute value of v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Min(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the min of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Min(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the min of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Min(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the min of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Min(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the min of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Max(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the max of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Max(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the max of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Max(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the max of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Max(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the max of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Clamp(Vector2, Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Clamp(ref Vector2, ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>static function equivalent to Clamp(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2@,System.Single,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Clamp(float, float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Repeat(Vector2, Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Repeat(ref Vector2, ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>static function equivalent to Repeat(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2@,System.Single,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Repeat(float, float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Lerp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Lerp(Vector2, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <returns>a Vector2 where each element is the result of lerping f between the corresponding elements of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Lerp(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Lerp(ref Vector2, float, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector2 where each element is the result of lerping f between the corresponding elements of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Slerp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Slerp(Vector2, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">slerp amount</param>
            <returns>slerp between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Slerp(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Slerp(ref Vector2, float, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.MoveTo(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to MoveTo(Vector2, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.MoveTo(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to MoveTo(ref Vector2, float, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.TurnTo(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to TurnTo(Vector2, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="angle">step angle</param>
            <returns>a new vector turned to target vector by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.TurnTo(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TurnTo(ref Vector2, float, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="angle">step angle</param>
            <param name="result">a new vector turned to target vector by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Angle(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Angle(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the angle between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Angle(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Angle(ref Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the angle between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Rotate(float)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <returns>the vector rotated by angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Rotate(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <param name="result">the vector rotated by angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Rotate(Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the vector rotated by angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Rotate(ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the vector rotated by angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Reflect(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Reflect(Vector2)</summary>
            <param name="v">vector</param>
            <param name="normal">the vector to reflect about</param>
            <returns>the vector reflected about normal</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Reflect(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Reflect(ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="normal">the vector to reflect about</param>
            <param name="result">the vector reflected about normal</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Perpendicular(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Perpendicular()</summary>
            <param name="v">vector</param>
            <returns>a vector perpendicular to v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Perpendicular(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Perpendicular(out Vector2)</summary>
            <param name="v">vector</param>
            <param name="result">a vector perpendicular to v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ProjectOnLine(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to ProjectOnLine(Vector2, Vector2)</summary>
            <param name="v">vector</param>
            <param name="point">point of the line to project onto</param>
            <param name="direction">direction of the line to project onto</param>
            <returns>projection of v onto the line (point,direction)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ProjectOnLine(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to ProjectOnLine(ref Vector2, ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="point">point of the line to project onto</param>
            <param name="direction">direction of the line to project onto</param>
            <param name="result">projection of v onto the line (point,direction)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Add(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Add(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Add(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Add(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 + v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Subtract(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Subtract(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Subtract(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Subtract(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 - v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Multiply(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 * v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Multiply(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 * v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Multiply(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Divide(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 / v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Divide(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 / v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Divide(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Negate(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Negate()</summary>
            <param name="v">vector</param>
            <returns>-v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Negate(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Negate(out Vector2)</summary>
            <param name="v">vector</param>
            <param name="result">-v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Equality(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Inequality(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 != vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Addition(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>vector addition operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 + vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Addition(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="v">the vector to add</param>
            <param name="f">the scalar float to add each element of the vector</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Addition(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="f">the scalar float to add each element of the vector</param>
            <param name="v">the vector to add</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Subtraction(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>vector subtraction operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 - vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Subtraction(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>subtract a scalar float from each element of a vector</summary>
            <param name="v">the vector to subtract from</param>
            <param name="f">the scalar float to subtract from each element of the vector</param>
            <returns>a new vector with f subtracted from each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Subtraction(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>creates a new vector consisting of {f, f}, and then subtracts v from it</summary>
            <param name="f">the scalar that we subtract v from</param>
            <param name="v">the vector to subtract</param>
            <returns>a new vector consisting of v subtracted from the vector {f, f}</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_UnaryNegation(Sce.PlayStation.Core.Vector2)">
            <summary>unary minus operator</summary>
            <param name="v">the vector to negate</param>
            <returns>unary minus applied to each member of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Multiply(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>multiplication operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 * vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Multiply(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="v">the vector to multiply</param>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Multiply(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <param name="v">the vector to multiply</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Division(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>division operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 / vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Division(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>divide each element of a vector by a scalar float</summary>
            <param name="v">the vector to divide by scalar</param>
            <param name="f">the scalar to divide by</param>
            <returns>a new Vector2 consisting of each element of v divided by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Division(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>create a new vector consisting of {f, f} and divide it by vec</summary>
            <param name="f">the scalar to divide by vector</param>
            <param name="v">the vector to divide by</param>
            <returns>a new vector {f, f} divided by v</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xx">
            <returns>a new vector consisting of the current vector's x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Yx">
            <returns>a new vector consisting of the current vector's y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy">
            <returns>a new vector consisting of the current vector's x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Yy">
            <returns>a new vector consisting of the current vector's y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy0">
            <summary>
            returns a 3 element vector consisting of the current vector with the z component set to 0
            </summary>
            <returns>a 3 element vector consisting of the current vector with the z component set to 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy1">
            <summary>
            return a 3 element vector consisting of the current vector with the z component set to 1
            </summary>
            <returns>a 3 element vector consisting of the current vector with the z component set to 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy00">
            <summary>
            return a 4 element vector consisting of the current vector with the z and w components set to 0 and 0
            </summary>
            <returns>a 4 element vector consisting of the current vector with the z and w components set to 0 and 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy01">
            <summary>
            return a 4 element vector consisting of the current vector with the z and w components set to 0 and 1
            </summary>
            <returns>a 4 element vector consisting of the current vector with the z and w components set to 0 and 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy10">
            <summary>
            return a 4 element vector consisting of the current vector with the z and w components set to 1 and 0
            </summary>
            <returns>a 4 element vector consisting of the current vector with the z and w components set to 1 and 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy11">
            <summary>
            return a 4 element vector consisting of the current vector with the z and w components set to 1 and 1
            </summary>
            <returns>a 4 element vector consisting of the current vector with the z and w components set to 1 and 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.R">
            <summary>Red</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.G">
            <summary>Green</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.BgmStatus">
            <summary>音楽の状態を表す列挙子</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.BgmStatus.Stopped">
            <summary>停止</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.BgmStatus.Playing">
            <summary>再生中</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.BgmStatus.Paused">
            <summary>一時停止</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.BgmPlayer">
            <summary>音楽再生機能を提供するクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Finalize">
            <summary>BgmPlayerのファイナライザ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Dispose">
            <summary>BgmPlayer のアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Play">
            <summary>音楽を再生する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Stop">
            <summary>音楽を停止する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Pause">
            <summary>音楽プレイヤを一時停止する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Resume">
            <summary>音楽プレイヤの一時停止を解除する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Status">
            <summary>音楽プレイヤの状態</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Volume">
            <summary>ボリューム (0.0-1.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Loop">
            <summary>ループ再生</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.PlaybackRate">
            <summary>再生速度係数とピッチ(0.25-4.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Time">
            <summary>再生時刻 (単位＝秒)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Duration">
            <summary>再生時間 (単位＝秒)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.LoopStart">
            <summary>ループ開始時刻 (単位＝秒)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.LoopEnd">
            <summary>ループ終了時刻 (単位＝秒)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.Bgm">
            <summary>音楽データ</summary>
            <remarks>音楽データとしては、mp3 ファイルを使用することができます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.#ctor(System.String)">
            <summary>Bgm のコンストラクタ (ファイル名から)</summary>
            <param name="filename">音楽データのファイル名</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.#ctor(System.Byte[])">
            <summary>Bgmのコンストラクタ(ファイルイメージから)</summary>
            <param name="fileImage">音楽データのファイルイメージ</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.Finalize">
            <summary>Bgm のファイナライザ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.Dispose">
            <summary>Bgm のアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.CreatePlayer">
            <summary>このBgmを再生するための BgmPlayer オブジェクトを作成する</summary>
            <returns>音楽データに関連付けられたBgmPlayerオブジェクト</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.SoundStatus">
            <summary>効果音の状態を表す列挙子</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.SoundStatus.Stopped">
            <summary>停止</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.SoundStatus.Playing">
            <summary>再生中</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.SoundPlayer">
            <summary>効果音再生機能を提供するクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.SoundPlayer.Finalize">
            <summary>SoundPlayerのファイナライザ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.SoundPlayer.Dispose">
            <summary>SoundPlayer のアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.SoundPlayer.Play">
            <summary>効果音を再生する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.SoundPlayer.Stop">
            <summary>効果音を停止する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Status">
            <summary>効果音の状態</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Volume">
            <summary>ボリューム (0.0-1.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Pan">
            <summary>音声の左右の位置(-1.0-1.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Loop">
            <summary>ループ再生</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.PlaybackRate">
            <summary>再生速度およびピッチ(0.25-4.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Time">
            <summary>再生時刻 (単位＝秒)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Duration">
            <summary>再生時間 (単位＝秒)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.Sound">
            <summary>効果音データ</summary>
            <remarks>効果音データとしては、wav ファイルを使用することができます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.#ctor(System.String)">
            <summary>Sound のコンストラクタ (ファイル名から)</summary>
            <param name="filename">効果音のファイル名</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.#ctor(System.Byte[])">
            <summary>Soundのコンストラクタ(ファイルイメージから)</summary>
            <param name="fileImage">効果音のファイルイメージ</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.Finalize">
            <summary>Soundのファイナライザ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.Dispose">
            <summary>Sound の アンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.CreatePlayer">
            <summary>この効果音を再生するための SoundPlayer オブジェクトを作成する</summary>
            <returns>効果音データに関連付けられたSoundPlayerオブジェクト</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraFacing">
            <summary>カメラの向き</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraFacing.Back">
            <summary>背面カメラ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraFacing.Front">
            <summary>フロントカメラ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraSize">
            <summary>カメラの画像の解像度</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraSize.Width">
            <summary>画像の幅 (pixel)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraSize.Height">
            <summary>画像の高さ (pixel)</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraSize.#ctor(System.Int32,System.Int32)">
            <summary>画像の幅と高さを指定してインスタンスを作成する</summary>
            <param name="width">画像の幅を指定する (pixel)</param>
            <param name="height">画像の幅を指定する (pixel)</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraImageFormat">
            <summary>ストリームのデータフォーマット</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraImageFormat.Rgb565">
            <summary>RGB565 フォーマット</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraImageFormat.Rgba8888">
            <summary>RGBA8888 フォーマット</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraState">
            <summary>カメラの動作状態</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraState.Closed">
            <summary>ストリームを開いていない</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraState.Stopped">
            <summary>ストリームが流れていない</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraState.Running">
            <summary>ストリームが流れている</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraState.TakingPicture">
            <summary>写真を撮影中</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.PictureState">
            <summary>写真の撮影状況</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PictureState.Idle">
            <summary>まだ写真を撮影していない</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PictureState.Running">
            <summary>写真を撮影中</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PictureState.Finishied">
            <summary>写真を撮影した</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PictureState.Failed">
            <summary>写真の撮影に失敗した</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraInfo">
            <summary>カメラの詳細情報</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraInfo.Facing">
            <summary>カメラの向き</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraInfo.SupportedPreviewSizes">
            <summary>ストリームに指定できる画像の解像度一覧</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraInfo.SupportedPictureSizes">
            <summary>写真撮影に指定できる画像の解像度一覧</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera">
            <summary>カメラを表すクラス</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.Camera.InvalidOperaion">
            <summary>メソッドが呼び出せないときのエラーコード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.Camera.ObjectDisposed">
            <summary>オブジェクトが破棄済みのときのエラーコード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.Camera.ArgumentOutOfRange">
            <summary>配列の範囲外を指定したときのエラーコード</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.GetNumberOfCameras">
            <summary>カメラの数を取得する</summary>
            <returns>カメラの数</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.GetCameraInfo(System.Int32)">
            <summary>カメラの詳細情報を取得する</summary>
            <param name="cameraId">カメラの番号</param>
            <returns>カメラの詳細情報</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.#ctor(System.Int32)">
            <summary>カメラを起動してインスタンスを作成するコンストラクタ<br/>
            インスタンスは Dispose メソッドで破棄しなければならない<br/>
            カメラは一つしか使用することができないため、別のカメラを使用するときは
            現在のインスタンスを破棄してから新しいインスタンスを作成しなければならない</summary>
            <param name="cameraId">カメラの番号</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Finalize">
            <summary>カメラのインスタンスを破棄するデストラクタ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Dispose">
            <summary>カメラのインスタンスを破棄する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Dispose(System.Boolean)">
            <summary>カメラのインスタンスを破棄する</summary>
            <param name="disposing">インスタンスを破棄している途中かどうか</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Open">
            <summary>デフォルトの解像度でストリームを開く</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Open(System.Int32)">
            <summary>指定した解像度でストリームを開く</summary>
            <param name="sizeId">ストリームに使用する画像の解像度の番号</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Close">
            <summary>ストリームを閉じる</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Start">
            <summary>画像のストリーミングを開始する<br/>
            FrameChanged イベントが設定されているときは非同期にデータをバッファに読み込む</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Stop">
            <summary>画像のストリーミングを停止する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.DoWork(System.Object)">
            <summary>ワーカースレッドでストリームのデータをバッファに読み込む</summary>
            <param name="obj">カメラのインスタンス</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Read">
            <summary>ストリームのデータをバッファに読み込む</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.TakePicture(System.Int32)">
            <summary>写真を撮影する<br/>
            撮影した写真のフォーマットは JPEG である<br/>
            撮影した写真はファイルに保存される<br/>
            このメソッドは画像をストリーミングしているときにのみ呼び出すことができる</summary>
            <param name="sizeId">撮影に使用する画像の解像度の番号</param>
        </member>
        <member name="E:Sce.PlayStation.Core.Device.Camera.FrameChanged">
            <summary>ストリームの画像のフレームが変化したときに発生するイベント<br/>
            Start メソッドを呼び出したスレッドとは別のスレッドで非同期に発生する</summary>
        </member>
        <member name="E:Sce.PlayStation.Core.Device.Camera.PictureStateChanged">
            <summary>写真の撮影状況が変化したときに発生するイベント<br/>
            TakePicture メソッドを呼び出したスレッドとは別のスレッドで非同期に発生する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.CameraState">
            <summary>カメラの動作状態を取得する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.PictureState">
            <summary>写真の撮影状況を取得する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.CurrentPreviewSize">
            <summary>現在設定されているストリームの画像の解像度を取得する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.CurrentPreviewImageFormat">
            <summary>現在設定されているストリームのデータフォーマットを取得する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.PictureFilename">
            <summary>撮影した写真のファイルパスを取得する</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera.FrameChangedCallback">
            <summary>ストリームの画像のフレームが変化したときに呼ばれるコールバックメソッド</summary>
            <param name="frameBuffer">画像が格納されたフレームバッファ</param>
            <param name="frameCount">画像のフレーム番号</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera.FrameChangedEventArgs">
            <summary>ストリームの画像のフレームが変化したときに発生するイベントで渡される引数クラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.FrameChangedEventArgs.#ctor(System.Byte[],System.Int64)">
            <summary>コンストラクタ</summary>
            <param name="frameBuffer">フレームのデータを格納したバッファ</param>
            <param name="frameCount">ストリーミングを開始したときからのフレームの番号</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.FrameChangedEventArgs.FrameBuffer">
            <summary>フレームのデータを格納したバッファ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.FrameChangedEventArgs.FrameCount">
            <summary>ストリーミングを開始したときからのフレームの番号</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera.PictureStateChangedCallback">
            <summary>写真の撮影状況が変化したときに呼ばれるコールバックメソッド</summary>
            <param name="taken">写真の撮影状況</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera.PictureStateChangedEventArgs">
            <summary>写真の撮影状況が変化したときに発生するイベントで渡される引数クラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.PictureStateChangedEventArgs.#ctor(Sce.PlayStation.Core.Device.PictureState)">
            <summary>コンストラクタ</summary>
            <param name="taken">写真の撮影状況</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.PictureStateChangedEventArgs.PictureState">
            <summary>写真の撮影状況</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraImportDialog">
            <summary>写真を撮影するコモンダイアログクラス</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.ICommonDialog">
            <summary>コモンダイアログ共通のインターフェイス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.ICommonDialog.Open">
            <summary>コモンダイアログを開く</summary>
            <remarks>メインスレッドでのみ呼び出すことができます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.ICommonDialog.Abort">
            <summary>コモンダイアログを中断する</summary>
            <remarks>メインスレッドでのみ呼び出すことができます。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.ICommonDialog.State">
            <summary>コモンダイアログの状態</summary>
            <remarks>メインスレッドでのみ取得することができます。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.ICommonDialog.Result">
            <summary>コモンダイアログの動作結果</summary>
            <remarks>メインスレッドでのみ取得することができます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.#ctor">
            <summary>コンストラクタ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Finalize">
            <summary>デストラクタ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Dispose">
            <summary>写真撮影コモンダイアログオブジェクトを破棄する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Dispose(System.Boolean)">
            <summary>写真撮影コモンダイアログオブジェクトを破棄する</summary>
            <param name="disposing">オブジェクトを破棄している途中かどうか</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Open">
            <summary>写真撮影コモンダイアログを開く</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Open(Sce.PlayStation.Core.Device.CameraImportDialog.DialogArguments)">
            <summary>写真撮影コモンダイアログを開く</summary>
            <param name="args">写真撮影コモンダイアログのパラメーター</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Abort">
            <summary>写真撮影コモンダイアログを途中で終了する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.CameraImportDialog.Filename">
            <summary>ローカルに保存したコンテンツのファイルパスを取得する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.CameraImportDialog.State">
            <summary>写真撮影コモンダイアログの状態を取得する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.CameraImportDialog.Result">
            <summary>写真撮影コモンダイアログの結果を取得する</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraImportDialog.DialogArguments">
            <summary>写真撮影コモンダイアログを開くときに指定できるパラメーター</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraImportDialog.DialogResults">
            <summary>写真を保存した結果</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraImportDialog.DialogResults.Filename">
            <summary>ローカルに保存したコンテンツのファイルパス</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.PhotoImportDialog">
            <summary>写真を選択するコモンダイアログクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.#ctor">
            <summary>コンストラクタ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Finalize">
            <summary>デストラクタ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Dispose">
            <summary>写真選択コモンダイアログオブジェクトを破棄する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Dispose(System.Boolean)">
            <summary>写真選択コモンダイアログオブジェクトを破棄する</summary>
            <param name="disposing">オブジェクトを破棄している途中かどうか</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Open">
            <summary>写真選択コモンダイアログを開く</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Open(Sce.PlayStation.Core.Device.PhotoImportDialog.DialogArguments)">
            <summary>写真選択コモンダイアログを開く</summary>
            <param name="args">写真選択コモンダイアログのパラメーター</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Abort">
            <summary>写真選択コモンダイアログを途中で終了する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.PhotoImportDialog.Filename">
            <summary>ローカルに保存したコンテンツのファイルパスを取得する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.PhotoImportDialog.State">
            <summary>写真選択コモンダイアログの状態を取得する</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.PhotoImportDialog.Result">
            <summary>写真選択コモンダイアログの結果を取得する</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.PhotoImportDialog.DialogArguments">
            <summary>写真選択コモンダイアログを開くときに指定できるパラメーター</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.PhotoImportDialog.DialogResults">
            <summary>写真を保存した結果</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PhotoImportDialog.DialogResults.Filename">
            <summary>ローカルに保存したコンテンツのファイルパス</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.AccountInformation">
            <summary>アカウント情報をあらわす static クラス</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.AccountInformation.UniqueID">
            <summary>ユニーク ID</summary>
            <remarks>16 バイトの数字を取得します。これは各アカウントに対してユニークな値となります。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.Clipboard">
            <summary>クリップボードにアクセスするためのクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.Clipboard.SetText(System.String)">
            <summary>クリップボードにテキストを格納する</summary>
            <param name="text">格納する文字列</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.Clipboard.GetText">
            <summary>クリップボードのテキストを取得する</summary>
            <returns>クリップボードの文字列</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.CommonDialogState">
            <summary>コモンダイアログの状態</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogState.None">
            <summary>使われていない状態</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogState.Running">
            <summary>動作中</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogState.Finished">
            <summary>終了した</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.CommonDialogResult">
            <summary>コモンダイアログの動作結果</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogResult.OK">
            <summary>成功</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogResult.Canceled">
            <summary>ユーザーによってキャンセルされた</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogResult.Aborted">
            <summary>プログラムによって中断された</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogResult.Error">
            <summary>エラーが発生した</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.TextInputMode">
            <summary>テキスト入力の動作モード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.TextInputMode.Normal">
            <summary>通常の文字入力モード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.TextInputMode.BasicLatin">
            <summary>ASCIIのみの入力モード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.TextInputMode.Password">
            <summary>パスワード入力モード</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.TextInputDialog">
            <summary>テキスト入力ダイアログ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.#ctor">
            <summary>TextInputDialog のコンストラクタ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.Finalize">
            <summary>TextInputDialogのファイナライザ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.Dispose">
            <summary>TextInputDialog のアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.Open">
            <summary>テキスト入力ダイアログを開く</summary>
            <remarks>メインスレッドでのみ呼び出すことができます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.Abort">
            <summary>テキスト入力ダイアログを中断する</summary>
            <remarks>メインスレッドでのみ呼び出すことができます。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.TextInputDialog.State">
            <summary>ダイアログの状態</summary>
            <remarks>メインスレッドでのみ取得することができます。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.TextInputDialog.Result">
            <summary>ダイアログの動作結果</summary>
            <remarks>メインスレッドでのみ取得することができます。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.TextInputDialog.Mode">
            <summary>テキスト入力モード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.TextInputDialog.Text">
            <summary>編集対象のテキスト</summary>
            <remarks>Open()を呼び出す前に Text を設定しておくことで、テキスト入力ダイアログの初期状態の文字列を指定することができます。また、State が Finished になり、かつ Result が OK であることを確認した後に Text を取得することで、テキストの編集結果を取得することができます。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseDialog">
            <summary>アプリ内課金を処理するためのダイアログをあらわすクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.#ctor">
            <summary>ダイアログを作成する</summary>
            <remarks>ダイアログクラスが作成され、プロダクトのリストがメタデータから読み込まれます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Finalize">
            <summary>ダイアログを削除する</summary>
            <remarks>ダイアログを削除します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Dispose">
            <summary>ダイアログのアンマネージドリソースを解放する</summary>
            <remarks>ダイアログのアンマネージドリソースを解放します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.GetProductInfo(System.String[])">
            <summary>ダイアログを開き、プロダクト情報をサーバーから取得する</summary>
            <param name="labels">プロダクトのラベルの配列 (nullならばすべて選択)</param>
            <remarks>ダイアログを開いてサーバーに接続し、指定されたプロダクトのプロダクト情報を取得します。この関数はプロダクトごとにサーバーにリクエストを送信するため、一度に大量の情報を取得する場合は非常に時間がかかる可能性がありますのでご注意ください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.GetTicketInfo">
            <summary>ダイアログを開き、チケット情報をサーバーから取得する</summary>
            <remarks>ダイアログを開いてサーバーに接続し、すべてのプロダクトのチケット情報を取得します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Purchase(System.String)">
            <summary>ダイアログを開き、プロダクトを購入する</summary>
            <param name="label">プロダクトのラベル</param>
            <remarks>ダイアログを開いてサーバーに接続し、指定されたプロダクトを購入します。なお、あらかじめプロダクト情報とチケット情報を取得しておく必要があります。以下の場合には例外が発生します。
            <list type="bullet">
            <item><description>指定されたプロダクトがリストに登録されていない</description></item>
            <item><description>プロダクト情報かチケット情報が取得されていない</description></item>
            <item><description>指定されたプロダクトが通常型かつ購入ずみ</description></item>
            </list>
            <para>ダイアログ処理が完了すると、結果が OK の場合はチケット情報がすべて更新されます。結果が Error または Aborted の場合はチケット情報は更新されず、IsTicketInfoComplete プロパティが false になります。その場合、あらためて GetTicketInfo 関数でチケット情報を取得し、処理が成功したか失敗したかを確認してください。
            </para>
            </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Consume(System.String)">
            <summary>ダイアログを開き、チケットを消費する</summary>
            <param name="label">プロダクトのラベル</param>
            <remarks>ダイアログを開いてサーバーに接続し、指定されたプロダクトのチケットを消費します。なお、あらかじめチケット情報を取得しておく必要があります。以下の場合には例外が発生します。
            <list type="bullet">
            <item><description>指定されたプロダクトがリストに登録されていない</description></item>
            <item><description>チケット情報が取得されていない</description></item>
            <item><description>指定されたプロダクトが消費型ではない</description></item>
            <item><description>指定されたプロダクトの残り回数がゼロ</description></item>
            </list>
            <para>ダイアログ処理が完了すると、結果が OK の場合はチケット情報がすべて更新されます。結果が Error または Aborted の場合はチケット情報は更新されず、IsTicketInfoComplete プロパティが false になります。その場合、あらためて GetTicketInfo 関数でチケット情報を取得し、処理が成功したか失敗したかを確認してください。
            </para>
            </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Open">
            <summary>ダイアログを開く (この関数はサポートされません)</summary>
            <remarks>この関数はサポートされません。ダイアログを開くには GetProductInfo, GetTicketInfo, Purchase, Consume 関数を使用してください。 </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Abort">
            <summary>ダイアログを中断する (現在未対応です)</summary>
            <remarks>ダイアログの処理を中断して、ダイアログを閉じます。 </remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.State">
            <summary>ダイアログ処理の状態</summary>
            <remarks>最後に実行されたダイアログ処理の状態を取得します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Result">
            <summary>ダイアログ処理の結果</summary>
            <remarks>最後に実行されたダイアログ処理の結果を取得します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Command">
            <summary>ダイアログ処理のコマンド</summary>
            <remarks>最後に実行されたダイアログ処理のコマンドを取得します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Arguments">
            <summary>ダイアログ処理の引数</summary>
            <remarks>最後に実行されたダイアログ処理の引数を取得します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.ProductList">
            <summary>プロダクトのリスト</summary>
            <remarks>購入可能なプロダクトのリストを取得します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.IsProductInfoComplete">
            <summary>プロダクト情報がすべて取得されているかどうか</summary>
            <remarks>プロダクト情報がすべて取得されていれば true を返します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.IsTicketInfoComplete">
            <summary>チケット情報がすべて取得されているかどうか</summary>
            <remarks>チケット情報がすべて取得されていれば true を返します。チケット情報がまだ取得されていない場合、またはエラーによって最新状態に更新できなかった場合は false を返します。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseCommand">
            <summary>アプリ内課金の動作コマンド</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.GetProductInfo">
            <summary>プロダクト情報をサーバーから取得する</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.GetTicketInfo">
            <summary>チケット情報をサーバーから取得する</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.Purchase">
            <summary>プロダクトを購入する</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.Consume">
            <summary>チケットを消費する</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseTicketType">
            <summary>アプリ内課金のチケットタイプ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseTicketType.Normal">
            <summary>通常型</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseTicketType.Consumable">
            <summary>消費型</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseProduct">
            <summary>アプリ内課金で購入可能なプロダクトをあらわすクラス</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.Label">
            <summary>プロダクトのラベル</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.Name">
            <summary>プロダクトの名前</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.Price">
            <summary>プロダクトの価格 (GetProductInfo で取得される)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.TicketType">
            <summary>チケットのタイプ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.IsTicketValid">
            <summary>チケットが有効かどうか (GetTicketInfo で取得される)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.ConsumableTicketCount">
            <summary>チケットの消費可能な残り回数 (GetTicketInfo で取得される)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseProductList">
            <summary>アプリ内課金で購入可能なプロダクトのリストをあらわすクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseProductList.IndexOf(System.String)">
            <summary>指定されたラベルをもつ要素の番号を返す (なければ -1)</summary>
            <param name="label">要素のラベル</param>
            <returns>要素の番号 (なければ -1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseProductList.Contains(System.String)">
            <summary>指定されたラベルをもつ要素が存在するかどうかを判定する</summary>
            <param name="label">要素のラベル</param>
            <returns>要素が存在すれば true</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseProductList.GetEnumerator">
            <summary>列挙子を返す</summary>
            <returns>列挙子</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProductList.Count">
            <summary>要素数</summary>
            <remarks>リストに格納された要素の数を返します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProductList.Item(System.Int32)">
            <summary>インデクサ (番号またはラベルによる)</summary>
            <remarks>リストに格納された要素を取得します。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.NetworkInterfaceType">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.NetworkInterfaceType.Ethernet">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.NetworkInterfaceType.Wireless80211">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.NetworkInterfaceType.MobileBroadband">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.NetworkInformation">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.NetworkInformation.GetNetworkInterfaceType">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.PersistentMemory">
            <summary>永続的なメモリ領域を提供するクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.PersistentMemory.Write(System.Byte[])">
            <summary>永続メモリにデータを書き込む</summary>
            <param name="data">書き込み内容 (最大64KB)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.PersistentMemory.Read">
            <summary>永続メモリにデータを読み出す</summary>
            <returns>読み出したデータ (64KB)</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.Shell">
            <summary>システムの機能を呼び出すためのクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.Shell.Execute(Sce.PlayStation.Core.Environment.Shell.Action@)">
            <summary>システム機能の呼び出しを実行する</summary>
            <param name="action">システム機能の呼び出し内容</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.Shell.Action">
            <summary>システム機能の呼び出し内容を表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.Shell.Action.BrowserAction(System.String)">
            <summary>ブラウザを呼ぶためのAction構造体を生成する</summary>
            <param name="url">ブラウザで開くURL</param>
            <returns>ブラウザ呼び出しを意味するAction構造体</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.RestoredEventArgs">
            <summary>最小化からの復帰イベントに渡ってくるデータ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.MinimizedEventArgs">
            <summary>最小化イベントで渡ってくるデータ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemEvents">
            <summary>システムからのイベントを受け取るためのクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.SystemEvents.CheckEvents">
            <summary>システムのイベントをチェックして状態を更新する</summary>
        </member>
        <member name="E:Sce.PlayStation.Core.Environment.SystemEvents.OnRestored">
            <summary>最小化からの復帰イベントハンドラ</summary>
        </member>
        <member name="E:Sce.PlayStation.Core.Environment.SystemEvents.OnMinimized">
            <summary>最小化イベントハンドラ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemEvents.RestoredEventHandler">
            <summary>最小化からの復帰イベントハンドラの型</summary>
            <param name="sender">送信元オブジェクト</param>
            <param name="e">イベントデータ</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemEvents.MinimizedEventHandler">
            <summary>最小化イベントハンドラの型</summary>
            <param name="sender">送信元オブジェクト</param>
            <param name="e">イベントデータ</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemMemory">
            <summary>システムのメモリの状態を取得するクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.SystemMemory.Dump">
            <summary>デバッグ情報を出力します(内容は将来変更される場合があります)。</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.GamePadButtonMeaning">
            <summary>○×ボタンの意味</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.GamePadButtonMeaning.CrossIsEnter">
            <summary>×ボタンが決定</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.GamePadButtonMeaning.CircleIsEnter">
            <summary>○ボタンが決定</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.YesNoLayout">
            <summary>メッセージダイアログなどのYesとNoの位置</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.YesNoLayout.YesIsLeft">
            <summary>Yesが左</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.YesNoLayout.YesIsRight">
            <summary>Yesが右</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemParameters">
            <summary>システムのパラメタを受け取るためのクラス</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.Language">
            <summary>システムの言語設定</summary>
            <remarks>このプロパティが取りうる値は以下の通りです。
            \li ja-JP : 日本語  \li en-US : 英語(US)  \li en-GB : 英語(UK)  \li fr-FR : フランス語  \li es-ES : スペイン語  \li de-DE : ドイツ語  \li it-IT : イタリア語  \li nl-NL : オランダ語  \li pt-PT : ポルトガル語  \li pt-BR : ポルトガル語(ブラジル)  \li ru-RU : ロシア語  \li ko-KR : 韓国語  \li zh-Hant : 中国語(繁体字)  \li zh-Hans : 中国語(簡体字)  \li fi_FI : フィンランド語  \li sv-SE : スウェーデン語  \li da-DK : デンマーク語  \li nb-NO : ノルウェー語  \li pl-PL : ポーランド語  
            将来新たな言語をサポートするためにこの範囲が拡張され、アプリケーションにとって未知の値が返るようになる可能性があります。アプリケーションは、このプロパティが未知の値であった場合でも、正常に動作するように記述してください。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.GamePadButtonMeaning">
            <summary>○×ボタンの意味</summary>
            <remarks>○と×のボタンの意味は、地域によって異なります。このプロパティで、システムに設定されている○×ボタンの意味を取得することができます。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.YesNoLayout">
            <summary>メッセージダイアログなどのYesとNoの位置</summary>
            <remarks>動作プラットフォームによって、メッセージダイアログなどの肯定的な意味のボタンと、否定的な意味のボタンの左右の位置が、異なります。このプロパティで、動作プラットフォームの自然なレイアウトを取得することができます。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.DisplayDpiX">
            <summary>ディスプレイのインチ毎のドット数 (X軸方向)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.DisplayDpiY">
            <summary>ディスプレイのインチ毎のドット数 (Y軸方向)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.FrameBuffer">
            <summary>フレームバッファを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.#ctor">
            <summary>フレームバッファを作成する</summary>
            <remarks>フレームバッファを作成します。カラーやデプスの格納先を設定して使用してください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.#ctor(Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>デフォルトフレームバッファを作成する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.#ctor(Sce.PlayStation.Core.Graphics.FrameBuffer)">
            <summary>フレームバッファを複製する</summary>
            <param name="buffer">フレームバッファ</param>
            <remarks>フレームバッファを複製します。複製されたフレームバッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.ShallowClone">
            <summary>フレームバッファを複製する</summary>
            <returns>フレームバッファの複製</returns>
            <remarks>フレームバッファを複製します。複製されたフレームバッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.Finalize">
            <summary>フレームバッファを削除する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.Dispose">
            <summary>フレームバッファのアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.GetColorTarget">
            <summary>カラーの格納先を取得する</summary>
            <returns>カラーの格納先を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetColorTarget(Sce.PlayStation.Core.Graphics.RenderTarget)">
            <summary>カラーの格納先を設定する</summary>
            <param name="target">カラーの格納先を表す構造体</param>
            <remarks>カラーの格納先を構造体で設定します。テクスチャを格納先に設定する場合は、テクスチャが Renderable オプションを指定して作成されている必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetColorTarget(Sce.PlayStation.Core.Graphics.ColorBuffer)">
            <summary>カラーの格納先を設定する (カラーバッファ用)</summary>
            <param name="buffer">カラーバッファ (nullならば解除)</param>
            <remarks>カラーの格納先にカラーバッファを設定します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetColorTarget(Sce.PlayStation.Core.Graphics.Texture2D,System.Int32)">
            <summary>カラーの格納先を設定する (2Dテクスチャ用)</summary>
            <param name="texture">2Dテクスチャ (nullならば解除)</param>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <remarks>カラーの格納先に2Dテクスチャを設定します。テクスチャは Renderable オプションを指定して作成されている必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetColorTarget(Sce.PlayStation.Core.Graphics.TextureCube,System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace)">
            <summary>カラーの格納先を設定する (キューブテクスチャ用)</summary>
            <param name="texture">キューブテクスチャ (nullならば解除)</param>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブ面</param>
            <remarks>カラーの格納先にキューブテクスチャを設定します。テクスチャは Renderable オプションを指定して作成されている必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.GetDepthTarget">
            <summary>デプスの格納先を取得する</summary>
            <returns>デプスの格納先を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetDepthTarget(Sce.PlayStation.Core.Graphics.RenderTarget)">
            <summary>デプスの格納先を設定する</summary>
            <param name="target">デプスの格納先を表す構造体</param>
            <remarks>デプスの格納先を構造体で設定します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetDepthTarget(Sce.PlayStation.Core.Graphics.DepthBuffer)">
            <summary>デプスの格納先を設定する (デプスバッファ用)</summary>
            <param name="buffer">デプスバッファ (nullならば解除)</param>
            <remarks>デプスの格納先にデプスバッファを設定します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.Status">
            <summary>フレームバッファの状態 (レンダリング可能ならばtrue)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.Width">
            <summary>フレームバッファの幅</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.Height">
            <summary>フレームバッファの高さ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.AspectRatio">
            <summary>フレームバッファのアスペクト比 (width/height)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.Rectangle">
            <summary>フレームバッファの全体サイズ矩形 (0,0,width,height)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.ColorFormat">
            <summary>フレームバッファのカラーフォーマット</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.DepthFormat">
            <summary>フレームバッファのデプスフォーマット</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.MultiSampleMode">
            <summary>フレームバッファのマルチサンプルモード</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.RenderTarget">
            <summary>レンダリング結果の格納先を表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.#ctor(Sce.PlayStation.Core.Graphics.ColorBuffer)">
            <summary>レンダリング結果の格納先を表す構造体を作成する</summary>
            <param name="buffer">カラーバッファ (nullならば解除)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.#ctor(Sce.PlayStation.Core.Graphics.DepthBuffer)">
            <summary>レンダリング結果の格納先を表す構造体を作成する</summary>
            <param name="buffer">デプスバッファ (nullならば解除)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,System.Int32)">
            <summary>レンダリング結果の格納先を表す構造体を作成する</summary>
            <param name="texture">2Dテクスチャ (nullならば解除)</param>
            <param name="level">テクスチャのミップマップレベル (0～LevelCount-1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.#ctor(Sce.PlayStation.Core.Graphics.TextureCube,System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace)">
            <summary>レンダリング結果の格納先を表す構造体を作成する</summary>
            <param name="texture">キューブテクスチャ (nullならば解除)</param>
            <param name="level">テクスチャのミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブテクスチャのキューブ面</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.Set(Sce.PlayStation.Core.Graphics.ColorBuffer)">
            <summary>レンダリング結果の格納先を表す構造体に値をセットする</summary>
            <param name="buffer">カラーバッファ (nullならば解除)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.Set(Sce.PlayStation.Core.Graphics.DepthBuffer)">
            <summary>レンダリング結果の格納先を表す構造体に値をセットする</summary>
            <param name="buffer">デプスバッファ (nullならば解除)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.Set(Sce.PlayStation.Core.Graphics.Texture2D,System.Int32)">
            <summary>レンダリング結果の格納先を表す構造体に値をセットする</summary>
            <param name="texture">2Dテクスチャ (nullならば解除)</param>
            <param name="level">テクスチャのミップマップレベル (0～LevelCount-1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.Set(Sce.PlayStation.Core.Graphics.TextureCube,System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace)">
            <summary>レンダリング結果の格納先を表す構造体に値をセットする</summary>
            <param name="texture">キューブテクスチャ (nullならば解除)</param>
            <param name="level">テクスチャのミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブテクスチャのキューブ面</param>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.RenderTarget.Buffer">
            <summary>レンダリング結果を格納するピクセルバッファ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.RenderTarget.Level">
            <summary>レンダリング結果を格納するテクスチャのミップマップレベル</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.RenderTarget.CubeFace">
            <summary>レンダリング結果を格納するキューブテクスチャのキューブ面</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.MultiSampleMode">
            <summary>マルチサンプルモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.MultiSampleMode.None">
            <summary>マルチサンプルなし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.MultiSampleMode.Msaa2x">
            <summary>マルチサンプルx2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.MultiSampleMode.Msaa4x">
            <summary>マルチサンプルx4</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.GraphicsContext">
            <summary>グラフィクスコンテキストを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.#ctor">
            <summary>グラフィクスコンテキストを作成する</summary>
            <remarks>標準的な設定でグラフィクスコンテキストを作成します。なお、複数のグラフィクスコンテキストを作成することはできません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.#ctor(System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.MultiSampleMode)">
            <summary>グラフィクスコンテキストを作成する (スクリーンパラメータあり)</summary>
            <param name="width">スクリーンの幅 (0ならばデフォルト)</param>
            <param name="height">スクリーンの高さ (0ならばデフォルト)</param>
            <param name="colorFormat">スクリーンのカラーフォーマット (PixelFormat.Noneならばデフォルト)</param>
            <param name="depthFormat">スクリーンのデプスフォーマット (PixelFormat.Noneならばデフォルト)</param>
            <param name="multiSampleMode">スクリーンのマルチサンプルモード (MultiSampleMode.Noneならばデフォルト)</param>
            <remarks>指定されたパラメータでグラフィクスコンテキストを作成します。カラーフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565 が指定できます。デプスフォーマットには Depth16, Depth24, Depth16Stencil8, Depth24Stencil8 が指定できます。なお、複数のグラフィクスコンテキストを作成することはできません。
            <para>指定されたスクリーンサイズがデバイスのディスプレイ解像度と異なる場合は、指定されたサイズの仮想的なスクリーンが作成され、描画された内容がスケーリングされて表示されます。スクリーンのアスペクト比は保持され、必要に応じてピラーボックスまたはレターボックスが表示されます。</para>
            <para>なおスクリーンサイズは最大サイズ以下に制限されます。最大サイズのデフォルト値は 1280x800 です。最大サイズは PublishingUtility で指定できます。アプリケーションはスクリーンサイズが最大サイズに等しい場合でも正しく動作することが要求されます。</para>
            <para>指定されたフォーマットがデバイスで利用可能でない場合は、指定されたフォーマットに近い別のフォーマットが使用されます。</para>
            </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Finalize">
            <summary>グラフィクスコンテキストを削除する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Dispose">
            <summary>グラフィクスコンテキストのアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SwapBuffers">
            <summary>スクリーンを更新する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Clear">
            <summary>フレームバッファをクリアする</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Clear(Sce.PlayStation.Core.Graphics.ClearMask)">
            <summary>フレームバッファをクリアする (マスクあり)</summary>
            <param name="mask">バッファのクリアマスク</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.DrawArrays(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32)">
            <summary>プリミティブを描画する</summary>
            <param name="mode">プリミティブの描画モード</param>
            <param name="first">プリミティブの開始頂点</param>
            <param name="count">プリミティブの頂点数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.DrawArrays(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32,System.Int32)">
            <summary>プリミティブを描画する (複数プリミティブ用)</summary>
            <param name="mode">プリミティブの描画モード</param>
            <param name="first">プリミティブの開始頂点</param>
            <param name="count">プリミティブの頂点数</param>
            <param name="repeat">プリミティブの数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.DrawArrays(Sce.PlayStation.Core.Graphics.Primitive[])">
            <summary>プリミティブを描画する (プリミティブ配列用)</summary>
            <param name="primitives">プリミティブ配列</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.DrawArrays(Sce.PlayStation.Core.Graphics.Primitive[],System.Int32,System.Int32)">
            <summary>プリミティブを描画する (プリミティブ配列用、範囲あり)</summary>
            <param name="primitives">プリミティブ配列</param>
            <param name="first">プリミティブの開始番号</param>
            <param name="count">プリミティブの数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.ReadPixels(System.Byte[],Sce.PlayStation.Core.Graphics.PixelFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>フレームバッファのピクセルを読み出す</summary>
            <param name="pixels">ピクセルデータの格納先</param>
            <param name="format">ピクセルフォーマット</param>
            <param name="sx">転送元のX座標</param>
            <param name="sy">転送元のY座標</param>
            <param name="sw">転送元の幅</param>
            <param name="sh">転送元の高さ</param>
            <remarks>指定された配列にフレームバッファのピクセルをコピーします。ピクセルフォーマットには Rgba またはフレームバッファと同じフォーマットが指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.ReadPixels(Sce.PlayStation.Core.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>フレームバッファのピクセルを読み出す (2Dテクスチャにコピー)</summary>
            <param name="texture">2Dテクスチャ</param>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="dx">転送先のX座標</param>
            <param name="dy">転送先のY座標</param>
            <param name="sx">転送元のX座標</param>
            <param name="sy">転送元のY座標</param>
            <param name="sw">転送元の幅</param>
            <param name="sh">転送元の高さ</param>
            <remarks>指定された2Dテクスチャにフレームバッファのピクセルをコピーします。利用可能なテクスチャフォーマットは Rgba, Rgba4444, Rgba5551, Rgb565 です。なお、アルファ成分がないフレームバッファからアルファ成分があるテクスチャにはコピーできません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.ReadPixels(Sce.PlayStation.Core.Graphics.TextureCube,System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>フレームバッファのピクセルを読み出す (キューブテクスチャにコピー)</summary>
            <param name="texture">キューブテクスチャ</param>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブ面</param>
            <param name="dx">転送先のX座標</param>
            <param name="dy">転送先のY座標</param>
            <param name="sx">転送元のX座標</param>
            <param name="sy">転送元のY座標</param>
            <param name="sw">転送元の幅</param>
            <param name="sh">転送元の高さ</param>
            <remarks>指定されたキューブテクスチャにフレームバッファのピクセルをコピーします。利用可能なテクスチャフォーマットは Rgba, Rgba4444, Rgba5551, Rgb565 です。なお、アルファ成分がないフレームバッファからアルファ成分があるテクスチャにはコピーできません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetShaderProgram">
            <summary>シェーダープログラムを取得する</summary>
            <returns>シェーダープログラム</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetShaderProgram(Sce.PlayStation.Core.Graphics.ShaderProgram)">
            <summary>シェーダープログラムを設定する</summary>
            <param name="program">シェーダープログラム (nullならば解除)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetVertexBuffer(System.Int32)">
            <summary>頂点バッファを取得する</summary>
            <param name="index">頂点バッファ番号 (0～3)</param>
            <returns>頂点バッファ</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetVertexBuffer(System.Int32,Sce.PlayStation.Core.Graphics.VertexBuffer)">
            <summary>頂点バッファを設定する</summary>
            <param name="index">頂点バッファ番号 (0～3)</param>
            <param name="buffer">頂点バッファ (nullならば解除)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetTexture(System.Int32)">
            <summary>テクスチャを取得する</summary>
            <param name="index">テクスチャ番号 (0～7)</param>
            <returns>テクスチャ</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetTexture(System.Int32,Sce.PlayStation.Core.Graphics.Texture)">
            <summary>テクスチャを設定する</summary>
            <param name="index">テクスチャ番号 (0～7)</param>
            <param name="texture">テクスチャ (nullならば解除)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetFrameBuffer">
            <summary>フレームバッファを取得する</summary>
            <returns>フレームバッファ</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetFrameBuffer(Sce.PlayStation.Core.Graphics.FrameBuffer)">
            <summary>フレームバッファを設定する</summary>
            <param name="buffer">フレームバッファ (nullならば解除)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetEnableMode">
            <summary>各グラフィクス機能が有効かどうかをあらわすフラグの論理和を取得する</summary>
            <returns>各グラフィクス機能が有効かどうかをあらわすフラグの論理和</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetEnableMode(Sce.PlayStation.Core.Graphics.EnableMode)">
            <summary>各グラフィクス機能が有効かどうかをあらわすフラグの論理和を設定する</summary>
            <returns>各グラフィクス機能が有効かどうかをあらわすフラグの論理和</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.IsEnabled(Sce.PlayStation.Core.Graphics.EnableMode)">
            <summary>指定されたグラフィクス機能が有効かどうかを取得する</summary>
            <param name="mode">有効または無効にするグラフィクス機能</param>
            <returns>有効ならばtrue</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Enable(Sce.PlayStation.Core.Graphics.EnableMode,System.Boolean)">
            <summary>指定されたグラフィクス機能を有効または無効にする</summary>
            <param name="mode">有効または無効にするグラフィクス機能</param>
            <param name="status">有効ならばtrue</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Enable(Sce.PlayStation.Core.Graphics.EnableMode)">
            <summary>指定されたグラフィクス機能を有効にする</summary>
            <param name="mode">有効または無効にするグラフィクス機能</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Disable(Sce.PlayStation.Core.Graphics.EnableMode)">
            <summary>指定されたグラフィクス機能を無効にする</summary>
            <param name="mode">有効または無効にするグラフィクス機能</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetScissor">
            <summary>シザーテストの矩形を取得する</summary>
            <returns>シザーテストの矩形</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetScissor(Sce.PlayStation.Core.Imaging.ImageRect)">
            <summary>シザーテストの矩形を設定する</summary>
            <param name="rectangle">シザーテストの矩形</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>シザーテストの矩形を設定する</summary>
            <param name="x">シザーテストの矩形のX座標の最小値</param>
            <param name="y">シザーテストの矩形のY座標の最小値</param>
            <param name="w">シザーテストの矩形の幅</param>
            <param name="h">シザーテストの矩形の高さ</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetViewport">
            <summary>ビューポートの矩形を取得する</summary>
            <returns>ビューポートの矩形</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetViewport(Sce.PlayStation.Core.Imaging.ImageRect)">
            <summary>ビューポートの矩形を設定する</summary>
            <param name="rectangle">ビューポートの矩形</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ビューポートの矩形を設定する</summary>
            <param name="x">ビューポートの矩形のX座標の最小値</param>
            <param name="y">ビューポートの矩形のY座標の最小値</param>
            <param name="w">ビューポートの矩形の幅</param>
            <param name="h">ビューポートの矩形の高さ</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetDepthRange">
            <summary>デプス値の範囲を取得する</summary>
            <returns>デプス値の範囲</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetDepthRange(Sce.PlayStation.Core.Vector2)">
            <summary>デプス値の範囲を設定する</summary>
            <param name="range">デプス値の範囲</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetDepthRange(System.Single,System.Single)">
            <summary>デプス値の範囲を設定する</summary>
            <param name="min">デプス値の最小値 (0.0f～1.0f)</param>
            <param name="max">デプス値の最大値 (0.0f～1.0f)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetClearColor">
            <summary>フレームバッファのクリアで使用されるカラーを取得する</summary>
            <returns>カラー</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearColor(Sce.PlayStation.Core.Vector4)">
            <summary>フレームバッファのクリアで使用されるカラーを設定する</summary>
            <param name="color">カラー</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>フレームバッファのクリアで使用されるカラーを設定する</summary>
            <param name="r">カラーのR値 (0.0f～1.0f)</param>
            <param name="g">カラーのG値 (0.0f～1.0f)</param>
            <param name="b">カラーのB値 (0.0f～1.0f)</param>
            <param name="a">カラーのA値 (0.0f～1.0f)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>フレームバッファのクリアで使用されるカラーを設定する</summary>
            <param name="r">カラーのR値 (0～255)</param>
            <param name="g">カラーのG値 (0～255)</param>
            <param name="b">カラーのB値 (0～255)</param>
            <param name="a">カラーのA値 (0～255)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetClearDepth">
            <summary>フレームバッファのクリアで使用されるデプス値を取得する</summary>
            <returns>デプス値 (0.0f～1.0f)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearDepth(System.Single)">
            <summary>フレームバッファのクリアで使用されるデプス値を設定する</summary>
            <param name="depth">デプス値 (0.0f～1.0f)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetClearStencil">
            <summary>フレームバッファのクリアで使用されるステンシル値を取得する</summary>
            <returns>ステンシル値 (0～255)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearStencil(System.Int32)">
            <summary>フレームバッファのクリアで使用されるステンシル値を設定する</summary>
            <param name="stencil">ステンシル値 (0～255)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetCullFace">
            <summary>バックフェースカリングを取得する</summary>
            <returns>バックフェースカリングを表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetCullFace(Sce.PlayStation.Core.Graphics.CullFace)">
            <summary>バックフェースカリングを設定する</summary>
            <param name="face">バックフェースカリングを表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetCullFace(Sce.PlayStation.Core.Graphics.CullFaceMode,Sce.PlayStation.Core.Graphics.CullFaceDirection)">
            <summary>バックフェースカリングを設定する</summary>
            <param name="mode">バックフェースカリングのモード</param>
            <param name="direction">バックフェースカリングの表面方向</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetBlendFunc">
            <summary>アルファブレンド関数を取得する</summary>
            <returns>アルファブレンド関数を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFunc(Sce.PlayStation.Core.Graphics.BlendFunc)">
            <summary>アルファブレンド関数を設定する</summary>
            <param name="func">アルファブレンド関数を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFunc(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>アルファブレンド関数を設定する</summary>
            <param name="mode">アルファブレンド関数のモード</param>
            <param name="srcFactor">アルファブレンド関数のソース係数</param>
            <param name="dstFactor">アルファブレンド関数のデスティネーション係数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetBlendFuncRgb">
            <summary>アルファブレンド関数を取得する (RGBチャンネル用)</summary>
            <returns>アルファブレンド関数を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFuncRgb(Sce.PlayStation.Core.Graphics.BlendFunc)">
            <summary>アルファブレンド関数を設定する (RGBチャンネル用)</summary>
            <param name="func">アルファブレンド関数を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFuncRgb(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>アルファブレンド関数を設定する (RGBチャンネル用)</summary>
            <param name="mode">アルファブレンド関数のモード</param>
            <param name="srcFactor">アルファブレンド関数のソース係数</param>
            <param name="dstFactor">アルファブレンド関数のデスティネーション係数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetBlendFuncAlpha">
            <summary>アルファブレンド関数を取得する (アルファチャンネル用)</summary>
            <returns>アルファブレンド関数を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFuncAlpha(Sce.PlayStation.Core.Graphics.BlendFunc)">
            <summary>アルファブレンド関数を設定する (アルファチャンネル用)</summary>
            <param name="func">アルファブレンド関数を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFuncAlpha(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>アルファブレンド関数を設定する (アルファチャンネル用)</summary>
            <param name="mode">アルファブレンド関数のモード</param>
            <param name="srcFactor">アルファブレンド関数のソース係数</param>
            <param name="dstFactor">アルファブレンド関数のデスティネーション係数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetDepthFunc">
            <summary>デプステスト関数を取得する</summary>
            <returns>デプステスト関数を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetDepthFunc(Sce.PlayStation.Core.Graphics.DepthFunc)">
            <summary>デプステスト関数を設定する</summary>
            <param name="func">デプステスト関数を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetDepthFunc(Sce.PlayStation.Core.Graphics.DepthFuncMode,System.Boolean)">
            <summary>デプステスト関数を設定する</summary>
            <param name="mode">デプステスト関数のモード</param>
            <param name="writeMask">デプステスト関数の書き込みマスク</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetPolygonOffset">
            <summary>ポリゴンオフセットを取得する</summary>
            <returns>ポリゴンオフセットを表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetPolygonOffset(Sce.PlayStation.Core.Graphics.PolygonOffset)">
            <summary>ポリゴンオフセットを設定する</summary>
            <param name="offset">ポリゴンオフセットを表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetPolygonOffset(System.Single,System.Single)">
            <summary>ポリゴンオフセットを設定する</summary>
            <param name="factor">ポリゴンオフセットのスケーリング係数</param>
            <param name="units">ポリゴンオフセットのオフセット係数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilFunc">
            <summary>ステンシルテスト関数を取得する</summary>
            <returns>ステンシルテスト関数を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFunc(Sce.PlayStation.Core.Graphics.StencilFunc)">
            <summary>ステンシルテスト関数を設定する</summary>
            <param name="func">ステンシルテスト関数を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFunc(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>ステンシルテスト関数を設定する</summary>
            <param name="mode">ステンシルテスト関数のモード</param>
            <param name="reference">ステンシルテスト関数の参照値 (0～255)</param>
            <param name="readMask">ステンシルテスト関数の読み込みマスク (0～255)</param>
            <param name="writeMask">ステンシルテスト関数の書き込みマスク (0～255)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilOp">
            <summary>ステンシルテスト操作を取得する</summary>
            <returns>ステンシルテスト操作を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOp(Sce.PlayStation.Core.Graphics.StencilOp)">
            <summary>ステンシルテスト操作を設定する</summary>
            <param name="op">ステンシルテスト操作を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOp(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>ステンシルテスト操作を設定する</summary>
            <param name="fail">ステンシルテスト操作のステンシル不合格モード</param>
            <param name="zFail">ステンシルテスト操作のデプス不合格モード</param>
            <param name="zPass">ステンシルテスト操作のデプス合格モード</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilFuncFront">
            <summary>ステンシルテスト関数を取得する (表面用)</summary>
            <returns>ステンシルテスト関数を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFuncFront(Sce.PlayStation.Core.Graphics.StencilFunc)">
            <summary>ステンシルテスト関数を設定する (表面用)</summary>
            <param name="func">ステンシルテスト関数を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFuncFront(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>ステンシルテスト関数を設定する (表面用)</summary>
            <param name="mode">ステンシルテスト関数のモード</param>
            <param name="reference">ステンシルテスト関数の参照値 (0～255)</param>
            <param name="readMask">ステンシルテスト関数の読み込みマスク (0～255)</param>
            <param name="writeMask">ステンシルテスト関数の書き込みマスク (0～255)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilOpFront">
            <summary>ステンシルテスト操作を取得する (表面用)</summary>
            <returns>ステンシルテスト操作を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOpFront(Sce.PlayStation.Core.Graphics.StencilOp)">
            <summary>ステンシルテスト操作を設定する (表面用)</summary>
            <param name="op">ステンシルテスト操作を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOpFront(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>ステンシルテスト操作を設定する (表面用)</summary>
            <param name="fail">ステンシルテスト操作のステンシル不合格モード</param>
            <param name="zFail">ステンシルテスト操作のデプス不合格モード</param>
            <param name="zPass">ステンシルテスト操作のデプス合格モード</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilFuncBack">
            <summary>ステンシルテスト関数を取得する (裏面用)</summary>
            <returns>ステンシルテスト関数を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFuncBack(Sce.PlayStation.Core.Graphics.StencilFunc)">
            <summary>ステンシルテスト関数を設定する (裏面用)</summary>
            <param name="func">ステンシルテスト関数を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFuncBack(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>ステンシルテスト関数を設定する (裏面用)</summary>
            <param name="mode">ステンシルテスト関数のモード</param>
            <param name="reference">ステンシルテスト関数の参照値 (0～255)</param>
            <param name="readMask">ステンシルテスト関数の読み込みマスク (0～255)</param>
            <param name="writeMask">ステンシルテスト関数の書き込みマスク (0～255)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilOpBack">
            <summary>ステンシルテスト操作を取得する (裏面用)</summary>
            <returns>ステンシルテスト操作を表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOpBack(Sce.PlayStation.Core.Graphics.StencilOp)">
            <summary>ステンシルテスト操作を設定する (裏面用)</summary>
            <param name="op">ステンシルテスト操作を表す構造体</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOpBack(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>ステンシルテスト操作を設定する (裏面用)</summary>
            <param name="fail">ステンシルテスト操作のステンシル不合格モード</param>
            <param name="zFail">ステンシルテスト操作のデプス不合格モード</param>
            <param name="zPass">ステンシルテスト操作のデプス合格モード</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetColorMask">
            <summary>カラーの書き込みマスクを取得する</summary>
            <returns>カラーの書き込みマスク</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetColorMask(Sce.PlayStation.Core.Graphics.ColorMask)">
            <summary>カラーの書き込みマスクを設定する</summary>
            <param name="mask">カラーの書き込みマスク</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetLineWidth">
            <summary>ライン幅を取得する</summary>
            <returns>ライン幅</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetLineWidth(System.Single)">
            <summary>ライン幅を設定する</summary>
            <param name="width">ライン幅</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsContext.ScreenSizes">
            <summary>初期化時に指定できるスクリーンサイズの配列</summary>
            <remarks>グラフィクスコンテキストを作成する時に指定するスクリーンサイズを決定するために使用します。このプロパティはスタティックプロパティであり、グラフィクスコンテキストを作成する前でも利用可能です。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsContext.Screen">
            <summary>デフォルトのスクリーンを表すフレームバッファ</summary>
            <remarks>デフォルトのスクリーンをフレームバッファに設定したり、スクリーンサイズやピクセルフォーマットを取得するために使用します。このフレームバッファは読み取り専用であり、カラーターゲットやデプスターゲットを変更することはできません。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsContext.Caps">
            <summary>グラフィクス能力を表すクラス</summary>
            <remarks>パラメータの許容範囲やサポートする拡張機能などを取得するために使用します。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ClearMask">
            <summary>バッファのクリアマスク</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.Color">
            <summary>カラーバッファ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.Depth">
            <summary>デプスバッファ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.Stencil">
            <summary>ステンシルバッファ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.All">
            <summary>すべてのバッファ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.DrawMode">
            <summary>プリミティブの描画モード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.Points">
            <summary>ポイントリスト</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.Lines">
            <summary>ラインリスト</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.LineStrip">
            <summary>ラインストリップ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.Triangles">
            <summary>三角形リスト</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.TriangleStrip">
            <summary>三角形ストリップ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.TriangleFan">
            <summary>三角形ファン</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.EnableMode">
            <summary>有効または無効にするグラフィクス機能</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.ScissorTest">
            <summary>シザーテスト</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.CullFace">
            <summary>バックフェースカリング</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.Blend">
            <summary>アルファブレンド</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.DepthTest">
            <summary>デプステスト</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.PolygonOffsetFill">
            <summary>ポリゴンオフセット</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.StencilTest">
            <summary>ステンシルテスト</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.Dither">
            <summary>ディザリング</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.All">
            <summary>すべての機能</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.CullFaceMode">
            <summary>バックフェースカリングのモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceMode.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceMode.Front">
            <summary>表面</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceMode.Back">
            <summary>裏面</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceMode.FrontAndBack">
            <summary>両面</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.CullFaceDirection">
            <summary>バックフェースカリングの表面方向</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceDirection.Cw">
            <summary>時計回り</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceDirection.Ccw">
            <summary>反時計回り</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.BlendFuncMode">
            <summary>アルファブレンド関数のモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncMode.Add">
            <summary>Sc*Sf+Dc*Df</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncMode.Subtract">
            <summary>Sc*Sf-Dc*Df</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncMode.ReverseSubtract">
            <summary>Dc*Df-Sc*Sf</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.BlendFuncFactor">
            <summary>アルファブレンド関数の係数</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.Zero">
            <summary>( 0, 0, 0, 0 )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.One">
            <summary>( 1, 1, 1, 1 )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.SrcColor">
            <summary>( Rs, Gs, Bs, As )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.OneMinusSrcColor">
            <summary>( 1-Rs, 1-Gs, 1-Bs, 1-As )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.SrcAlpha">
            <summary>( As, As, As, As )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.OneMinusSrcAlpha">
            <summary>( 1-As, 1-As, 1-As, 1-As )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.DstColor">
            <summary>( Rd, Gd, Bd, Ad )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.OneMinusDstColor">
            <summary>( 1-Rd, 1-Gd, 1-Bd, 1-Ad )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.DstAlpha">
            <summary>( Ad, Ad, Ad, Ad )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.OneMinusDstAlpha">
            <summary>( 1-Ad, 1-Ad, 1-Ad, 1-Ad )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.SrcAlphaSaturate">
            <summary>( min(As,1-Ad), min(As,1-Ad), min(As,1-Ad), 1 )</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.DepthFuncMode">
            <summary>デプステスト関数のモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Always">
            <summary>つねに合格</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Never">
            <summary>つねに不合格</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Equal">
            <summary>デプス値 == デプスバッファ値ならば合格</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.NotEqual">
            <summary>デプス値 != デプスバッファ値ならば合格</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Less" -->
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Greater">
            <summary>デプス値 > デプスバッファ値ならば合格</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.Core.Graphics.DepthFuncMode.LEqual" -->
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.GEqual">
            <summary>デプス値 >= デプスバッファ値ならば合格</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.StencilFuncMode">
            <summary>ステンシルテスト関数のモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Always">
            <summary>つねに合格</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Never">
            <summary>つねに不合格</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Equal">
            <summary>参照値 == ステンシルバッファ値ならば合格</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.NotEqual">
            <summary>参照値 != ステンシルバッファ値ならば合格</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Less" -->
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Greater">
            <summary>参照値 > ステンシルバッファ値ならば合格</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.Core.Graphics.StencilFuncMode.LEqual" -->
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.GEqual">
            <summary>参照値 >= ステンシルバッファ値ならば合格</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.StencilOpMode">
            <summary>ステンシルテスト操作のモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Keep">
            <summary>ステンシルバッファ値を維持する</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Zero">
            <summary>ステンシルバッファ値をゼロにセットする</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Replace">
            <summary>ステンシルバッファ値を参照値にセットする</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Invert">
            <summary>ステンシルバッファ値をビットごとに反転する</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Incr">
            <summary>ステンシルバッファ値をインクリメントする (クランプあり)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Decr">
            <summary>ステンシルバッファ値をデクリメントする (クランプあり)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.IncrWrap">
            <summary>ステンシルバッファ値をインクリメントする (クランプなし)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.DecrWrap">
            <summary>ステンシルバッファ値をデクリメントする (クランプなし)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ColorMask">
            <summary>カラーの書き込みマスク</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.R">
            <summary>R要素</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.G">
            <summary>G要素</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.B">
            <summary>B要素</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.A">
            <summary>A要素</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.Rgb">
            <summary>RGB要素</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.Rgba">
            <summary>RGBA要素</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.Primitive">
            <summary>プリミティブを表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Primitive.#ctor(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32,System.Int32)">
            <summary>プリミティブを表す構造体を作成する</summary>
            <param name="mode">プリミティブの描画モード</param>
            <param name="first">プリミティブの開始頂点</param>
            <param name="count">プリミティブの頂点数</param>
            <param name="userData">ユーザーデータ</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Primitive.Set(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32,System.Int32)">
            <summary>プリミティブを表す構造体に値をセットする</summary>
            <param name="mode">プリミティブの描画モード</param>
            <param name="first">プリミティブの開始頂点</param>
            <param name="count">プリミティブの頂点数</param>
            <param name="userData">ユーザーデータ</param>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.Primitive.Mode">
            <summary>プリミティブの描画モード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.Primitive.First">
            <summary>プリミティブの開始頂点</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.Primitive.Count">
            <summary>プリミティブの頂点数</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.Primitive.UserData">
            <summary>ユーザーデータ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.CullFace">
            <summary>バックフェースカリングを表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.CullFace.#ctor(Sce.PlayStation.Core.Graphics.CullFaceMode,Sce.PlayStation.Core.Graphics.CullFaceDirection)">
            <summary>バックフェースカリングを表す構造体を作成する</summary>
            <param name="mode">バックフェースカリングのモード</param>
            <param name="direction">バックフェースカリングの表面方向</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.CullFace.Set(Sce.PlayStation.Core.Graphics.CullFaceMode,Sce.PlayStation.Core.Graphics.CullFaceDirection)">
            <summary>バックフェースカリングを表す構造体に値をセットする</summary>
            <param name="mode">バックフェースカリングのモード</param>
            <param name="direction">バックフェースカリングの表面方向</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.CullFace.Mode">
            <summary>バックフェースカリングのモード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.CullFace.Direction">
            <summary>バックフェースカリングの表面方向</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.BlendFunc">
            <summary>アルファブレンド関数を表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.BlendFunc.#ctor(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>アルファブレンド関数を表す構造体を作成する</summary>
            <param name="mode">アルファブレンド関数のモード</param>
            <param name="srcFactor">アルファブレンド関数のソース係数</param>
            <param name="dstFactor">アルファブレンド関数のデスティネーション係数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.BlendFunc.Set(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>アルファブレンド関数を表す構造体に値をセットする</summary>
            <param name="mode">アルファブレンド関数のモード</param>
            <param name="srcFactor">アルファブレンド関数のソース係数</param>
            <param name="dstFactor">アルファブレンド関数のデスティネーション係数</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.BlendFunc.Mode">
            <summary>アルファブレンド関数のモード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.BlendFunc.SrcFactor">
            <summary>アルファブレンド関数のソース係数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.BlendFunc.DstFactor">
            <summary>アルファブレンド関数のデスティネーション係数</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.DepthFunc">
            <summary>デプステスト関数を表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthFunc.#ctor(Sce.PlayStation.Core.Graphics.DepthFuncMode,System.Boolean)">
            <summary>デプステスト関数を表す構造体を作成する</summary>
            <param name="mode">デプステスト関数のモード</param>
            <param name="writeMask">デプステスト関数の書き込みマスク</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthFunc.Set(Sce.PlayStation.Core.Graphics.DepthFuncMode,System.Boolean)">
            <summary>デプステスト関数を表す構造体に値をセットする</summary>
            <param name="mode">デプステスト関数のモード</param>
            <param name="writeMask">デプステスト関数の書き込みマスク</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.DepthFunc.Mode">
            <summary>デプステスト関数のモード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.DepthFunc.WriteMask">
            <summary>デプステスト関数の書き込みマスク</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PolygonOffset">
            <summary>ポリゴンオフセットを表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PolygonOffset.#ctor(System.Single,System.Single)">
            <summary>ポリゴンオフセットを表す構造体を作成する</summary>
            <param name="factor">ポリゴンオフセットのスケーリング係数</param>
            <param name="units">ポリゴンオフセットのオフセット係数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PolygonOffset.Set(System.Single,System.Single)">
            <summary>ポリゴンオフセットを表す構造体に値をセットする</summary>
            <param name="factor">ポリゴンオフセットのスケーリング係数</param>
            <param name="units">ポリゴンオフセットのオフセット係数</param>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PolygonOffset.Factor">
            <summary>ポリゴンオフセットのスケーリング係数</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PolygonOffset.Units">
            <summary>ポリゴンオフセットのオフセット係数</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.StencilFunc">
            <summary>ステンシルテスト関数を表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.StencilFunc.#ctor(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>ステンシルテスト関数を表す構造体を作成する</summary>
            <param name="mode">ステンシルテスト関数のモード</param>
            <param name="reference">ステンシルテスト関数の参照値 (0～255)</param>
            <param name="readMask">ステンシルテスト関数の読み込みマスク (0～255)</param>
            <param name="writeMask">ステンシルテスト関数の書き込みマスク (0～255)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.StencilFunc.Set(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>ステンシルテスト関数を表す構造体に値をセットする</summary>
            <param name="mode">ステンシルテスト関数のモード</param>
            <param name="reference">ステンシルテスト関数の参照値 (0～255)</param>
            <param name="readMask">ステンシルテスト関数の読み込みマスク (0～255)</param>
            <param name="writeMask">ステンシルテスト関数の書き込みマスク (0～255)</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilFunc.Mode">
            <summary>ステンシルテスト関数のモード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilFunc.Reference">
            <summary>ステンシルテスト関数の参照値 (0～255)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilFunc.ReadMask">
            <summary>ステンシルテスト関数の読み込みマスク (0～255)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilFunc.WriteMask">
            <summary>ステンシルテスト関数の書き込みマスク (0～255)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.StencilOp">
            <summary>ステンシルテスト操作を表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.StencilOp.#ctor(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>ステンシルテスト操作を表す構造体を作成する</summary>
            <param name="fail">ステンシルテスト操作のステンシル不合格モード</param>
            <param name="zFail">ステンシルテスト操作のデプス不合格モード</param>
            <param name="zPass">ステンシルテスト操作のデプス合格モード</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.StencilOp.Set(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>ステンシルテスト操作を表す構造体に値をセットする</summary>
            <param name="fail">ステンシルテスト操作のステンシル不合格モード</param>
            <param name="zFail">ステンシルテスト操作のデプス不合格モード</param>
            <param name="zPass">ステンシルテスト操作のデプス合格モード</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilOp.Fail">
            <summary>ステンシルテスト操作のステンシル不合格モード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilOp.ZFail">
            <summary>ステンシルテスト操作のデプス不合格モード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilOp.ZPass">
            <summary>ステンシルテスト操作のデプス合格モード</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.GraphicsCaps">
            <summary>グラフィクス能力を表すクラス</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxViewportWidth">
            <summary>ビューポートの最大幅</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxViewportHeight">
            <summary>ビューポートの最大高さ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxTextureSize">
            <summary>テクスチャの最大幅と高さ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxCubeMapTextureSize">
            <summary>キューブテクスチャの最大幅と高さ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxRenderbufferSize">
            <summary>レンダバッファの最大幅と高さ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxVertexUniformVectors">
            <summary>頂点シェーダーのユニフォーム変数の最大ベクトル数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxFragmentUniformVectors">
            <summary>フラグメントシェーダーのユニフォーム変数の最大ベクトル数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxVertexAttribs">
            <summary>頂点アトリビュートの最大ベクトル数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxVaryingVectors">
            <summary>varying変数の最大ベクトル数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxTextureImageUnits">
            <summary>フラグメントシェーダーのテクスチャユニットの最大数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxTextureMaxAnisotropy">
            <summary>テクスチャフィルタの異方性の最大値</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MinAliasedLineWidth">
            <summary>ラインの最小幅</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxAliasedLineWidth">
            <summary>ラインの最大幅</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MinAliasedPointSize">
            <summary>ポイントの最小サイズ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxAliasedPointSize">
            <summary>ポイントの最大サイズ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportTextureFilterAnisotropic">
            <summary>テクスチャに異方性フィルタを適用できる</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportVertexHalfFloat">
            <summary>half float形式の頂点バッファを作成できる</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportTextureHalfFloat">
            <summary>half float形式のテクスチャを作成できる</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportTextureHalfFloatLinear">
            <summary>half float形式のテクスチャのテクスチャフィルタにリニアモードを適用できる</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportRgb8Rgba8">
            <summary>RGBA 8bit形式のカラーバッファを作成できる</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportDepth24">
            <summary>デプス 24bit形式のデプスバッファを作成できる</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportPackedDepthStencil">
            <summary>デプスステンシル 24bit+8bit形式のデプスバッファを作成できる</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PixelBuffer">
            <summary>ピクセルバッファを表す基底クラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.#ctor(Sce.PlayStation.Core.Graphics.PixelBufferType,System.Int32,System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelBufferOption,Sce.PlayStation.Core.Graphics.InternalOption)">
            <summary>ピクセルバッファを作成する</summary>
            <param name="type">ピクセルバッファのタイプ</param>
            <param name="width">ピクセルバッファの幅</param>
            <param name="height">ピクセルバッファの高さ</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <param name="option">ピクセルバッファの作成オプション</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.#ctor">
            <summary>ピクセルバッファを作成する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.#ctor(Sce.PlayStation.Core.Graphics.PixelBuffer)">
            <summary>ピクセルバッファを複製する</summary>
            <param name="buffer">ピクセルバッファ</param>
            <remarks>ピクセルバッファを複製します。複製されたピクセルバッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.ShallowClone">
            <summary>ピクセルバッファを複製する</summary>
            <returns>ピクセルバッファの複製</returns>
            <remarks>ピクセルバッファを複製します。複製されたピクセルバッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.Finalize">
            <summary>ピクセルバッファを削除する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.Dispose">
            <summary>ピクセルバッファのアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.GetMipmapWidth(System.Int32)">
            <summary>指定されたミップマップレベルの幅を取得する</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <returns>指定されたミップマップレベルの幅</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.GetMipmapHeight(System.Int32)">
            <summary>指定されたミップマップレベルの高さを取得する</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <returns>指定されたミップマップレベルの高さ</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Type">
            <summary>ピクセルバッファのタイプ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Option">
            <summary>ピクセルバッファの作成オプション</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Format">
            <summary>ピクセルフォーマット</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Width">
            <summary>ピクセルバッファの幅</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Height">
            <summary>ピクセルバッファの高さ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.LevelCount">
            <summary>ミップマップレベル数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.IsRenderable">
            <summary>レンダリング可能ならばtrue</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.IsPowerOfTwo">
            <summary>幅と高さが２のべき乗ならばtrue</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.Texture">
            <summary>テクスチャを表す基底クラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.#ctor(Sce.PlayStation.Core.Graphics.PixelBufferType,System.Int32,System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelBufferOption,Sce.PlayStation.Core.Graphics.InternalOption)">
            <summary>テクスチャを作成する</summary>
            <param name="type">テクスチャのタイプ</param>
            <param name="width">テクスチャの幅</param>
            <param name="height">テクスチャの高さ</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <param name="option">ピクセルバッファの作成オプション</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.#ctor(Sce.PlayStation.Core.Graphics.PixelBufferType,System.String,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>テクスチャを作成する (ファイルから)</summary>
            <param name="type">ピクセルバッファのタイプ</param>
            <param name="fileName">ファイル名</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.#ctor(Sce.PlayStation.Core.Graphics.PixelBufferType,System.Byte[],System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>テクスチャを作成する (ファイルイメージから)</summary>
            <param name="type">ピクセルバッファのタイプ</param>
            <param name="fileImage">ファイルイメージ</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.#ctor(Sce.PlayStation.Core.Graphics.Texture)">
            <summary>テクスチャを複製する</summary>
            <param name="texture">テクスチャ</param>
            <remarks>テクスチャを複製します。複製されたテクスチャはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.ShallowClone">
            <summary>テクスチャを複製する</summary>
            <returns>テクスチャの複製</returns>
            <remarks>テクスチャを複製します。複製されたテクスチャはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.GetFilter">
            <summary>テクスチャフィルタを取得する</summary>
            <returns>テクスチャフィルタを表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetFilter(Sce.PlayStation.Core.Graphics.TextureFilter)">
            <summary>テクスチャフィルタを設定する</summary>
            <param name="filter">テクスチャフィルタを表す構造体</param>
            <remarks>テクスチャフィルタを設定します。デバイスが非対応の場合、half float テクスチャのリニアフィルタは機能しませんのでご注意ください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetFilter(Sce.PlayStation.Core.Graphics.TextureFilterMode)">
            <summary>テクスチャフィルタを設定する</summary>
            <param name="mode">テクスチャフィルタのモード</param>
            <remarks>テクスチャフィルタを設定します。デバイスが非対応の場合、half float テクスチャのリニアフィルタは機能しませんのでご注意ください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetFilter(Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode)">
            <summary>テクスチャフィルタを設定する</summary>
            <param name="mag">拡大テクスチャフィルタのモード</param>
            <param name="min">縮小テクスチャフィルタのモード</param>
            <param name="mip">ミップマップテクスチャフィルタのモード</param>
            <remarks>テクスチャフィルタを設定します。デバイスが非対応の場合、half float テクスチャのリニアフィルタは機能しませんのでご注意ください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.GetWrap">
            <summary>テクスチャラップを取得する</summary>
            <returns>テクスチャラップを表す構造体</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetWrap(Sce.PlayStation.Core.Graphics.TextureWrap)">
            <summary>テクスチャラップを設定する</summary>
            <param name="wrap">テクスチャラップを表す構造体</param>
            <remarks>テクスチャラップを設定します。２のべき乗でないテクスチャは、つねにクランプモードで動作しますのでご注意ください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetWrap(Sce.PlayStation.Core.Graphics.TextureWrapMode)">
            <summary>テクスチャラップを設定する</summary>
            <param name="mode">テクスチャラップのモード</param>
            <remarks>テクスチャラップを設定します。２のべき乗でないテクスチャは、つねにクランプモードで動作しますのでご注意ください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetWrap(Sce.PlayStation.Core.Graphics.TextureWrapMode,Sce.PlayStation.Core.Graphics.TextureWrapMode)">
            <summary>テクスチャラップを設定する</summary>
            <param name="s">S座標のテクスチャラップのモード</param>
            <param name="t">T座標のテクスチャラップのモード</param>
            <remarks>テクスチャラップを設定します。２のべき乗でないテクスチャは、つねにクランプモードで動作しますのでご注意ください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.GetMaxAnisotropy">
            <summary>異方性フィルタの最大値を取得する</summary>
            <returns>異方性フィルタの最大値 (1.0f～)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetMaxAnisotropy(System.Single)">
            <summary>異方性フィルタの最大値を設定する</summary>
            <param name="anisotropy">異方性フィルタの最大値 (1.0f～)</param>
            <remarks>異方性フィルタの最大値を設定します。デバイスが非対応の場合、異方性フィルタは機能しませんのでご注意ください。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.Texture2D">
            <summary>2Dテクスチャを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.Int32,System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>2Dテクスチャを作成する</summary>
            <param name="width">テクスチャの幅</param>
            <param name="height">テクスチャの高さ</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>指定されたパラメータで2Dテクスチャを作成します。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, AlphaH が指定できます。なおデバイスが非対応の場合は、２のべき乗でないテクスチャのミップマップが作成されません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.Int32,System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelBufferOption)">
            <summary>2Dテクスチャを作成する (オプションあり)</summary>
            <param name="width">テクスチャの幅</param>
            <param name="height">テクスチャの高さ</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <param name="option">ピクセルバッファの作成オプション</param>
            <remarks>指定されたパラメータで2Dテクスチャを作成します。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, AlphaH が指定できます。ただし Renderable オプションを指定した場合は Rgba, Rgba4444, Rgba5551, Rgb565 のみが指定できます。なおデバイスが非対応の場合は、２のべき乗でないテクスチャのミップマップが作成されません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.String,System.Boolean)">
            <summary>2Dテクスチャを作成する (ファイルから)</summary>
            <param name="fileName">ファイル名</param>
            <param name="mipmap">ミップマップの有無</param>
            <remarks>指定されたファイルから2Dテクスチャを作成します。利用可能なファイルフォーマットはPNG, JPG, BMP, GIF(ただしアニメーションGIFは非対応)です。なおデバイスが非対応の場合は、２のべき乗でないテクスチャのミップマップが作成されません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.String,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>2Dテクスチャを作成する (ファイルから、フォーマット変換あり)</summary>
            <param name="fileName">ファイル名</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>指定されたファイルから2Dテクスチャを作成します。利用可能なファイルフォーマットはPNG, JPG, BMP, GIF(ただしアニメーションGIFは非対応)です。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, AlphaH が指定できます。なおデバイスが非対応の場合は、２のべき乗でないテクスチャのミップマップが作成されません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.Byte[],System.Boolean)">
            <summary>2Dテクスチャを作成する (ファイルイメージから)</summary>
            <param name="fileImage">ファイルイメージ</param>
            <param name="mipmap">ミップマップの有無</param>
            <remarks>指定されたファイルイメージから2Dテクスチャを作成します。利用可能なファイルフォーマットはPNG, JPG, BMP, GIF(ただしアニメーションGIFは非対応)です。なおデバイスが非対応の場合は、２のべき乗でないテクスチャのミップマップが作成されません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.Byte[],System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>2Dテクスチャを作成する (ファイルイメージから、フォーマット変換あり)</summary>
            <param name="fileImage">ファイルイメージ</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>指定されたファイルイメージから2Dテクスチャを作成します。利用可能なファイルフォーマットはPNG, JPG, BMP, GIF(ただしアニメーションGIFは非対応)です。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, AlphaH が指定できます。なおデバイスが非対応の場合は、２のべき乗でないテクスチャのミップマップが作成されません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(Sce.PlayStation.Core.Graphics.Texture2D)">
            <summary>2Dテクスチャを複製する</summary>
            <param name="texture">2Dテクスチャ</param>
            <remarks>2Dテクスチャを複製します。複製された2Dテクスチャはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.ShallowClone">
            <summary>2Dテクスチャを複製する</summary>
            <returns>2Dテクスチャの複製</returns>
            <remarks>2Dテクスチャを複製します。複製された2Dテクスチャはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array)">
            <summary>ピクセルデータをセットする</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="pixels">ピクセルデータ</param>
            <remarks>指定されたミップマップレベルにピクセルデータをセットします。
            <para>このオーバーロードは指定されたミップマップレベルのすべてのピクセルにデータをセットします。配列のサイズが必要なサイズと異なる場合は例外をスローします。配列のサイズが必要なサイズより大きい場合は、別のオーバーロードを使用してください。</para>
            </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ピクセルデータをセットする (範囲あり)</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="pixels">ピクセルデータ</param>
            <param name="dx">転送先のX座標</param>
            <param name="dy">転送先のY座標</param>
            <param name="dw">転送先の幅</param>
            <param name="dh">転送先の高さ</param>
            <remarks>指定されたミップマップレベルにピクセルデータをセットします。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>ピクセルデータをセットする (バイトオフセットあり)</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="pixels">ピクセルデータ</param>
            <param name="offset">ピクセルデータのバイトオフセット</param>
            <param name="pitch">ピクセルデータのバイトピッチ</param>
            <remarks>指定されたミップマップレベルにピクセルデータをセットします。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>ピクセルデータをセットする (フォーマット変換あり)</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="pixels">ピクセルデータ</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>指定されたミップマップレベルにピクセルデータをセットします。ピクセルフォーマットには Rgba またはテクスチャと同じフォーマットが指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array,Sce.PlayStation.Core.Graphics.PixelFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ピクセルデータをセットする (フォーマット変換あり、バイトオフセットあり、範囲あり)</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="pixels">ピクセルデータ</param>
            <param name="format">ピクセルフォーマット</param>
            <param name="offset">ピクセルデータのバイトオフセット</param>
            <param name="pitch">ピクセルデータのバイトピッチ</param>
            <param name="dx">転送先のX座標</param>
            <param name="dy">転送先のY座標</param>
            <param name="dw">転送先の幅</param>
            <param name="dh">転送先の高さ</param>
            <remarks>指定されたミップマップレベルにピクセルデータをセットします。ピクセルフォーマットには Rgba またはテクスチャと同じフォーマットが指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.GenerateMipmap">
            <summary>ミップマップ画像を自動生成する</summary>
            <remarks>現在のゼロレベル画像からミップマップ画像を自動生成します。ミップマップが存在しない場合は何も行いません。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureCube">
            <summary>キューブテクスチャを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>キューブテクスチャを作成する</summary>
            <param name="width">テクスチャの幅</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>指定されたパラメータでキューブテクスチャを作成します。テクスチャの幅は2のべき乗である必要があります。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, AlphaH が指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelBufferOption)">
            <summary>キューブテクスチャを作成する (オプションあり)</summary>
            <param name="width">テクスチャの幅</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <param name="option">ピクセルバッファの作成オプション</param>
            <remarks>指定されたパラメータでキューブテクスチャを作成します。テクスチャの幅は2のべき乗である必要があります。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, AlphaH が指定できます。ただし Renderable オプションを指定した場合は Rgba, Rgba4444, Rgba5551, Rgb565 のみが指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.String,System.Boolean)">
            <summary>キューブテクスチャを作成する (ファイルから)</summary>
            <param name="fileName">ファイル名</param>
            <param name="mipmap">ミップマップの有無</param>
            <remarks>指定されたファイルからキューブテクスチャを作成します。利用可能なファイルフォーマットはPNG, JPG, BMP, GIF(ただしアニメーションGIFは非対応)です。画像の短辺は2のべき乗、長辺は短辺の6倍である必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.String,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>キューブテクスチャを作成する (ファイルから、フォーマット変換あり)</summary>
            <param name="fileName">ファイル名</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>指定されたファイルからキューブテクスチャを作成します。利用可能なファイルフォーマットはPNG, JPG, BMP, GIF(ただしアニメーションGIFは非対応)です。画像の短辺は2のべき乗、長辺は短辺の6倍である必要があります。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, AlphaH が指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.Byte[],System.Boolean)">
            <summary>キューブテクスチャを作成する (ファイルイメージから)</summary>
            <param name="fileImage">ファイルイメージ</param>
            <param name="mipmap">ミップマップの有無</param>
            <remarks>指定されたファイルイメージからキューブテクスチャを作成します。利用可能なファイルフォーマットはPNG, JPG, BMP, GIF(ただしアニメーションGIFは非対応)です。画像の短辺は2のべき乗、長辺は短辺の6倍である必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.Byte[],System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>キューブテクスチャを作成する (ファイルイメージから、フォーマット変換あり)</summary>
            <param name="fileImage">ファイルイメージ</param>
            <param name="mipmap">ミップマップの有無</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>指定されたファイルイメージからキューブテクスチャを作成します。利用可能なファイルフォーマットはPNG, JPG, BMP, GIF(ただしアニメーションGIFは非対応)です。画像の短辺は2のべき乗、長辺は短辺の6倍である必要があります。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, AlphaH が指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(Sce.PlayStation.Core.Graphics.TextureCube)">
            <summary>キューブテクスチャを複製する</summary>
            <param name="texture">キューブテクスチャ</param>
            <remarks>キューブテクスチャを複製します。複製されたキューブテクスチャはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.ShallowClone">
            <summary>キューブテクスチャを複製する</summary>
            <returns>キューブテクスチャの複製</returns>
            <remarks>キューブテクスチャを複製します。複製されたキューブテクスチャはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array)">
            <summary>ピクセルデータをセットする</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブ面</param>
            <param name="pixels">ピクセルデータ</param>
            <remarks>指定されたミップマップレベルのキューブ面にピクセルデータをセットします。
            <para>このオーバーロードは指定されたミップマップレベルのキューブ面のすべてのピクセルにデータをセットします。配列のサイズが必要なサイズと異なる場合は例外をスローします。配列のサイズが必要なサイズより大きい場合は、別のオーバーロードを使用してください。</para>
            </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ピクセルデータをセットする (範囲あり)</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブ面</param>
            <param name="pixels">ピクセルデータ</param>
            <param name="dx">転送先のX座標</param>
            <param name="dy">転送先のY座標</param>
            <param name="dw">転送先の幅</param>
            <param name="dh">転送先の高さ</param>
            <remarks>指定されたミップマップレベルのキューブ面にピクセルデータをセットします。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array,System.Int32,System.Int32)">
            <summary>ピクセルデータをセットする (バイトオフセットあり)</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブ面</param>
            <param name="pixels">ピクセルデータ</param>
            <param name="offset">ピクセルデータのバイトオフセット</param>
            <param name="pitch">ピクセルデータのバイトピッチ</param>
            <remarks>指定されたミップマップレベルのキューブ面にピクセルデータをセットします。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>ピクセルデータをセットする (フォーマット変換あり)</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブ面</param>
            <param name="pixels">ピクセルデータ</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>指定されたミップマップレベルのキューブ面にピクセルデータをセットします。ピクセルフォーマットには Rgba またはテクスチャと同じフォーマットが指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array,Sce.PlayStation.Core.Graphics.PixelFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ピクセルデータをセットする (フォーマット変換あり、バイトオフセットあり、範囲あり)</summary>
            <param name="level">ミップマップレベル (0～LevelCount-1)</param>
            <param name="cubeFace">キューブ面</param>
            <param name="pixels">ピクセルデータ</param>
            <param name="format">ピクセルフォーマット</param>
            <param name="offset">ピクセルデータのバイトオフセット</param>
            <param name="pitch">ピクセルデータのバイトピッチ</param>
            <param name="dx">転送先のX座標</param>
            <param name="dy">転送先のY座標</param>
            <param name="dw">転送先の幅</param>
            <param name="dh">転送先の高さ</param>
            <remarks>指定されたミップマップレベルのキューブ面にピクセルデータをセットします。ピクセルフォーマットには Rgba またはテクスチャと同じフォーマットが指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.GenerateMipmap">
            <summary>ミップマップ画像を自動生成する</summary>
            <remarks>現在のゼロレベル画像からミップマップ画像を自動生成します。ミップマップが存在しない場合は何も行いません。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ColorBuffer">
            <summary>カラーバッファを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ColorBuffer.#ctor(System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>カラーバッファを作成する</summary>
            <param name="width">カラーバッファの幅</param>
            <param name="height">カラーバッファの高さ</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>カラーバッファを作成します。ピクセルフォーマットには Rgba, Rgba4444, Rgba5551, Rgb565 が指定できます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ColorBuffer.#ctor(Sce.PlayStation.Core.Graphics.ColorBuffer)">
            <summary>カラーバッファを複製する</summary>
            <param name="buffer">カラーバッファ</param>
            <remarks>カラーバッファを複製します。複製されたカラーバッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ColorBuffer.ShallowClone">
            <summary>カラーバッファを複製する</summary>
            <returns>カラーバッファの複製</returns>
            <remarks>カラーバッファを複製します。複製されたカラーバッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.DepthBuffer">
            <summary>デプスバッファを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthBuffer.#ctor(System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>デプスバッファを作成する</summary>
            <param name="width">デプスバッファの幅</param>
            <param name="height">デプスバッファの高さ</param>
            <param name="format">ピクセルフォーマット</param>
            <remarks>デプスバッファを作成します。ピクセルフォーマットには Depth16, Depth24, Depth16Stencil8, Depth24Stencil8 が指定できます。指定されたフォーマットがデバイスで利用可能でない場合は、指定されたフォーマットに近い別のフォーマットが使用されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthBuffer.#ctor(Sce.PlayStation.Core.Graphics.DepthBuffer)">
            <summary>デプスバッファを複製する</summary>
            <param name="buffer">デプスバッファ</param>
            <remarks>デプスバッファを複製します。複製されたデプスバッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthBuffer.ShallowClone">
            <summary>デプスバッファを複製する</summary>
            <returns>デプスバッファの複製</returns>
            <remarks>デプスバッファを複製します。複製されたデプスバッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PixelBufferType">
            <summary>ピクセルバッファのタイプ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.Texture2D">
            <summary>2Dテクスチャ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.TextureCube">
            <summary>キューブテクスチャ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.ColorBuffer">
            <summary>カラーバッファ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.DepthBuffer">
            <summary>デプスバッファ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PixelBufferOption">
            <summary>ピクセルバッファの作成オプション</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferOption.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferOption.Renderable">
            <summary>レンダリング可能</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PixelFormat">
            <summary>ピクセルフォーマット</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Rgba">
            <summary>RGBA (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.RgbaH">
            <summary>RGBA (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Rgba4444">
            <summary>RGBA (ushort 4:4:4:4)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Rgba5551">
            <summary>RGBA (ushort 5:5:5:1)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Rgb565">
            <summary>RGB (ushort 5:6:5)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.LuminanceAlpha">
            <summary>輝度とアルファ (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.LuminanceAlphaH">
            <summary>輝度とアルファ (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Luminance">
            <summary>輝度 (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.LuminanceH">
            <summary>輝度 (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Alpha">
            <summary>アルファ (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.AlphaH">
            <summary>アルファ (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Depth16">
            <summary>デプス 16bit</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Depth24">
            <summary>デプス 24bit</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Depth16Stencil8">
            <summary>デプス 16bit ステンシル 8bit</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Depth24Stencil8">
            <summary>デプス 24bit ステンシル 8bit</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureFilterMode">
            <summary>テクスチャフィルタのモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureFilterMode.Nearest">
            <summary>ニアレストモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureFilterMode.Linear">
            <summary>リニアモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureFilterMode.Disabled">
            <summary>無効</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureWrapMode">
            <summary>テクスチャラップのモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureWrapMode.ClampToEdge">
            <summary>クランプモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureWrapMode.Repeat">
            <summary>リピートモード</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureCubeFace">
            <summary>キューブテクスチャの面</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.PositiveX">
            <summary>X軸の正方向</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.NegativeX">
            <summary>X軸の負方向</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.PositiveY">
            <summary>Y軸の正方向</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.NegativeY">
            <summary>Y軸の負方向</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.PositiveZ">
            <summary>Z軸の正方向</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.NegativeZ">
            <summary>Z軸の負方向</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureFilter">
            <summary>テクスチャフィルタを表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureFilter.#ctor(Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode)">
            <summary>テクスチャフィルタを表す構造体を作成する</summary>
            <param name="mag">拡大テクスチャフィルタのモード</param>
            <param name="min">縮小テクスチャフィルタのモード</param>
            <param name="mip">ミップマップテクスチャフィルタのモード</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureFilter.Set(Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode)">
            <summary>テクスチャフィルタを表す構造体に値をセットする</summary>
            <param name="mag">拡大テクスチャフィルタのモード</param>
            <param name="min">縮小テクスチャフィルタのモード</param>
            <param name="mip">ミップマップテクスチャフィルタのモード</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureFilter.Mag">
            <summary>拡大テクスチャフィルタのモード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureFilter.Min">
            <summary>縮小テクスチャフィルタのモード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureFilter.Mip">
            <summary>ミップマップテクスチャフィルタのモード</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureWrap">
            <summary>テクスチャラップを表す構造体</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureWrap.#ctor(Sce.PlayStation.Core.Graphics.TextureWrapMode,Sce.PlayStation.Core.Graphics.TextureWrapMode)">
            <summary>テクスチャラップを表す構造体を作成する</summary>
            <param name="s">S座標のテクスチャラップのモード</param>
            <param name="t">T座標のテクスチャラップのモード</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureWrap.Set(Sce.PlayStation.Core.Graphics.TextureWrapMode,Sce.PlayStation.Core.Graphics.TextureWrapMode)">
            <summary>テクスチャラップを表す構造体に値をセットする</summary>
            <param name="s">S座標のテクスチャラップのモード</param>
            <param name="t">T座標のテクスチャラップのモード</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureWrap.S">
            <summary>S座標のテクスチャラップのモード</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureWrap.T">
            <summary>T座標のテクスチャラップのモード</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ShaderProgram">
            <summary>シェーダープログラムを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.String)">
            <summary>シェーダープログラムを作成する (ファイルから)</summary>
            <param name="fileName">シェーダーのファイル名</param>
            <remarks>指定されたファイルからシェーダープログラムを作成します。利用可能なファイルフォーマットは CGX です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.String,System.String)">
            <summary>シェーダープログラムを作成する (ファイルから)</summary>
            <param name="vpFileName">頂点シェーダーのファイル名</param>
            <param name="fpFileName">フラグメントシェーダーのファイル名</param>
            <remarks>指定されたファイルからシェーダープログラムを作成します。利用可能なファイルフォーマットは CGX です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.String,Sce.PlayStation.Core.Graphics.ShaderProgramOption)">
            <summary>シェーダープログラムを作成する (ファイルから、オプションあり)</summary>
            <param name="fileName">シェーダーのファイル名</param>
            <param name="option">シェーダープログラムの作成オプション</param>
            <remarks>指定されたファイルからシェーダープログラムを作成します。利用可能なファイルフォーマットは CGX です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.String,System.String,Sce.PlayStation.Core.Graphics.ShaderProgramOption)">
            <summary>シェーダープログラムを作成する (ファイルから、オプションあり)</summary>
            <param name="vpFileName">頂点シェーダーのファイル名</param>
            <param name="fpFileName">フラグメントシェーダーのファイル名</param>
            <param name="option">シェーダープログラムの作成オプション</param>
            <remarks>指定されたファイルからシェーダープログラムを作成します。利用可能なファイルフォーマットは CGX です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.Byte[])">
            <summary>シェーダープログラムを作成する (ファイルイメージから)</summary>
            <param name="fileImage">シェーダーのファイルイメージ</param>
            <remarks>指定されたファイルイメージからシェーダープログラムを作成します。利用可能なファイルフォーマットは CGX です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.Byte[],System.Byte[])">
            <summary>シェーダープログラムを作成する (ファイルイメージから)</summary>
            <param name="vpFileImage">頂点シェーダーのファイルイメージ</param>
            <param name="fpFileImage">フラグメントシェーダーのファイルイメージ</param>
            <remarks>指定されたファイルイメージからシェーダープログラムを作成します。利用可能なファイルフォーマットは CGX です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.Byte[],Sce.PlayStation.Core.Graphics.ShaderProgramOption)">
            <summary>シェーダープログラムを作成する (ファイルイメージから、オプションあり)</summary>
            <param name="fileImage">シェーダーのファイルイメージ</param>
            <remarks>指定されたファイルイメージからシェーダープログラムを作成します。利用可能なファイルフォーマットは CGX です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.Byte[],System.Byte[],Sce.PlayStation.Core.Graphics.ShaderProgramOption)">
            <summary>シェーダープログラムを作成する (ファイルイメージから、オプションあり)</summary>
            <param name="vpFileImage">頂点シェーダーのファイルイメージ</param>
            <param name="fpFileImage">フラグメントシェーダーのファイルイメージ</param>
            <remarks>指定されたファイルイメージからシェーダープログラムを作成します。利用可能なファイルフォーマットは CGX です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(Sce.PlayStation.Core.Graphics.ShaderProgram)">
            <summary>シェーダープログラムを複製する</summary>
            <param name="program">シェーダープログラム</param>
            <remarks>シェーダープログラムを複製します。複製されたシェーダープログラムはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.ShallowClone">
            <summary>シェーダープログラムを複製する</summary>
            <returns>シェーダープログラムの複製</returns>
            <remarks>シェーダープログラムを複製します。複製されたシェーダープログラムはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.Finalize">
            <summary>シェーダープログラムを削除する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.Dispose">
            <summary>シェーダープログラムのアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.FindUniform(System.String)">
            <summary>ユニフォーム変数を名前で検索する</summary>
            <param name="name">ユニフォーム変数の名前</param>
            <returns>ユニフォーム変数の番号 (-1ならば失敗)</returns>
            <remarks>ユニフォーム変数を名前で検索します。指定した変数が見つからない場合は-1を返します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.FindAttribute(System.String)">
            <summary>アトリビュート変数を名前で検索する</summary>
            <param name="name">アトリビュート変数の名前</param>
            <returns>アトリビュート変数の番号 (-1ならば失敗)</returns>
            <remarks>アトリビュート変数を名前で検索します。指定した変数が見つからない場合は-1を返します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformBinding(System.Int32)">
            <summary>ユニフォーム変数のバインディングを取得する</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <returns>ユニフォーム変数の名前 (nullならばデフォルト)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformBinding(System.Int32,System.String)">
            <summary>ユニフォーム変数のバインディングを設定する</summary>
            <param name="index">ユニフォーム変数の番号</param>
            <param name="name">ユニフォーム変数の名前 (nullならばデフォルト)</param>
            <remarks>ユニフォーム変数を特定の番号に関連づけます。指定された変数の古いバインディングは解除されます。バインディングがない変数はそれぞれ未使用の番号に割り当てられます。</remarks>
            \image html image/graphics_uniform_binding.png
            <remarks>index には UniformCount 以上の番号を指定することもできます。その場合は、空の変数が挿入されて UniformCount の値が増加します。</remarks>
            \image html image/graphics_uniform_binding2.png
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeBinding(System.Int32)">
            <summary>アトリビュート変数のバインディングを取得する</summary>
            <param name="index">アトリビュート変数の番号 (0～AttributeCount-1)</param>
            <returns>アトリビュート変数の名前 (nullならばデフォルト)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetAttributeBinding(System.Int32,System.String)">
            <summary>アトリビュート変数のバインディングを設定する</summary>
            <param name="index">アトリビュート変数の番号</param>
            <param name="name">アトリビュート変数の名前 (nullならばデフォルト)</param>
            <remarks>アトリビュート変数を特定の番号に関連づけます。指定された変数の古いバインディングは解除されます。バインディングがない変数はそれぞれ未使用の番号に割り当てられます。</remarks>
            \image html image/graphics_attribute_binding.png
            <remarks>index には AttributeCount 以上の番号を指定することもできます。その場合は、空の変数が挿入されて AttributeCount の値が増加します。</remarks>
            \image html image/graphics_attribute_binding2.png
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformType(System.Int32)">
            <summary>ユニフォーム変数のタイプを取得する</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <returns>ユニフォーム変数のタイプ</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeType(System.Int32)">
            <summary>アトリビュート変数のタイプを取得する</summary>
            <param name="index">アトリビュート変数の番号 (0～AttributeCount-1)</param>
            <returns>アトリビュート変数のタイプ</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformName(System.Int32)">
            <summary>ユニフォーム変数の名前を取得する</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <returns>ユニフォーム変数の名前</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeName(System.Int32)">
            <summary>アトリビュート変数の名前を取得する</summary>
            <param name="index">アトリビュート変数の番号 (0～AttributeCount-1)</param>
            <returns>アトリビュート変数の名前</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformSize(System.Int32)">
            <summary>ユニフォーム変数の配列サイズを取得する</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <returns>ユニフォーム変数の配列サイズ</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeSize(System.Int32)">
            <summary>アトリビュート変数の配列サイズを取得する</summary>
            <param name="index">アトリビュート変数の番号 (0～AttributeCount-1)</param>
            <returns>アトリビュート変数の配列サイズ</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Matrix4@)">
            <summary>ユニフォーム変数の値をセットする</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">4次元行列 (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector4@)">
            <summary>ユニフォーム変数の値をセットする</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">4次元ベクトル (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector3@)">
            <summary>ユニフォーム変数の値をセットする</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">3次元ベクトル (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector2@)">
            <summary>ユニフォーム変数の値をセットする</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">2次元ベクトル (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Single)">
            <summary>ユニフォーム変数の値をセットする</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">スカラ (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32)">
            <summary>ユニフォーム変数の値をセットする</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">スカラ (int)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Single[])">
            <summary>ユニフォーム変数の値をセットする</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">配列データ (float)</param>
            <remarks>ユニフォーム変数の値をセットします。このオーバーロードはfloatスカラー変数だけでなく、float2,float3,float4...のようなfloatベクトルや行列の変数にも値をセットすることができます。ただし、配列データのサイズはベクトルや行列のサイズの倍数である必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32[])">
            <summary>ユニフォーム変数の値をセットする</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">配列データ (int)</param>
            <remarks>ユニフォーム変数の値をセットします。このオーバーロードはintスカラー変数だけでなく、int2,int3,int4...のようなintベクトル変数にも値をセットすることができます。ただし、配列データのサイズはベクトルサイズの倍数である必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,Sce.PlayStation.Core.Matrix4@)">
            <summary>ユニフォーム変数の値をセットする (オフセットあり)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="offset">配列変数のオフセット</param>
            <param name="value">4次元行列 (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,Sce.PlayStation.Core.Vector4@)">
            <summary>ユニフォーム変数の値をセットする (オフセットあり)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="offset">配列変数のオフセット</param>
            <param name="value">4次元ベクトル (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,Sce.PlayStation.Core.Vector3@)">
            <summary>ユニフォーム変数の値をセットする (オフセットあり)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="offset">配列変数のオフセット</param>
            <param name="value">3次元ベクトル (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,Sce.PlayStation.Core.Vector2@)">
            <summary>ユニフォーム変数の値をセットする (オフセットあり)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="offset">配列変数のオフセット</param>
            <param name="value">2次元ベクトル (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,System.Single)">
            <summary>ユニフォーム変数の値をセットする (オフセットあり)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="offset">配列変数のオフセット</param>
            <param name="value">スカラ (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,System.Int32)">
            <summary>ユニフォーム変数の値をセットする (オフセットあり)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="offset">配列変数のオフセット</param>
            <param name="value">スカラ (int)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,System.Single[])">
            <summary>ユニフォーム変数の値をセットする (オフセットあり)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="offset">配列変数のオフセット</param>
            <param name="value">配列データ (float)</param>
            <remarks>ユニフォーム変数の値をセットします。このオーバーロードはfloatスカラー変数だけでなく、float2,float3,float4...のようなfloatベクトルや行列の変数にも値をセットすることができます。ただし、配列データのサイズはベクトルや行列のサイズの倍数である必要があります。オフセット引数はベクトルや行列の単位で数えることに注意してください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,System.Int32[])">
            <summary>ユニフォーム変数の値をセットする (オフセットあり)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="offset">配列変数のオフセット</param>
            <param name="value">配列データ (int)</param>
            <remarks>ユニフォーム変数の値をセットします。このオーバーロードはintスカラー変数だけでなく、int2,int3,int4...のようなintベクトル変数にも値をセットすることができます。ただし、配列データのサイズはベクトルサイズの倍数である必要があります。オフセット引数はベクトル単位で数えることに注意してください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Matrix4[],System.Int32,System.Int32,System.Int32)">
            <summary>ユニフォーム変数の値をセットする (配列データ用)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">4次元行列の配列 (float)</param>
            <param name="to">転送先のオフセット</param>
            <param name="from">転送元のオフセット</param>
            <param name="count">転送されるデータ数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector4[],System.Int32,System.Int32,System.Int32)">
            <summary>ユニフォーム変数の値をセットする (配列データ用)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">4次元ベクトルの配列 (float)</param>
            <param name="to">転送先のオフセット</param>
            <param name="from">転送元のオフセット</param>
            <param name="count">転送されるデータ数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector3[],System.Int32,System.Int32,System.Int32)">
            <summary>ユニフォーム変数の値をセットする (配列データ用)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">3次元ベクトルの配列 (float)</param>
            <param name="to">転送先のオフセット</param>
            <param name="from">転送元のオフセット</param>
            <param name="count">転送されるデータ数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector2[],System.Int32,System.Int32,System.Int32)">
            <summary>ユニフォーム変数の値をセットする (配列データ用)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">2次元ベクトルの配列 (float)</param>
            <param name="to">転送先のオフセット</param>
            <param name="from">転送元のオフセット</param>
            <param name="count">転送されるデータ数</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>ユニフォーム変数の値をセットする (配列データ用)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">配列データ (float)</param>
            <param name="to">転送先のオフセット</param>
            <param name="from">転送元のオフセット</param>
            <param name="count">転送されるデータ数</param>
            <remarks>ユニフォーム変数の値をセットします。このオーバーロードはfloatスカラー変数だけでなく、float2,float3,float4...のようなfloatベクトルや行列の変数にも値をセットすることができます。ただし、オフセットとカウント引数はベクトルや行列の単位で数えることに注意してください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>ユニフォーム変数の値をセットする (配列データ用)</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <param name="value">配列データ (int)</param>
            <param name="to">転送先のオフセット</param>
            <param name="from">転送元のオフセット</param>
            <param name="count">転送されるデータ数</param>
            <remarks>ユニフォーム変数の値をセットします。このオーバーロードはintスカラー変数だけでなく、int2,int3,int4...のようなintベクトル変数にも値をセットすることができます。ただし、オフセットとカウント引数はベクトル単位で数えることに注意してください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetAttributeValue(System.Int32,System.Single[])">
            <summary>アトリビュート変数のデフォルト値をセットする</summary>
            <param name="index">アトリビュート変数の番号 (0～AttributeCount-1)</param>
            <param name="value">配列データ (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformTexture(System.Int32)">
            <summary>ユニフォーム変数のテクスチャ番号を取得する</summary>
            <param name="index">ユニフォーム変数の番号 (0～UniformCount-1)</param>
            <returns>ユニフォーム変数のテクスチャ番号 (-1ならば無効)</returns>
            <remarks>ユニフォーム変数のテクスチャ番号を取得します。指定した変数がサンプラーでない場合は-1を返します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeStream(System.Int32)">
            <summary>アトリビュート変数の頂点ストリーム番号を取得する</summary>
            <param name="index">アトリビュート変数の番号 (0～AttributeCount-1)</param>
            <returns>頂点ストリーム番号 (-1ならば無効)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetAttributeStream(System.Int32,System.Int32)">
            <summary>アトリビュート変数の頂点ストリーム番号を設定する</summary>
            <param name="index">アトリビュート変数の番号 (0～AttributeCount-1)</param>
            <param name="stream">頂点ストリーム番号 (-1ならば無効)</param>
            <remarks>アトリビュート変数の頂点ストリーム番号を設定します。初期値はアトリビュート変数の番号です。この設定により、指定されたアトリビュート変数に任意の頂点ストリームを転送することができます。さらに、特定の頂点ストリームを無効にしたり、一つの頂点ストリームを複数のアトリビュート変数に転送することもできます。</remarks>
            \image html image/graphics_attribute_stream.png
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SwapShader(Sce.PlayStation.Core.Graphics.ShaderProgram)">
            <summary>シェーダーを変更する</summary>
            <param name="program">シェーダープログラム</param>
            <remarks>指定されたシェーダープログラムのシェーダーをこのシェーダープログラムにセットします。この関数は内部的にシェーダーを切り替える場合に使用します。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.UpdateShader">
            <summary>シェーダーの状態を更新する</summary>
            <remarks>プリミティブ描画前にグラフィックスコンテキストから呼び出される仮想関数です。この関数はクラス内にキャッシュされた状態をシェーダーに反映する場合に使用します。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.ShaderProgram.UniformCount">
            <summary>ユニフォーム変数の数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.ShaderProgram.AttributeCount">
            <summary>アトリビュート変数の数</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ShaderUniformType">
            <summary>ユニフォーム変数のタイプ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float">
            <summary>スカラ (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float2">
            <summary>2次元ベクトル (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float3">
            <summary>3次元ベクトル (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float4">
            <summary>4次元ベクトル (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float2x2">
            <summary>2次元行列 (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float3x3">
            <summary>3次元行列 (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float4x4">
            <summary>4次元行列 (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Int">
            <summary>スカラ (int)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Int2">
            <summary>2次元ベクトル (int)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Int3">
            <summary>3次元ベクトル (int)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Int4">
            <summary>4次元ベクトル (int)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Bool">
            <summary>スカラ (bool)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Bool2">
            <summary>2次元ベクトル (bool)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Bool3">
            <summary>3次元ベクトル (bool)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Bool4">
            <summary>4次元ベクトル (bool)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Sampler2D">
            <summary>2Dテクスチャサンプラ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.SamplerCube">
            <summary>キューブテクスチャサンプラ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ShaderAttributeType">
            <summary>アトリビュート変数のタイプ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.Float">
            <summary>スカラ (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.Float2">
            <summary>2次元ベクトル (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.Float3">
            <summary>3次元ベクトル (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.Float4">
            <summary>4次元ベクトル (float)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ShaderProgramOption">
            <summary>シェーダープログラムの作成オプションを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgramOption.#ctor">
            <summary>シェーダープログラムの作成オプションを表すクラスを作成する</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderProgramOption.ConstantValues">
            <summary>コンパイル時に書きかえる定数値</summary>
            <remarks>コンパイル時に変数を定数に書きかえるために使用します。 "uniform int" を "static const int" に、"uniform bool" を "static const bool" にそれぞれ書きかえることができます。各変数の宣言は一行で完結している必要があります。なお、変数を定数に書きかえたあとでその値を変更することはできません。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.VertexBuffer">
            <summary>頂点バッファを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.#ctor(System.Int32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            <summary>頂点バッファを作成する</summary>
            <param name="vertexCount">頂点数 (0ならば頂点配列なし)</param>
            <param name="formats">頂点フォーマット</param>
            <remarks>頂点バッファを作成します。頂点フォーマットには頂点ストリームごとのデータ型を指定してください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.#ctor(System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            <summary>頂点バッファを作成する (インデクス配列あり)</summary>
            <param name="vertexCount">頂点数 (0ならば頂点配列なし)</param>
            <param name="indexCount">インデクス数 (0ならばインデクス配列なし)</param>
            <param name="formats">頂点フォーマット</param>
            <remarks>頂点バッファを作成します。インデクス数を指定することでインデクス配列が使用可能になります。頂点フォーマットには頂点ストリームごとのデータ型を指定してください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.#ctor(Sce.PlayStation.Core.Graphics.VertexBuffer)">
            <summary>頂点バッファを複製する</summary>
            <param name="buffer">頂点バッファ</param>
            <remarks>頂点バッファを複製します。複製された頂点バッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.ShallowClone">
            <summary>頂点バッファを複製する</summary>
            <returns>頂点バッファの複製</returns>
            <remarks>頂点バッファを複製します。複製された頂点バッファはアンマネージドリソースを共有します。すべての複製に対して Dispose() が呼び出されたとき、共有されたアンマネージドリソースが解放されます。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.Finalize">
            <summary>頂点バッファを削除する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.Dispose">
            <summary>頂点バッファのアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Array)">
            <summary>頂点データをセットする</summary>
            <param name="vertices">頂点データ</param>
            <remarks>頂点データをセットします。頂点データはインターリーブ形式で指定してください。
            <para>このオーバーロードはすべての頂点にデータをセットします。配列のサイズが必要なサイズと異なる場合は例外をスローします。配列のサイズが必要なサイズより大きい場合は、別のオーバーロードを使用してください。</para>
            </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>頂点データをセットする (範囲あり)</summary>
            <param name="vertices">頂点データ</param>
            <param name="to">転送先の頂点番号</param>
            <param name="from">転送元の頂点番号</param>
            <param name="count">転送される頂点数</param>
            <remarks>頂点データをセットします。頂点データはインターリーブ形式で指定してください。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array)">
            <summary>頂点データをセットする (単一ストリーム用)</summary>
            <param name="stream">ストリーム番号 (0～StreamCount-1)</param>
            <param name="vertices">頂点データ</param>
            <remarks>指定されたストリームに頂点データをセットします。
            <para>このオーバーロードはすべての頂点に対してデータをセットします。配列のサイズが必要なサイズと異なる場合は例外をスローします。配列のサイズが必要なサイズより大きい場合は、別のオーバーロードを使用してください。</para>
            </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>頂点データをセットする (単一ストリーム用、範囲あり)</summary>
            <param name="stream">ストリーム番号 (0～StreamCount-1)</param>
            <param name="vertices">頂点データ</param>
            <param name="to">転送先の頂点番号</param>
            <param name="from">転送元の頂点番号</param>
            <param name="count">転送される頂点数</param>
            <remarks>指定されたストリームに頂点データをセットします。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>頂点データをセットする (単一ストリーム用、バイトオフセットあり)</summary>
            <param name="stream">ストリーム番号 (0～StreamCount-1)</param>
            <param name="vertices">頂点データ</param>
            <param name="offset">頂点データのバイトオフセット</param>
            <param name="stride">頂点データのバイトストライド</param>
            <remarks>指定されたストリームに頂点データをセットします。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array,Sce.PlayStation.Core.Graphics.VertexFormat,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>頂点データをセットする (単一ストリーム用、フォーマット変換あり)</summary>
            <param name="stream">ストリーム番号 (0～StreamCount-1)</param>
            <param name="vertices">頂点データ</param>
            <param name="format">頂点フォーマット</param>
            <param name="trans">トランスレーション値</param>
            <param name="scale">スケール値</param>
            <remarks>指定されたストリームに頂点データをセットします。頂点フォーマットには、頂点バッファと同じフォーマットまたは同じ次元数のfloatベクトルフォーマットを指定できます。頂点フォーマットにfloatベクトルフォーマットを指定した場合は、頂点データを(vertex-trans)/scaleの計算式で変換することができます。 </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array,Sce.PlayStation.Core.Graphics.VertexFormat,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>頂点データをセットする (単一ストリーム用、フォーマット変換あり、バイトオフセットあり、範囲あり)</summary>
            <param name="stream">ストリーム番号 (0～StreamCount-1)</param>
            <param name="vertices">頂点データ</param>
            <param name="format">頂点フォーマット</param>
            <param name="trans">トランスレーション値</param>
            <param name="scale">スケール値</param>
            <param name="offset">頂点データのバイトオフセット</param>
            <param name="stride">頂点データのバイトストライド</param>
            <param name="to">転送先の頂点番号</param>
            <param name="from">転送元の頂点番号</param>
            <param name="count">転送される頂点数</param>
            <remarks>指定されたストリームに頂点データをセットします。頂点フォーマットには、頂点バッファと同じフォーマットまたは同じ次元数のfloatベクトルフォーマットを指定できます。頂点フォーマットにfloatベクトルフォーマットを指定した場合は、頂点データを(vertex-trans)/scaleの計算式で変換することができます。 </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetIndices(System.UInt16[])">
            <summary>インデクスデータをセットする</summary>
            <param name="indices">インデクスデータ</param>
            <remarks>インデクスデータをセットします。
            <para>このオーバーロードはすべてのインデクスに対してデータをセットします。配列のサイズが必要なサイズと異なる場合は例外をスローします。配列のサイズが必要なサイズより大きい場合は、別のオーバーロードを使用してください。</para>
            </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetIndices(System.UInt16[],System.Int32,System.Int32,System.Int32)">
            <summary>インデクスデータをセットする (範囲あり)</summary>
            <param name="indices">インデクスデータ</param>
            <param name="to">転送先のインデクス番号</param>
            <param name="from">転送元のインデクス番号</param>
            <param name="count">転送されるインデクス数</param>
            <remarks>インデクスデータをセットします。</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.VertexBuffer.Formats">
            <summary>頂点フォーマット</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.VertexBuffer.VertexCount">
            <summary>頂点数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.VertexBuffer.IndexCount">
            <summary>インデクス数</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.VertexBuffer.StreamCount">
            <summary>ストリーム数</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.VertexFormat">
            <summary>頂点フォーマット</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.None">
            <summary>なし</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Float">
            <summary>スカラ (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Float2">
            <summary>2次元ベクトル (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Float3">
            <summary>3次元ベクトル (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Float4">
            <summary>4次元ベクトル (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Half">
            <summary>スカラ (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Half2">
            <summary>2次元ベクトル (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Half3">
            <summary>3次元ベクトル (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Half4">
            <summary>4次元ベクトル (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short">
            <summary>スカラ (short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short2">
            <summary>2次元ベクトル (short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short3">
            <summary>3次元ベクトル (short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short4">
            <summary>4次元ベクトル (short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort">
            <summary>スカラ (ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort2">
            <summary>2次元ベクトル (ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort3">
            <summary>3次元ベクトル (ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort4">
            <summary>4次元ベクトル (ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte">
            <summary>スカラ (sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte2">
            <summary>2次元ベクトル (sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte3">
            <summary>3次元ベクトル (sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte4">
            <summary>4次元ベクトル (sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte">
            <summary>スカラ (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte2">
            <summary>2次元ベクトル (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte3">
            <summary>3次元ベクトル (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte4">
            <summary>4次元ベクトル (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.ShortN">
            <summary>スカラ (normalized short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short2N">
            <summary>2次元ベクトル (normalized short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short3N">
            <summary>3次元ベクトル (normalized short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short4N">
            <summary>4次元ベクトル (normalized short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShortN">
            <summary>スカラ (normalized ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort2N">
            <summary>2次元ベクトル (normalized ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort3N">
            <summary>3次元ベクトル (normalized ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort4N">
            <summary>4次元ベクトル (normalized ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.ByteN">
            <summary>スカラ (normalized sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte2N">
            <summary>2次元ベクトル (normalized sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte3N">
            <summary>3次元ベクトル (normalized sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte4N">
            <summary>4次元ベクトル (normalized sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByteN">
            <summary>スカラ (normalized byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte2N">
            <summary>2次元ベクトル (normalized byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte3N">
            <summary>3次元ベクトル (normalized byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte4N">
            <summary>4次元ベクトル (normalized byte)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.FontMetrics">
            <summary>フォントのメトリクス情報</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontMetrics.Ascent">
            <summary>ベースラインから文字の上端までの高さ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontMetrics.Descent">
            <summary>ベースラインから文字の下端までの高さ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontMetrics.Leading">
            <summary>行間</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.FontMetrics.Height">
            <summary>二つの行のベースライン間の距離</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.CharMetrics">
            <summary>文字ごとのメトリクス情報</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.X">
            <summary>文字の基準位置のX座標</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.Y">
            <summary>文字の基準位置のY座標</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.Width">
            <summary>文字の幅</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.Height">
            <summary>文字の高さ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.HorizontalBearingX">
            <summary>基準位置から文字の左端の距離(右が正)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.HorizontalBearingY">
            <summary>基準位置から文字の上端の距離(上が正)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.HorizontalAdvance">
            <summary>この文字から次の文字の基準位置への距離</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.FontAlias">
            <summary>フォントの別名</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontAlias.System">
            <summary>システム標準のフォント</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.FontStyle">
            <summary>フォントのスタイル</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontStyle.Regular">
            <summary>通常のスタイル</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontStyle.Bold">
            <summary>太字</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontStyle.Italic">
            <summary>斜体</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.Font">
            <summary>フォント</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.#ctor(System.String,System.Int32,Sce.PlayStation.Core.Imaging.FontStyle)">
            <summary>Fontのコンストラクタ(ファイル名とサイズとスタイルから)</summary>
            <param name="filename">フォントのファイル名</param>
            <param name="size">サイズ</param>
            <param name="style">スタイル</param>
            <remarks>引数 size は 1～1024 の範囲に収まっている必要があります。またフォントによって小さすぎるサイズで生成できない場合があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.#ctor(Sce.PlayStation.Core.Imaging.FontAlias,System.Int32,Sce.PlayStation.Core.Imaging.FontStyle)">
            <summary>Fontのコンストラクタ(別名とサイズとスタイルから)</summary>
            <param name="alias">フォントの別名</param>
            <param name="size">サイズ</param>
            <param name="style">スタイル</param>
            <remarks>引数 size は 1～1024 の範囲に収まっている必要があります。またフォントによって小さすぎるサイズで生成できない場合があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.#ctor(Sce.PlayStation.Core.Imaging.Font)">
            <summary>Fontのコンストラクタ(別のFontオブジェクトからコピー)</summary>
            <param name="font">コピー元のFontオブジェクト</param>
            <remarks>別のFontオブジェクトをコピーして、新しいFontオブジェクトを生成します。ただしFontの実体はコピーされず、1つのアンマネージドリソースが共有されます。Fontのアンマネージドリソースを解放するために、コピーされた全てのFontオブジェクトに関して、Dispose() を呼び出す必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.ShallowClone">
            <summary>Fontのコンストラクタ(別のFontオブジェクトからコピー)</summary>
            <param name="font">コピー元のFontオブジェクト</param>
            <remarks>別のFontオブジェクトをコピーして、新しいFontオブジェクトを生成します。ただしFontの実体はコピーされず、1つのアンマネージドリソースが共有されます。Fontのアンマネージドリソースを解放するために、コピーされた全てのFontオブジェクトに関して、Dispose() を呼び出す必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.Finalize">
            <summary>Fontのファイナライザ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.Dispose">
            <summary>Fontのアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.GetTextWidth(System.String)">
            <summary>与えられた文字列をこのフォントで描画するときに必要な横幅を計算する (文字列全体)</summary>
            <param name="text">文字列</param>
            <returns>横幅</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.GetTextWidth(System.String,System.Int32,System.Int32)">
            <summary>与えられた文字列をこのフォントで描画するときに必要な横幅を計算する (文字列の一部)</summary>
            <param name="text">文字列全体</param>
            <param name="offset">文字列の横幅計算に使用する部分のオフセット</param>
            <param name="len">文字列の横幅計算に使用する部分の長さ</param>
            <returns>横幅</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.GetTextMetrics(System.String)">
            <summary>与えられた文字列の1文字ごとのメトリクス情報を取得する (文字列全体)</summary>
            <param name="text">文字列</param>
            <returns>1文字ごとのメトリクス情報の配列</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.GetTextMetrics(System.String,System.Int32,System.Int32)">
            <summary>与えられた文字列の1文字ごとのメトリクス情報を取得する (文字列の一部)</summary>
            <param name="text">文字列全体</param>
            <param name="offset">文字列のメトリクス情報の取得を行う部分のオフセット</param>
            <param name="len">文字列のメトリクス情報の取得を行う部分の長さ</param>
            <returns>1文字ごとのメトリクス情報の配列</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Font.Name">
            <summary>フォント名</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Font.Size">
            <summary>サイズ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Font.Style">
            <summary>スタイル</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Font.Metrics">
            <summary>フォントメトリックス</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImageSize">
            <summary>画像のサイズ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageSize.Width">
            <summary>幅</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageSize.Height">
            <summary>高さ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.ImageSize.#ctor(System.Int32,System.Int32)">
            <summary>ImageSizeのコンストラクタ</summary>
            <param name="width">幅</param>
            <param name="height">高さ</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImagePosition">
            <summary>画像の中の座標 (左上原点)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImagePosition.X">
            <summary>X座標</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImagePosition.Y">
            <summary>Y座標</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.ImagePosition.#ctor(System.Int32,System.Int32)">
            <summary>ImagePositionのコンストラクタ</summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImageRect">
            <summary>画像の中の矩形領域</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageRect.X">
            <summary>X座標</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageRect.Y">
            <summary>Y座標</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageRect.Width">
            <summary>幅</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageRect.Height">
            <summary>高さ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.ImageRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ImageRectのコンストラクタ</summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="width">幅</param>
            <param name="height">高さ</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImageColor">
            <summary>画素の色</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageColor.R">
            <summary>赤成分 (0-255)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageColor.G">
            <summary>緑成分 (0-255)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageColor.B">
            <summary>青成分 (0-255)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageColor.A">
            <summary>アルファ値 (0-255)</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.ImageColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ImageColorのコンストラクタ</summary>
            <param name="r">赤成分 (0-255)</param>
            <param name="g">緑成分 (0-255)</param>
            <param name="b">青成分 (0-255)</param>
            <param name="a">アルファ値 (0-255)</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImageMode">
            <summary>画像のモード(ピクセルの形式)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageMode.Rgba">
            <summary>R G B A それぞれ 8bit ずつ、合わせて 32bit のモード</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageMode.A">
            <summary>アルファのみ 8bit のモード</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.Image">
            <summary>画像</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(System.String)">
            <summary>Imageのコンストラクタ(ファイル名から)</summary>
            <param name="filename">画像のファイル名</param>
            <remarks>画像ファイルからImageを生成した直後は、画像は実際にはデコードされていません。画像をデコードするには Decode() を呼ぶ必要があります。ただし画像がデコードされていない場合でも、Size などを取得することはできます。</remarks>
            <remarks>現在対応している画像ファイルのフォーマットは、PNG形式/BMP形式/JPG形式/GIF形式です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(System.Byte[])">
            <summary>Imageのコンストラクタ(ファイルイメージから)</summary>
            <param name="fileImage">画像のファイルイメージ</param>
            <remarks>画像ファイルからImageを生成した直後は、画像は実際にはデコードされていません。画像をデコードするには Decode() を呼ぶ必要があります。ただし画像がデコードされていない場合でも、Size などを取得することはできます。</remarks>
            <remarks>現在対応している画像ファイルのフォーマットは、PNG形式/BMP形式/JPG形式/GIF形式です。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(Sce.PlayStation.Core.Imaging.ImageMode,Sce.PlayStation.Core.Imaging.ImageSize,Sce.PlayStation.Core.Imaging.ImageColor)">
            <summary>Imageのコンストラクタ(画像のモードとサイズと色から)</summary>
            <param name="mode">画像のモード</param>
            <param name="size">画像のサイズ</param>
            <param name="color">色</param>
            <remarks>引数 size に与える幅と高さは、それぞれ 0～4096 の範囲に収まっている必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(Sce.PlayStation.Core.Imaging.ImageMode,Sce.PlayStation.Core.Imaging.ImageSize,System.Byte[])">
            <summary>Imageのコンストラクタ(画像のモードとサイズとバッファから)</summary>
            <param name="mode">画像のモード</param>
            <param name="size">画像のサイズ</param>
            <param name="buffer">色</param>
            <remarks>引数 size に与える幅と高さは、それぞれ 0～4096 の範囲に収まっている必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(Sce.PlayStation.Core.Imaging.Image)">
            <summary>Imageのコンストラクタ(別のImageオブジェクトからコピー)</summary>
            <param name="image">コピー元のImageオブジェクト</param>
            <remarks>別のImageオブジェクトをコピーして、新しいImageオブジェクトを生成します。ただしImageの実体はコピーされず、1つのアンマネージドリソースが共有されます。Imageのアンマネージドリソースを解放するために、コピーされた全てのImageオブジェクトに関して、Dispose() を呼び出す必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Finalize">
            <summary>Imageのファイナライザ</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.ShallowClone">
            <summary>Imageオブジェクトのコピー</summary>
            <remarks>別のImageオブジェクトをコピーして、新しいImageオブジェクトを生成します。ただしImageの実体はコピーされず、1つのアンマネージドリソースが共有されます。Imageのアンマネージドリソースを解放するために、コピーされた全てのImageオブジェクトに関して、Dispose() を呼び出す必要があります。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Dispose">
            <summary>Image のアンマネージドリソースを解放する</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Decode">
            <summary>画像をデコードする</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.ToBuffer">
            <summary>画像のメモリイメージを取得する</summary>
            <returns>画像のメモリイメージ</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.ReadBuffer(System.Byte[])">
            <summary>与えられたバッファに画像のメモリイメージを読み出す</summary>
            <param name="buffer">読み出し先のバッファ</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Resize(Sce.PlayStation.Core.Imaging.ImageSize)">
            <summary>画像をスケールした新しいImageオブジェクトを作成する</summary>
            <param name="size">スケール後の画像のサイズ</param>
            <returns>スケールされた画像</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Crop(Sce.PlayStation.Core.Imaging.ImageRect)">
            <summary>画像の一部を切り出した新しいImageオブジェクトを作成する</summary>
            <param name="rect">切り出す矩形の範囲</param>
            <returns>切りだされた画像</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.DrawImage(Sce.PlayStation.Core.Imaging.Image,Sce.PlayStation.Core.Imaging.ImagePosition)">
            <summary>画像の中に別の画像を貼り付ける</summary>
            <param name="source">貼り付ける画像</param>
            <param name="position">貼り付け位置の座標(左上)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.DrawRectangle(Sce.PlayStation.Core.Imaging.ImageColor,Sce.PlayStation.Core.Imaging.ImageRect)">
            <summary>画像の中に単色で矩形を描画する</summary>
            <param name="color">矩形の色</param>
            <param name="rect">矩形</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.DrawText(System.String,Sce.PlayStation.Core.Imaging.ImageColor,Sce.PlayStation.Core.Imaging.Font,Sce.PlayStation.Core.Imaging.ImagePosition)">
            <summary>画像の中にテキストを描画する (string全体)</summary>
            <param name="text">文字列</param>
            <param name="color">文字の色</param>
            <param name="font">フォント</param>
            <param name="position">画像の中の座標(文字列の左上)</param>
            <remarks>DrawTextは、透明なImageにテキストを描画することを想定した動作になっています。RGB値は引数 color に与えた色で上書きし、Alpha値はブレンド処理されます。</remarks>
            <remarks>不透明なImageに対してDrawTextを呼び出した場合は、期待した結果を得ることはできません。</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.DrawText(System.String,System.Int32,System.Int32,Sce.PlayStation.Core.Imaging.ImageColor,Sce.PlayStation.Core.Imaging.Font,Sce.PlayStation.Core.Imaging.ImagePosition)">
            <summary>画像の中にテキストを描画する (stringの一部)</summary>
            <param name="text">文字列</param>
            <param name="offset">文字列の中の描画に使用する位置のオフセット</param>
            <param name="len">文字列の中の描画に使用する長さ</param>
            <param name="color">文字の色</param>
            <param name="font">フォント</param>
            <param name="position">画像の中の座標(文字列の左上)</param>
            <remarks>DrawTextは、透明なImageにテキストを描画することを想定した動作になっています。RGB値は引数 color に与えた色で上書きし、Alpha値はブレンド処理されます。</remarks>
            <remarks>不透明なImageに対してDrawTextを呼び出した場合は、期待した結果を得ることはできません。</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Imaging.Image.Export(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Imaging.Image.SaveAs(System.String)" -->
        <member name="P:Sce.PlayStation.Core.Imaging.Image.Size">
            <summary>画像のサイズ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Image.DecodeSize">
            <summary>画像のデコード時のサイズ</summary>
            <remarks>Decode()を呼び出す前にDecodeSizeを設定しておくことで、画像を拡大・縮小しながらデコードすることができます。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.GamePadButtons">
            <summary>ゲームパッドのボタンの列挙子</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Left">
            <summary>方向キーの左</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Up">
            <summary>方向キーの上</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Right">
            <summary>方向キーの右</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Down">
            <summary>方向キーの下</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Square">
            <summary>□ ボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Triangle">
            <summary>△ ボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Circle">
            <summary>○ ボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Cross">
            <summary>× ボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Start">
            <summary>STARTボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Select">
            <summary>SELECTボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.L">
            <summary>L ボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.R">
            <summary>R ボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Enter">
            <summary>Enter ボタン</summary>
            <remarks>SystemParameters.GamePadButtonMeaning の値を加味して、○×ボタンのうちの[決定]を意味するボタンが、Enterボタンとして抽象化されて通知されます。</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Back">
            <summary>Back ボタン</summary>
            <remarks>SystemParameters.GamePadButtonMeaning の値を加味して、○×ボタンのうちの[戻る]を意味するボタンが、Backボタンとして抽象化されて通知されます。また Android のハードウェア Back ボタンも織り込まれて通知されます。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.GamePadData">
            <summary>ゲームパッドのデータ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.Skip">
            <summary>後続の処理がこの入力データを無視するかどうかを制御するフラグ</summary>
            <remarks>この入力データが、すでに他のオブジェクトによって消費されたものであるかを保存／取得するために、このフラグを使用します。</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.Buttons">
            <summary>現在のボタンの状態</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.ButtonsPrev">
            <summary>前回のボタンの状態</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.ButtonsDown">
            <summary>今回押し込まれたボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.ButtonsUp">
            <summary>今回離されたボタン</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.AnalogLeftX">
            <summary>左アナログのX軸 (-1.0～1.0)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.AnalogLeftY">
            <summary>左アナログのY軸 (-1.0～1.0)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.AnalogRightX">
            <summary>右アナログのX軸 (-1.0～1.0)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.AnalogRightY">
            <summary>右アナログのY軸 (-1.0～1.0)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.GamePad">
            <summary>ゲームパッドデバイスを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Input.GamePad.GetData(System.Int32)">
            <summary>ゲームパッドのデータを取得する</summary>
            <param name="deviceIndex">デバイスの番号(0～)</param>
            <returns>ゲームパッドのデータ</returns>
            <seealso cref="T:Sce.PlayStation.Core.Input.GamePadData"/>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.MotionData">
            <summary>モーションセンサのデータ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.MotionData.Skip">
            <summary>後続の処理がこの入力データを無視するかどうかを制御するフラグ</summary>
            <remarks>この入力データが、すでに他のオブジェクトによって消費されたものであるかを保存／取得するために、このフラグを使用します。</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.MotionData.Acceleration">
            <summary>加速度</summary>
            <remarks>加速度センサーのデータです。ディスプレイの右方向がX軸の正、上方向がY軸の正、手前方向がZ軸の正です。単位は G です。たとえば、ディスプレイを上に向けてデバイスが静止しているとき、(0,0,-1) になります。ディスプレイを地面と垂直に立てて静止しているとき、(0,-1,0) になります。</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.MotionData.AngularVelocity">
            <summary>角速度</summary>
            <remarks>ジャイロセンサーのデータです。デバイスによっては、取得されません。</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.Motion">
            <summary>モーションセンサを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Input.Motion.GetData(System.Int32)">
            <summary>モーションセンサのデータを取得する</summary>
            <param name="deviceIndex">デバイスの番号(0～)</param>
            <returns>モーションセンサのデータ</returns>
            <seealso cref="T:Sce.PlayStation.Core.Input.MotionData"/>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.TouchStatus">
            <summary>タッチパネルの指データの状態</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.None">
            <summary>押されていない</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.Down">
            <summary>押された</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.Up">
            <summary>離された</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.Move">
            <summary>移動した</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.Canceled">
            <summary>キャンセルされた</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.TouchData">
            <summary>タッチパネルの指ひとつ分のタッチ情報</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.Skip">
            <summary>後続の処理がこの入力データを無視するかどうかを制御するフラグ</summary>
            <remarks>この入力データが、すでに他のオブジェクトによって消費されたものであるかを保存／取得するために、このフラグを使用します。</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.ID">
            <summary>指のID</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.Status">
            <summary>指の状態</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.X">
            <summary>タッチ位置のX座標</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.Y">
            <summary>タッチ位置のY座標</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.Touch">
            <summary>タッチパネルデバイスを表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Input.Touch.GetData(System.Int32)">
            <summary>タッチパネルのデータを取得する</summary>
            <param name="deviceIndex">デバイスの番号(0～)</param>
            <returns>タッチパネルのデータ</returns>
            <seealso cref="T:Sce.PlayStation.Core.Input.TouchData"/>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.LocationDeviceType">
            <summary>ロケーションデバイスのタイプ</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.None">
            <summary>位置計測可能なデバイスがない、もしくはONになっていない</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.Gps">
            <summary>GPS</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.Wifi">
            <summary>Wi-Fi</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.Cell3G">
            <summary>3G</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.Unknown">
            <summary>不明なデバイス</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.LocationData">
            <summary>位置情報</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasLatitude">
            <summary>緯度の計測可否</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Latitude">
            <summary>緯度(deg) 有効な値は-90～+90</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasLongitude">
            <summary>経度の計測可否</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Longitude">
            <summary>経度(deg) 有効な値は-180～+180</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasAltitude">
            <summary>高度の計測可否</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Altitude">
            <summary>高度(m)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasSpeed">
            <summary>速度の計測可否</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Speed">
            <summary>速度(km/h)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasTime">
            <summary>時刻の計測可否</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Time">
            <summary>時刻(msec) 1970年1月1日 0時0分0秒からのUTC時刻</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasBearing">
            <summary>方角の計測可否</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Bearing">
            <summary>方角 北から時計回りの角度 有効な値は 0～360</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasAccuracy">
            <summary>精度の計測可否</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Accuracy">
            <summary>精度(m)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.DeviceType">
            <summary>計測可能なデバイス</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Location">
            <summary>位置情報を表すクラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Location.Start">
            <summary>位置情報の取得を開始する</summary>
            <returns>初期化が正しく行われていない場合に false になります。app.xml にLocationの記載がない場合など。</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Location.Stop">
            <summary>位置情報の取得を停止する</summary>
            <returns>初期化が正しく行われていない場合に false になります。</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Location.GetData">
            <summary>位置情報を取得する</summary>
            <returns>位置情報</returns>
            <seealso cref="T:Sce.PlayStation.Core.Device.LocationData"/>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Location.GetEnableDevices">
            <summary>位置情報を計測可能なデバイスを取得する</summary>
            <returns>デバイス情報(LocationDeviceType)</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkRequestType">
            <summary>ネットワーク リクエストの種類</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkState">
            <summary>ネットワークの状態</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NotConnected">
            <summary>接続がありません(PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.SignedOut">
            <summary>サインアウトしました(PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.SignedIn">
            <summary>サインインしました(PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.Online">
            <summary>オンライン(PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.AuthRequested">
            <summary>チケット リクエスト完了(PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.AuthRequestReady">
            <summary>チケットを受信しました(PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.AuthRequestFailed">
            <summary>承認エラー(PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NetworkServerIdle">
            <summary>接続してください(ネットワークサービスサーバー)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NetworkServerRequested">
            <summary>request has been sent (Network Services server)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NetworkServerReady">
            <summary>リクエスト送付準備完了(ネットワークサービスサーバー)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NetworkServerFailed">
            <summary>認証エラー(ネットワークサービスサーバー)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkStreamReader">
            <summary>ストリーム リーダー クラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkStreamReader.Dispose">
            <summary>オブジェクトの廃棄</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>ストリームのリード</summary>
            <param name="buffer">バッファ</param>
            <param name="offset">バッファのオフセット</param>
            <param name="count">リードするバイト数</param>
            <returns>リードしたバイト数</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkStreamReader.ReadToEnd">
            <summary>ストリームの最後までリード</summary>
            <returns>ストリームの残り文字列</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkStreamReader.Close">
            <summary>ストリームのクローズ</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkResponse">
            <summary>ネットワーク レスポンス クラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkResponse.Dispose">
            <summary>クラスの廃棄</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkResponse.GetStreamReader">
            <summary>ストリーム リーダーの新規作成</summary>
            <returns>ストリーム リーダー</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkRequest">
            <summary>ネットワーク リクエスト クラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkRequest.GetResponse">
            <summary>サーバーからレスポンスをブロッキングで受信</summary>
            <returns>レスポンス。エラーの場合はnull</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkRequest.BeginGetResponse(System.AsyncCallback)">
            <summary>サーバーからレスポンスを非同期で受信</summary>
            <param name="callback">コールバック関数</param>
            <returns>ハンドル</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkRequest.EndGetResponse(System.IAsyncResult)">
            <summary>リクエストをフェッチする</summary>
            <param name="callback">リクエストのハンドル</param>
            <returns>レスポンス</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkRequest.Dispose">
            <summary>オブジェクトの廃棄</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.Network">
            <summary>スコアボード使用をハンドルするネットワーク クラス</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.Network.Initialize(System.String)">
            <summary>スコアボード クラスをアプリケーションデータで初期化</summary>
            <param name="applicationToken">アプリケーション トークン</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.Network.AuthGetTicket">
            <summary>起動時またはチケット期限切れの際にネットワーク サービス サーバーからチケットを受信</summary>
            <returns>サーバーの状態</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.Network.CreateRequest(Sce.PlayStation.Core.Services.NetworkRequestType,System.String,System.String)">
            <summary>
            ネットワーク リクエストを新規作成
            </summary>
            <param name="type">リクエスト タイプ</param>
            <param name="function">ネットワーク サービス タイプ</param>
            <param name="json">有効なJsonストリング</param>
            <returns>リクエスト</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.Network.ServerTicket">
            <summary>ネットワーク サービス サーバーのチケットを得る</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.Network.State">
            <summary>サーバーの状態を戻す　状態がNetworkServerReadyなら、スコアボードにクエリに送ることができる</summary>
            <returns>サーバーの状態</returns>
        </member>
    </members>
</doc>
