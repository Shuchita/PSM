<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sce.PlayStation.Core</name>
    </assembly>
    <members>
        <member name="T:Sce.PlayStation.Core.IShallowCloneable">
            <summary>Shallow Cloneable interface declaration</summary>
            <remarks>In case of Shallow Clone of Cloneable interface, if the field(member variable) is an object, its reference will be copied, the object will be multiply-referenced</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.IDeepCloneable">
            <summary>Deep Clonable interface declaration</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Rgba">
            <summary>32 bit color struct, with 8 bits per channel</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba.R">
            <summary>red</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba.G">
            <summary>green</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba.B">
            <summary>blue</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba.A">
            <summary>alpha</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 integers</summary>
            <param name="r">red</param>
            <param name="g">green</param>
            <param name="b">blue</param>
            <param name="a">alpha</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.ToVector4">
            <summary>return the color as a Vector4</summary>
            <returns>the color as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.Equals(Sce.PlayStation.Core.Rgba)">
            <summary>equality test</summary>
            <param name="c">the color to compare this to</param>
            <returns>true if this == c, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.ToString">
            <summary>get the string representation of color value</summary>
            <returns>the string representation of color value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.op_Equality(Sce.PlayStation.Core.Rgba,Sce.PlayStation.Core.Rgba)">
            <summary>equality operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if color 1 == color 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba.op_Inequality(Sce.PlayStation.Core.Rgba,Sce.PlayStation.Core.Rgba)">
            <summary>not equals operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if c 1 != c 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Rgba4444">
            <summary>16 bit color struct with 4 bits per channel</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba4444.Bits">
            <summary>color data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.#ctor(System.UInt16)">
            <summary>constructor taking ushort data</summary>
            <param name="bits">bits to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.#ctor(Sce.PlayStation.Core.Rgba)">
            <summary>constructor taking a 32 bit color</summary>
            <param name="rgba">the color to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.ToRgba">
            <summary>return the color as a 32 bit color</summary>
            <returns>the color as a 32 bit color</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.Equals(Sce.PlayStation.Core.Rgba4444)">
            <summary>equality test</summary>
            <param name="c">the color to compare this to</param>
            <returns>true if this == rgba, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.ToString">
            <summary>get the string representation of color value</summary>
            <returns>the string representation of color value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.op_Equality(Sce.PlayStation.Core.Rgba4444,Sce.PlayStation.Core.Rgba4444)">
            <summary>equality operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if color 1 == color 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba4444.op_Inequality(Sce.PlayStation.Core.Rgba4444,Sce.PlayStation.Core.Rgba4444)">
            <summary>not equals operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if c 1 != c 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Rgba5551">
            <summary>16 bit color struct with 5 bits per channel for R, G, and B. and 1 bit for A</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgba5551.Bits">
            <summary>color data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.#ctor(System.UInt16)">
            <summary>constructor taking ushort data</summary>
            <param name="bits">bits to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.#ctor(Sce.PlayStation.Core.Rgba)">
            <summary>constructor taking a 32 bit color</summary>
            <param name="rgba">the color to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.ToRgba">
            <summary>return the color as a 32 bit color</summary>
            <returns>the color as a 32 bit color</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.Equals(Sce.PlayStation.Core.Rgba5551)">
            <summary>equality test</summary>
            <param name="c">the color to compare this to</param>
            <returns>true if this == rgba, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.ToString">
            <summary>get the string representation of color value</summary>
            <returns>the string representation of color value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.op_Equality(Sce.PlayStation.Core.Rgba5551,Sce.PlayStation.Core.Rgba5551)">
            <summary>equality operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if color 1 == color 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgba5551.op_Inequality(Sce.PlayStation.Core.Rgba5551,Sce.PlayStation.Core.Rgba5551)">
            <summary>not equals operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if c 1 != c 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Rgb565">
            <summary>16 bit color struct with 5 bits for R, 6 bits for G, and 5 bits for G</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rgb565.Bits">
            <summary>color data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.#ctor(System.UInt16)">
            <summary>constructor taking ushort data</summary>
            <param name="bits">bits to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.#ctor(Sce.PlayStation.Core.Rgba)">
            <summary>constructor taking a 32 bit color</summary>
            <param name="rgba">the color to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.ToRgba">
            <summary>return the color as a 32 bit color</summary>
            <returns>the color as a 32 bit color</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.Equals(Sce.PlayStation.Core.Rgb565)">
            <summary>equality test</summary>
            <param name="c">the color to compare this to</param>
            <returns>true if this == rgba, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.ToString">
            <summary>get the string representation of color value</summary>
            <returns>the string representation of color value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.op_Equality(Sce.PlayStation.Core.Rgb565,Sce.PlayStation.Core.Rgb565)">
            <summary>equality operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if color 1 == color 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rgb565.op_Inequality(Sce.PlayStation.Core.Rgb565,Sce.PlayStation.Core.Rgb565)">
            <summary>not equals operator</summary>
            <param name="c1">color 1</param>
            <param name="c2">color 2</param>
            <returns>true if c 1 != c 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.FMath">
            <summary>math wrapper and convenience functions</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.FMath.E">
            <summary>E</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.FMath.PI">
            <summary>PI</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.FMath.DegToRad">
            <summary>conversion ratio from degrees to radians</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.FMath.RadToDeg">
            <summary>conversion ratio from radians to degrees</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Radians(System.Single)">
            <summary>convert from degrees to radians</summary>
            <param name="x">the value to convert</param>
            <returns>value converted from degrees to radians</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Degrees(System.Single)">
            <summary>convert from radians to degrees</summary>
            <param name="x">the value to convert</param>
            <returns>value converted from radians to degrees</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Sin(System.Single)">
            <summary>equivalent to (float)Math.Sin(x)</summary>
            <param name="x">the value to take the sin of</param>
            <returns>the sin of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Cos(System.Single)">
            <summary>equivalent to (float)Math.Cos(x)</summary>
            <param name="x">the value to take the cos of</param>
            <returns>the cos of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Tan(System.Single)">
            <summary>equivalent to (float)Math.Tan(x)</summary>
            <param name="x">the value to take the tan of</param>
            <returns>the tan of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Asin(System.Single)">
            <summary>equivalent to (float)Math.Asin(x)</summary>
            <param name="x">the value to take the asin of</param>
            <returns>the asin of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Acos(System.Single)">
            <summary>equivalent to (float)Math.Acos(x)</summary>
            <param name="x">the value to take the acos of</param>
            <returns>the acos of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Atan(System.Single)">
            <summary>equivalent to (float)Math.Atan(x)</summary>
            <param name="x">the value to take the atan of</param>
            <returns>the atan of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Atan2(System.Single,System.Single)">
            <summary>equivalent to (float)Math.Atan2(x,y)</summary>
            <param name="x">the x coordinate to take the atan2 of</param>
            <param name="y">the y coordinate to take the atan2 of</param>
            <returns>the atan2 of (x,y)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Sqrt(System.Single)">
            <summary>equivalent to (float)Math.Sqrt(x)</summary>
            <param name="x">the value to take the square root of</param>
            <returns>the square root of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Pow(System.Single,System.Single)">
            <summary>equivalent to (float)Math.Pow(x,y)</summary>
            <param name="x">the value to raise</param>
            <param name="y">the power to raise to</param>
            <returns>x to y power</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Exp(System.Single)">
            <summary>equivalent to (float)Math.Exp(x)</summary>
            <param name="x">the value to take the exp of</param>
            <returns>the exp of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Log(System.Single)">
            <summary>equivalent to (float)Math.Log(x)</summary>
            <param name="x">the value to take the log of</param>
            <returns>the log of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Log10(System.Single)">
            <summary>equivalent to (float)Math.Log10(x)</summary>
            <param name="x">the value to take the log 10 of</param>
            <returns>the log 10 of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Abs(System.Single)">
            <summary>equivalent to Math.Abs(x)</summary>
            <param name="x">the value to take the absolute value of</param>
            <returns>the absolute value of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Sign(System.Single)">
            <summary>equivalent to Math.Sign(x)</summary>
            <param name="x">the value to take the sign of</param>
            <returns>the sign of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Min(System.Single,System.Single)">
            <summary>equivalent to Math.Min(x,y)</summary>
            <param name="x">first input to min</param>
            <param name="y">second input to min</param>
            <returns>the min of x and y</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Max(System.Single,System.Single)">
            <summary>equivalent to Math.Max(x,y)</summary>
            <param name="x">first input to max</param>
            <param name="y">second input to max</param>
            <returns>the max of x and y</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Floor(System.Single)">
            <summary>equivalent to (float)Math.Floor(x)</summary>
            <param name="x">the value to take the floor of</param>
            <returns>the floor of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Ceiling(System.Single)">
            <summary>equivalent to (float)Math.Ceiling(x)</summary>
            <param name="x">the value to take the ceil of</param>
            <returns>the ceil of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Round(System.Single)">
            <summary>equivalent to (float)Math.Round(x)</summary>
            <param name="x">the value to take the round of</param>
            <returns>the round of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Truncate(System.Single)">
            <summary>equivalent to (float)Math.Truncate(x)</summary>
            <param name="x">the value to take the trunc of</param>
            <returns>the trunc of x</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>clamp between two values</summary>
            <param name="x">the value to clamp</param>
            <param name="min">the min to clamp against</param>
            <param name="max">the max to clamp against</param>
            <returns>x clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Repeat(System.Single,System.Single,System.Single)">
            <summary>repeat between two values</summary>
            <param name="x">the value to repeat</param>
            <param name="min">the min to repeat over</param>
            <param name="max">the max to repeat over</param>
            <returns>x repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Mirror(System.Single,System.Single,System.Single)">
            <summary>repeat shuttlewise between two values</summary>
            <param name="x">the value to repeat</param>
            <param name="min">the min to repeat over</param>
            <param name="max">the max to repeat over</param>
            <returns>x repeated shuttlewise between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.Lerp(System.Single,System.Single,System.Single)">
            <summary>lerp between two values</summary>
            <param name="x1">value 1</param>
            <param name="x2">value 2</param>
            <param name="f">lerp amount</param>
            <returns>the result of lerping f between x1 and x2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.FMath.MoveTo(System.Single,System.Single,System.Single)">
            <summary>move one value to another value by specified amount</summary>
            <param name="x1">value 1</param>
            <param name="x2">value 2</param>
            <param name="amount">step amount</param>
            <returns>value moved to another value by specified amount</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.FMath.Step(System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.FMath.LinearStep(System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.FMath.SmoothStep(System.Single,System.Single,System.Single)" -->
        <member name="T:Sce.PlayStation.Core.Short4">
            <summary>vector of 4 signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.Equals(Sce.PlayStation.Core.Short4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.op_Equality(Sce.PlayStation.Core.Short4,Sce.PlayStation.Core.Short4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4.op_Inequality(Sce.PlayStation.Core.Short4,Sce.PlayStation.Core.Short4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short3">
            <summary>vector of 3 signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 3 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.Equals(Sce.PlayStation.Core.Short3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.op_Equality(Sce.PlayStation.Core.Short3,Sce.PlayStation.Core.Short3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3.op_Inequality(Sce.PlayStation.Core.Short3,Sce.PlayStation.Core.Short3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short2">
            <summary>vector of 2 signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.#ctor(System.Int32,System.Int32)">
            <summary>constructor taking 2 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.Equals(Sce.PlayStation.Core.Short2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.op_Equality(Sce.PlayStation.Core.Short2,Sce.PlayStation.Core.Short2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2.op_Inequality(Sce.PlayStation.Core.Short2,Sce.PlayStation.Core.Short2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort4">
            <summary>vector of 4 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.Equals(Sce.PlayStation.Core.UShort4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.op_Equality(Sce.PlayStation.Core.UShort4,Sce.PlayStation.Core.UShort4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4.op_Inequality(Sce.PlayStation.Core.UShort4,Sce.PlayStation.Core.UShort4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort3">
            <summary>vector of 3 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 3 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.Equals(Sce.PlayStation.Core.UShort3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.op_Equality(Sce.PlayStation.Core.UShort3,Sce.PlayStation.Core.UShort3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3.op_Inequality(Sce.PlayStation.Core.UShort3,Sce.PlayStation.Core.UShort3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort2">
            <summary>vector of 2 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.#ctor(System.Int32,System.Int32)">
            <summary>constructor taking 2 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.Equals(Sce.PlayStation.Core.UShort2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.op_Equality(Sce.PlayStation.Core.UShort2,Sce.PlayStation.Core.UShort2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2.op_Inequality(Sce.PlayStation.Core.UShort2,Sce.PlayStation.Core.UShort2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte4">
            <summary>vector of 4 signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.Equals(Sce.PlayStation.Core.Byte4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.op_Equality(Sce.PlayStation.Core.Byte4,Sce.PlayStation.Core.Byte4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4.op_Inequality(Sce.PlayStation.Core.Byte4,Sce.PlayStation.Core.Byte4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte3">
            <summary>vector of 3 signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 3 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.Equals(Sce.PlayStation.Core.Byte3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.op_Equality(Sce.PlayStation.Core.Byte3,Sce.PlayStation.Core.Byte3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3.op_Inequality(Sce.PlayStation.Core.Byte3,Sce.PlayStation.Core.Byte3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte2">
            <summary>vector of 2 signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.#ctor(System.Int32,System.Int32)">
            <summary>constructor taking 2 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.Equals(Sce.PlayStation.Core.Byte2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.op_Equality(Sce.PlayStation.Core.Byte2,Sce.PlayStation.Core.Byte2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2.op_Inequality(Sce.PlayStation.Core.Byte2,Sce.PlayStation.Core.Byte2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte4">
            <summary>vector of 4 unsigned bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 4 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.Equals(Sce.PlayStation.Core.UByte4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.op_Equality(Sce.PlayStation.Core.UByte4,Sce.PlayStation.Core.UByte4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4.op_Inequality(Sce.PlayStation.Core.UByte4,Sce.PlayStation.Core.UByte4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte3">
            <summary>vector of 3 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>constructor taking 3 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.Equals(Sce.PlayStation.Core.UByte3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.op_Equality(Sce.PlayStation.Core.UByte3,Sce.PlayStation.Core.UByte3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3.op_Inequality(Sce.PlayStation.Core.UByte3,Sce.PlayStation.Core.UByte3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte2">
            <summary>vector of 2 unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.#ctor(System.Int32,System.Int32)">
            <summary>constructor taking 2 scalar integers</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.Equals(Sce.PlayStation.Core.UByte2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.op_Equality(Sce.PlayStation.Core.UByte2,Sce.PlayStation.Core.UByte2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2.op_Inequality(Sce.PlayStation.Core.UByte2,Sce.PlayStation.Core.UByte2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short4N">
            <summary>vector of 4 normalized signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4N.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short4N.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.Equals(Sce.PlayStation.Core.Short4N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.op_Equality(Sce.PlayStation.Core.Short4N,Sce.PlayStation.Core.Short4N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short4N.op_Inequality(Sce.PlayStation.Core.Short4N,Sce.PlayStation.Core.Short4N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short3N">
            <summary>vector of 3 normalized signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short3N.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.Equals(Sce.PlayStation.Core.Short3N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.op_Equality(Sce.PlayStation.Core.Short3N,Sce.PlayStation.Core.Short3N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short3N.op_Inequality(Sce.PlayStation.Core.Short3N,Sce.PlayStation.Core.Short3N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Short2N">
            <summary>vector of 2 normalized signed shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short2N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Short2N.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.Equals(Sce.PlayStation.Core.Short2N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.op_Equality(Sce.PlayStation.Core.Short2N,Sce.PlayStation.Core.Short2N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Short2N.op_Inequality(Sce.PlayStation.Core.Short2N,Sce.PlayStation.Core.Short2N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.ShortN">
            <summary>a scalar normalized signed short</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.ShortN.Bits">
            <summary>the short data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.#ctor(System.Single)">
            <summary>constructor taking a float to convert to normalized signed short</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.Equals(Sce.PlayStation.Core.ShortN)">
            <summary>equality test</summary>
            <param name="v">the value to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.op_Equality(Sce.PlayStation.Core.ShortN,Sce.PlayStation.Core.ShortN)">
            <summary>equality operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 == value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.op_Inequality(Sce.PlayStation.Core.ShortN,Sce.PlayStation.Core.ShortN)">
            <summary>not equals operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 != value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.op_Implicit(Sce.PlayStation.Core.ShortN)~System.Single">
            <summary>float casting operator</summary>
            <param name="v">the value to convert to float</param>
            <returns>the float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ShortN.op_Explicit(System.Single)~Sce.PlayStation.Core.ShortN">
            <summary>normalized signed short casting operator</summary>
            <param name="f">the float to convert to normalized signed short</param>
            <returns>the normalized signed short value</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort4N">
            <summary>vector of 4 normalized unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4N.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort4N.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.Equals(Sce.PlayStation.Core.UShort4N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.op_Equality(Sce.PlayStation.Core.UShort4N,Sce.PlayStation.Core.UShort4N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort4N.op_Inequality(Sce.PlayStation.Core.UShort4N,Sce.PlayStation.Core.UShort4N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort3N">
            <summary>vector of 3 normalized unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort3N.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.Equals(Sce.PlayStation.Core.UShort3N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.op_Equality(Sce.PlayStation.Core.UShort3N,Sce.PlayStation.Core.UShort3N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort3N.op_Inequality(Sce.PlayStation.Core.UShort3N,Sce.PlayStation.Core.UShort3N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShort2N">
            <summary>vector of 2 normalized unsigned shorts</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort2N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShort2N.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.Equals(Sce.PlayStation.Core.UShort2N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.op_Equality(Sce.PlayStation.Core.UShort2N,Sce.PlayStation.Core.UShort2N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShort2N.op_Inequality(Sce.PlayStation.Core.UShort2N,Sce.PlayStation.Core.UShort2N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UShortN">
            <summary>a scalar normalized unsigned short</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UShortN.Bits">
            <summary>the short data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.#ctor(System.Single)">
            <summary>constructor taking a float to convert to normalized unsigned short</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.Equals(Sce.PlayStation.Core.UShortN)">
            <summary>equality test</summary>
            <param name="v">the value to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.op_Equality(Sce.PlayStation.Core.UShortN,Sce.PlayStation.Core.UShortN)">
            <summary>equality operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 == value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.op_Inequality(Sce.PlayStation.Core.UShortN,Sce.PlayStation.Core.UShortN)">
            <summary>not equals operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 != value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.op_Implicit(Sce.PlayStation.Core.UShortN)~System.Single">
            <summary>float casting operator</summary>
            <param name="v">the value to convert to float</param>
            <returns>the float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UShortN.op_Explicit(System.Single)~Sce.PlayStation.Core.UShortN">
            <summary>normalized unsigned short casting operator</summary>
            <param name="f">the float to convert to normalized unsigned short</param>
            <returns>the normalized unsigned short value</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte4N">
            <summary>vector of 4 normalized signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4N.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte4N.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.Equals(Sce.PlayStation.Core.Byte4N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.op_Equality(Sce.PlayStation.Core.Byte4N,Sce.PlayStation.Core.Byte4N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte4N.op_Inequality(Sce.PlayStation.Core.Byte4N,Sce.PlayStation.Core.Byte4N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte3N">
            <summary>vector of 3 normalized signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte3N.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.Equals(Sce.PlayStation.Core.Byte3N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.op_Equality(Sce.PlayStation.Core.Byte3N,Sce.PlayStation.Core.Byte3N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte3N.op_Inequality(Sce.PlayStation.Core.Byte3N,Sce.PlayStation.Core.Byte3N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Byte2N">
            <summary>vector of 2 normalized signed bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte2N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Byte2N.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.Equals(Sce.PlayStation.Core.Byte2N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.op_Equality(Sce.PlayStation.Core.Byte2N,Sce.PlayStation.Core.Byte2N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Byte2N.op_Inequality(Sce.PlayStation.Core.Byte2N,Sce.PlayStation.Core.Byte2N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.ByteN">
            <summary>a scalar normalized signed byte</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.ByteN.Bits">
            <summary>the byte data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.#ctor(System.Single)">
            <summary>constructor taking a float to convert to normalized signed byte</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.Equals(Sce.PlayStation.Core.ByteN)">
            <summary>equality test</summary>
            <param name="v">the value to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.op_Equality(Sce.PlayStation.Core.ByteN,Sce.PlayStation.Core.ByteN)">
            <summary>equality operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 == value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.op_Inequality(Sce.PlayStation.Core.ByteN,Sce.PlayStation.Core.ByteN)">
            <summary>not equals operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 != value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.op_Implicit(Sce.PlayStation.Core.ByteN)~System.Single">
            <summary>float casting operator</summary>
            <param name="v">the value to convert to float</param>
            <returns>the float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.ByteN.op_Explicit(System.Single)~Sce.PlayStation.Core.ByteN">
            <summary>normalized signed byte casting operator</summary>
            <param name="f">the float to convert to normalized signed byte</param>
            <returns>the normalized signed byte value</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte4N">
            <summary>vector of 4 normalized unsigned bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4N.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte4N.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.Equals(Sce.PlayStation.Core.UByte4N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.op_Equality(Sce.PlayStation.Core.UByte4N,Sce.PlayStation.Core.UByte4N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte4N.op_Inequality(Sce.PlayStation.Core.UByte4N,Sce.PlayStation.Core.UByte4N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte3N">
            <summary>vector of 3 normalized unsigned bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3N.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte3N.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.Equals(Sce.PlayStation.Core.UByte3N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.op_Equality(Sce.PlayStation.Core.UByte3N,Sce.PlayStation.Core.UByte3N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte3N.op_Inequality(Sce.PlayStation.Core.UByte3N,Sce.PlayStation.Core.UByte3N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByte2N">
            <summary>vector of 2 normalized unsigned bytes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte2N.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByte2N.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.Equals(Sce.PlayStation.Core.UByte2N)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.op_Equality(Sce.PlayStation.Core.UByte2N,Sce.PlayStation.Core.UByte2N)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByte2N.op_Inequality(Sce.PlayStation.Core.UByte2N,Sce.PlayStation.Core.UByte2N)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.UByteN">
            <summary>a scalar normalized unsigned byte</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.UByteN.Bits">
            <summary>the byte data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.#ctor(System.Single)">
            <summary>constructor taking a float to convert to normalized unsigned byte</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.Equals(Sce.PlayStation.Core.UByteN)">
            <summary>equality test</summary>
            <param name="v">the value to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.op_Equality(Sce.PlayStation.Core.UByteN,Sce.PlayStation.Core.UByteN)">
            <summary>equality operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 == value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.op_Inequality(Sce.PlayStation.Core.UByteN,Sce.PlayStation.Core.UByteN)">
            <summary>not equals operator</summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <returns>true if value 1 != value 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.op_Implicit(Sce.PlayStation.Core.UByteN)~System.Single">
            <summary>float casting operator</summary>
            <param name="v">the value to convert to float</param>
            <returns>the float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.UByteN.op_Explicit(System.Single)~Sce.PlayStation.Core.UByteN">
            <summary>normalized unsigned byte casting operator</summary>
            <param name="f">the float to convert to normalized unsigned byte</param>
            <returns>the normalized unsigned byte value</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Half4">
            <summary>vector of 4 halfs</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half4.W">
            <summary>W</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.ToVector4">
            <summary>return the vector as a Vector4</summary>
            <returns>the vector as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.Equals(Sce.PlayStation.Core.Half4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.op_Equality(Sce.PlayStation.Core.Half4,Sce.PlayStation.Core.Half4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half4.op_Inequality(Sce.PlayStation.Core.Half4,Sce.PlayStation.Core.Half4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Half3">
            <summary>vector of 3 halfs</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half3.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking 3 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary>constructor taking a Vector3</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.ToVector3">
            <summary>return the vector as a Vector3</summary>
            <returns>the vector as a Vector3</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.Equals(Sce.PlayStation.Core.Half3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.op_Equality(Sce.PlayStation.Core.Half3,Sce.PlayStation.Core.Half3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half3.op_Inequality(Sce.PlayStation.Core.Half3,Sce.PlayStation.Core.Half3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Half2">
            <summary>vector of 2 halfs</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half2.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half2.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.#ctor(System.Single,System.Single)">
            <summary>constructor taking 2 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a Vector2</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.ToVector2">
            <summary>return the vector as a Vector2</summary>
            <returns>the vector as a Vector2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.Equals(Sce.PlayStation.Core.Half2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.ToString">
            <summary>get the string representation of vector value</summary>
            <returns>the string representation of vector value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.op_Equality(Sce.PlayStation.Core.Half2,Sce.PlayStation.Core.Half2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half2.op_Inequality(Sce.PlayStation.Core.Half2,Sce.PlayStation.Core.Half2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if v 1 != v 2, false otherwise</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Half">
            <summary>a scalar half</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Half.Bits">
            <summary>the half data</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.#ctor(System.Single)">
            <summary>constructor taking a float to convert to half</summary>
            <param name="f">the float to convert</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.ToFloat">
            <summary>return the float value of this</summary>
            <returns>the float value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.Equals(Sce.PlayStation.Core.Half)">
            <summary>equality test</summary>
            <param name="h">the half to compare this to</param>
            <returns>true if this == h, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.ToString">
            <summary>get the string representation of float value</summary>
            <returns>the string representation of float value</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.GetHashCode">
            <summary>gets the hash code for this</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.op_Equality(Sce.PlayStation.Core.Half,Sce.PlayStation.Core.Half)">
            <summary>equality operator</summary>
            <param name="h1">half 1</param>
            <param name="h2">half 2</param>
            <returns>true if half 1 == half 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.op_Inequality(Sce.PlayStation.Core.Half,Sce.PlayStation.Core.Half)">
            <summary>not equals operator</summary>
            <param name="h1">half 1</param>
            <param name="h2">half 2</param>
            <returns>true if half 1 != half 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.op_Implicit(Sce.PlayStation.Core.Half)~System.Single">
            <summary>float casting operator</summary>
            <param name="h">the half to convert to float</param>
            <returns>the float value of the half</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Half.op_Explicit(System.Single)~Sce.PlayStation.Core.Half">
            <summary>half casting operator</summary>
            <param name="f">the float to convert to half</param>
            <returns>the half value of the float</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Matrix4">
            <summary>matrix of 16 floats</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M11">
            <summary>column 1, element 1</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M12">
            <summary>column 1, element 2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M13">
            <summary>column 1, element 3</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M14">
            <summary>column 1, element 4</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M21">
            <summary>column 2, element 1</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M22">
            <summary>column 2, element 2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M23">
            <summary>column 2, element 3</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M24">
            <summary>column 2, element 4</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M31">
            <summary>column 3, element 1</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M32">
            <summary>column 3, element 2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M33">
            <summary>column 3, element 3</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M34">
            <summary>column 3, element 4</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M41">
            <summary>column 4, element 1</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M42">
            <summary>column 4, element 2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M43">
            <summary>column 4, element 3</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.M44">
            <summary>column 4, element 4</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.Zero">
            <summary>a matrix of all zeroes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Matrix4.Identity">
            <summary>identity matrix</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>matrix constructor taking 16 scalar floats</summary>
            <param name="m11">value to initialize column 1 element 1 with</param>
            <param name="m12">value to initialize column 1 element 2 with</param>
            <param name="m13">value to initialize column 1 element 3 with</param>
            <param name="m14">value to initialize column 1 element 4 with</param>
            <param name="m21">value to initialize column 2 element 1 with</param>
            <param name="m22">value to initialize column 2 element 2 with</param>
            <param name="m23">value to initialize column 2 element 3 with</param>
            <param name="m24">value to initialize column 2 element 4 with</param>
            <param name="m31">value to initialize column 3 element 1 with</param>
            <param name="m32">value to initialize column 3 element 2 with</param>
            <param name="m33">value to initialize column 3 element 3 with</param>
            <param name="m34">value to initialize column 3 element 4 with</param>
            <param name="m41">value to initialize column 4 element 1 with</param>
            <param name="m42">value to initialize column 4 element 2 with</param>
            <param name="m43">value to initialize column 4 element 3 with</param>
            <param name="m44">value to initialize column 4 element 4 with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.#ctor(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>matrix constructor initializing the 4 matrix column vectors</summary>
            <param name="x">vector to initialize matrix column 1 with</param>
            <param name="y">vector to initialize matrix column 2 with</param>
            <param name="z">vector to initialize matrix column 3 with</param>
            <param name="w">vector to initialize matrix column 4 with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.#ctor(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>matrix constructor initializing the 4 matrix column vectors</summary>
            <param name="x">vector to initialize matrix column 1 with</param>
            <param name="y">vector to initialize matrix column 2 with</param>
            <param name="z">vector to initialize matrix column 3 with</param>
            <param name="w">vector to initialize matrix column 4 with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Determinant">
            <summary>return the determinant of this matrix</summary>
            <returns>the determinant of this matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transpose">
            <summary>get the transpose of the matrix</summary>
            <returns>matrix transpose</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transpose(Sce.PlayStation.Core.Matrix4@)">
            <summary>get the transpose of the matrix</summary>
            <param name="result">matrix transpose</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Inverse">
            <summary>inverse for a matrix</summary>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Inverse(Sce.PlayStation.Core.Matrix4@)">
            <summary>inverse for a matrix</summary>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseAffine">
            <summary>inverse for an affine matrix</summary>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseAffine(Sce.PlayStation.Core.Matrix4@)">
            <summary>inverse for an affine matrix</summary>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseOrthonormal">
            <summary>inverse for a orthonormal martix</summary>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseOrthonormal(Sce.PlayStation.Core.Matrix4@)">
            <summary>inverse for a orthonormal matrix</summary>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Orthonormalize">
            <summary>orthonormalize a matrix</summary>
            <returns>orthonormalized matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Orthonormalize(Sce.PlayStation.Core.Matrix4@)">
            <summary>orthonormalize a matrix</summary>
            <param name="result">orthonormalized matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transform(Sce.PlayStation.Core.Vector4)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transform(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v (X,Y,Z,1)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,Z,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v (X,Y,Z,1)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,Z,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v (X,Y,0,1)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,0,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v (X,Y,0,1)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,0,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v (X,Y,Z,0)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,Z,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v (X,Y,Z,0)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,Z,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v (X,Y,0,0)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,0,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v (X,Y,0,0)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,0,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector4)">
            <summary>return this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <returns>this * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <param name="result">this * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <returns>this * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <param name="result">this * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <returns>this * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v ( divided by W )</summary>
            <param name="v">vector</param>
            <param name="result">this * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Add(Sce.PlayStation.Core.Matrix4)">
            <summary>return this + m</summary>
            <param name="m">matrix</param>
            <returns>this + m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Add(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this + m</summary>
            <param name="m">matrix</param>
            <param name="result">this + m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Subtract(Sce.PlayStation.Core.Matrix4)">
            <summary>return this - m</summary>
            <param name="m">matrix</param>
            <returns>this - m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Subtract(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this - m</summary>
            <param name="m">matrix</param>
            <param name="result">this - m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4)">
            <summary>return this * m</summary>
            <param name="m">matrix</param>
            <returns>this * m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this * m</summary>
            <param name="m">matrix</param>
            <param name="result">this * m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.MultiplyAffine(Sce.PlayStation.Core.Matrix4)">
            <summary>return this * m ( for affine matrices )</summary>
            <param name="m">matrix</param>
            <returns>this * m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.MultiplyAffine(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this * m ( for affine matrices )</summary>
            <param name="m">matrix</param>
            <param name="result">this * m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Divide(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Negate(Sce.PlayStation.Core.Matrix4@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.IsOrthonormal(System.Single)">
            <summary>test to determine if a matrix is orthonormal</summary>
            <param name="epsilon">epsilon for testing if vectors are unit vectors</param>
            <returns>true if the matrix is orthonormal, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.IsIdentity">
            <summary>test if this is an identity matrix</summary>
            <returns>true if this is an identity matrix, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Matrix4.Equals(Sce.PlayStation.Core.Matrix4,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Matrix4.Equals(Sce.PlayStation.Core.Matrix4)">
            <summary>equality test</summary>
            <param name="m">the matrix to compare this to</param>
            <returns>true if this == m, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.ToString">
            <summary>convert matrix to string for printing</summary>
            <returns>matrix as string</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Vector3)">
            <summary>gets translation matrix times rotation matrix times scale matrix</summary>
            <param name="translation">x, y, z translation values</param>
            <param name="rotation">quaternion rotation values</param>
            <param name="scale">x, y, z scale values</param>
            <returns>translation matrix times rotation matrix times scale matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets translation matrix times rotation matrix times scale matrix</summary>
            <param name="translation">x, y, z translation values</param>
            <param name="rotation">quaternion rotation values</param>
            <param name="scale">x, y, z scale values</param>
            <param name="result">translation matrix times rotation matrix times scale matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector2,System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>gets translation matrix times rotation matrix times scale matrix</summary>
            <param name="translation">x, y translation values</param>
            <param name="rotation">z rotation angle</param>
            <param name="scale">x, y scale values</param>
            <returns>translation matrix times rotation matrix times scale matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets translation matrix times rotation matrix times scale matrix</summary>
            <param name="translation">x, y translation values</param>
            <param name="rotation">z rotation angle</param>
            <param name="scale">x, y scale values</param>
            <param name="result">translation matrix times rotation matrix times scale matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>gets translation matrix times scale matrix</summary>
            <param name="translation">x, y, z translation values</param>
            <param name="scale">x, y, z scale values</param>
            <returns>translation matrix times scale matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets translation matrix times scale matrix</summary>
            <param name="translation">x, y, z translation values</param>
            <param name="scale">x, y, z scale values</param>
            <param name="result">translation matrix times scale matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>gets translation matrix times scale matrix</summary>
            <param name="translation">x, y translation values</param>
            <param name="scale">x, y scale values</param>
            <returns>translation matrix times scale matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transformation(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets translation matrix times scale matrix</summary>
            <param name="translation">x, y translation values</param>
            <param name="scale">x, y scale values</param>
            <param name="result">translation matrix times scale matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>get a matrix for translating a point</summary>
            <param name="x">x translation</param>
            <param name="y">y translation</param>
            <param name="z">z translation</param>
            <returns>translation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for translating a point</summary>
            <param name="x">x translation</param>
            <param name="y">y translation</param>
            <param name="z">z translation</param>
            <param name="result">translation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(Sce.PlayStation.Core.Vector3)">
            <summary>get a matrix for translating a point</summary>
            <param name="translation">a vector containing the x, y, z translation values</param>
            <returns>translation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for translating a point</summary>
            <param name="translation">a vector containing the x, y, z translation values</param>
            <param name="result">translation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(Sce.PlayStation.Core.Vector2)">
            <summary>get a matrix for translating a point</summary>
            <param name="translation">a vector containing the x, y translation values</param>
            <returns>translation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Translation(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for translating a point</summary>
            <param name="translation">a vector containing the x, y translation values</param>
            <param name="result">translation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationAxis(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>gets the matrix for rotating about an axis</summary>
            <param name="axis">the axis to rotate around</param>
            <param name="angle">the angle to rotate</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationAxis(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets the matrix for rotating about an axis</summary>
            <param name="axis">the axis to rotate around</param>
            <param name="angle">the angle to rotate</param>
            <param name="result">rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationX(System.Single)">
            <summary>gets a matrix for rotating around the x axis</summary>
            <param name="angle">the angle to rotate</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationX(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a matrix for rotating around the x axis</summary>
            <param name="angle">the angle to rotate</param>
            <param name="result">rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationY(System.Single)">
            <summary>gets a matrix for rotating around the y axis</summary>
            <param name="angle">the angle to rotate</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationY(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a matrix for rotating around the y axis</summary>
            <param name="angle">the angle to rotate</param>
            <param name="result">rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZ(System.Single)">
            <summary>gets a matrix for rotating around the z axis</summary>
            <param name="angle">the angle to rotate</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZ(System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a matrix for rotating around the z axis</summary>
            <param name="angle">the angle to rotate</param>
            <param name="result">rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZyx(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZyx(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZyx(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the z, y, x euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZyx(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the z, y, x euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYxz(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYxz(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYxz(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the y, x, z euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYxz(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the y, x, z euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXzy(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXzy(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXzy(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the x, z, y euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXzy(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the x, z, y euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXyz(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXyz(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXyz(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the x, y, z euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationXyz(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the x, y, z euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYzx(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYzx(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYzx(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the y, z, x euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationYzx(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the y, z, x euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZxy(System.Single,System.Single,System.Single)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZxy(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZxy(Sce.PlayStation.Core.Vector3)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the z, x, y euler angles used to create the matrix</param>
            <returns>a new matrix from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.RotationZxy(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>create a new matrix from three euler angles</summary>
            <param name="angles">the z, x, y euler angles used to create the matrix</param>
            <param name="result">a new matrix from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>get a matrix for scaling a point</summary>
            <param name="x">x scale</param>
            <param name="y">y scale</param>
            <param name="z">z scale</param>
            <returns>scaling matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for scaling a point</summary>
            <param name="x">x scale</param>
            <param name="y">y scale</param>
            <param name="z">z scale</param>
            <param name="result">scaling matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(Sce.PlayStation.Core.Vector3)">
            <summary>get a matrix for scaling a point</summary>
            <param name="scale">a vector containing the x, y, z scale values</param>
            <returns>scaling matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for scaling a point</summary>
            <param name="scale">a vector containing the x, y, z scale values</param>
            <param name="result">scaling matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(Sce.PlayStation.Core.Vector2)">
            <summary>get a matrix for scaling a point</summary>
            <param name="scale">a vector containing the x, y scale values</param>
            <returns>scaling matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Scale(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Matrix4@)">
            <summary>get a matrix for scaling a point</summary>
            <param name="scale">a vector containing the x, y scale values</param>
            <param name="result">scaling matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>gets a perspective matrix</summary>
            <param name="fovy">field of view angle in the y direction</param>
            <param name="aspect">aspect ratio</param>
            <param name="n">distance from the viewer to the near clip</param>
            <param name="f">distance from the viewer to the far clip</param>
            <returns>perspective matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a perspective matrix</summary>
            <param name="fovy">field of view angle in the y direction</param>
            <param name="aspect">aspect ratio</param>
            <param name="n">distance from the viewer to the near clip</param>
            <param name="f">distance from the viewer to the far clip</param>
            <param name="result">perspective matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>gets a perspective matrix</summary>
            <param name="l">coordinates for the left vertical clip plane</param>
            <param name="r">coordinates for the right vertical clip plane</param>
            <param name="b">coordinates for the bottom horizontal clip plane</param>
            <param name="t">coordinates for the top horizontal clip plane</param>
            <param name="n">distance to the near clip plane</param>
            <param name="f">distance to the far clip plane</param>
            <returns>perspective matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets a perspective matrix</summary>
            <param name="l">coordinates for the left vertical clip plane</param>
            <param name="r">coordinates for the right vertical clip plane</param>
            <param name="b">coordinates for the bottom horizontal clip plane</param>
            <param name="t">coordinates for the top horizontal clip plane</param>
            <param name="n">distance to the near clip plane</param>
            <param name="f">distance to the far clip plane</param>
            <param name="result">perspective matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>gets an orthographic matrix</summary>
            <param name="l">coordinates for the left vertical clip plane</param>
            <param name="r">coordinates for the right vertical clip plane</param>
            <param name="b">coordinates for the bottom horizontal clip plane</param>
            <param name="t">coordinates for the top horizontal clip plane</param>
            <param name="n">distance to the near clip plane</param>
            <param name="f">distance to the far clip plane</param>
            <returns>orthographic matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets an orthographic matrix</summary>
            <param name="l">coordinates for the left vertical clip plane</param>
            <param name="r">coordinates for the right vertical clip plane</param>
            <param name="b">coordinates for the bottom horizontal clip plane</param>
            <param name="t">coordinates for the top horizontal clip plane</param>
            <param name="n">distance to the near clip plane</param>
            <param name="f">distance to the far clip plane</param>
            <param name="result">orthographic matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.LookAt(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>gets the matrix for a viewing transformation</summary>
            <param name="eye">position of the eye point</param>
            <param name="center">position of the reference point</param>
            <param name="up">the up vector</param>
            <returns>viewing transformation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.LookAt(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Matrix4@)">
            <summary>gets the matrix for a viewing transformation</summary>
            <param name="eye">position of the eye point</param>
            <param name="center">position of the reference point</param>
            <param name="up">the up vector</param>
            <param name="result">viewing transformation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Determinant(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Determinant()</summary>
            <param name="m">matrix</param>
            <returns>the determinant of this matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Determinant(Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Determinant()</summary>
            <param name="m">matrix</param>
            <returns>the determinant of this matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transpose(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Transpose()</summary>
            <param name="m">matrix</param>
            <returns>matrix transpose</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transpose(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Transpose(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">matrix transpose</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Inverse(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Inverse()</summary>
            <param name="m">matrix</param>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Inverse(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Inverse(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseAffine(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to InverseAffine()</summary>
            <param name="m">matrix</param>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseAffine(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to InverseAffine(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseOrthonormal(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to InverseOrthonormal()</summary>
            <param name="m">matrix</param>
            <returns>matrix inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.InverseOrthonormal(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to InverseOrthonormal(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">matrix inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Orthonormalize(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Orthonormalize()</summary>
            <param name="m">matrix</param>
            <returns>orthonormalized matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Orthonormalize(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Orthonormalize(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">orthonormalized matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transform(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Transform(Vector4)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Transform(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Transform(ref Vector4, out Vector4)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to TransformPoint(Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v (X,Y,Z,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to TransformPoint(ref Vector3, out Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v (X,Y,Z,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformPoint(Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v (X,Y,0,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformPoint(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformPoint(ref Vector2, out Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v (X,Y,0,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to TransformVector(Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v (X,Y,Z,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to TransformVector(ref Vector3, out Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v (X,Y,Z,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformVector(Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v (X,Y,0,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformVector(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformVector(ref Vector2, out Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v (X,Y,0,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to TransformProjection(Vector4)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to TransformProjection(ref Vector4, out Vector4)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to TransformProjection(Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to TransformProjection(ref Vector3, out Vector3)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformProjection(Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <returns>m * v ( divided by W )</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.TransformProjection(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformProjection(ref Vector2, out Vector2)</summary>
            <param name="m">matrix</param>
            <param name="v">vector</param>
            <param name="result">m * v ( divided by W )</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Add(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Add(Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>m1 + m2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Add(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Add(ref Matrix4, out Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <param name="result">m1 + m2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Subtract(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Subtract(Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>m1 - m2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Subtract(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Subtract(ref Matrix4, out Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <param name="result">m1 - m2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Multiply(Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>m1 * m2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Multiply(ref Matrix4, out Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <param name="result">m1 * m2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.MultiplyAffine(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to MultiplyAffine(Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>m1 * m2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.MultiplyAffine(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to MultiplyAffine(ref Matrix4, out Matrix4)</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <param name="result">m1 * m2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="m">matrix</param>
            <param name="f">scalar</param>
            <returns>m * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Multiply(Sce.PlayStation.Core.Matrix4@,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Multiply(float, out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="f">scalar</param>
            <param name="result">m * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Divide(Sce.PlayStation.Core.Matrix4,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="m">matrix</param>
            <param name="f">scalar</param>
            <returns>m / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Divide(Sce.PlayStation.Core.Matrix4@,System.Single,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Divide(float, out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="f">scalar</param>
            <param name="result">m / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Negate(Sce.PlayStation.Core.Matrix4)">
            <summary>static function equivalent to Negate()</summary>
            <param name="m">matrix</param>
            <returns>-m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.Negate(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Matrix4@)">
            <summary>static function equivalent to Negate(out Matrix4)</summary>
            <param name="m">matrix</param>
            <param name="result">-m</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Equality(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator to test if two matrices are equal</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>true is equal, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Inequality(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator to test if two matrices are not equal</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>true if not equal, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Addition(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator adding each element of matrix 1 to the corresponding element of matrix 2</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Subtraction(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator subtracting each element of matrix 2 from the corresponding element of matrix 1</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
            <returns>matrix 1 - matrix 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_UnaryNegation(Sce.PlayStation.Core.Matrix4)">
            <summary>unary minus operator</summary>
            <param name="m">matrix to negate</param>
            <returns>unary minus applied to each member of m</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Multiply(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Matrix4)">
            <summary>operator multiplying a matrix by a matrix</summary>
            <param name="m1">matrix 1</param>
            <param name="m2">matrix 2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Multiply(Sce.PlayStation.Core.Matrix4,System.Single)">
            <summary>operator multiplying each matrix element by a scalar float value</summary>
            <param name="m">the matrix to multiply</param>
            <param name="f">the scalar float to multiply each matrix element by</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Multiply(System.Single,Sce.PlayStation.Core.Matrix4)">
            <summary>operator multiplying each matrix element by a scalar float value</summary>
            <param name="f">the scalar float to multiply each matrix element by</param>
            <param name="m">the matrix to multiply</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Multiply(Sce.PlayStation.Core.Matrix4,Sce.PlayStation.Core.Vector4)">
            <summary>operator multiplying a matrix by a vector</summary>
            <param name="m">the matrix to multiply</param>
            <param name="v">the vector to multiply the matrix by</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Matrix4.op_Division(Sce.PlayStation.Core.Matrix4,System.Single)">
            <summary>operator dividing each matrix element by a scalar float value</summary>
            <param name="m">the matrix to divide</param>
            <param name="f">the scalar float to divide each element by</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.ColumnX">
            <summary>the first column in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.ColumnY">
            <summary>the second column in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.ColumnZ">
            <summary>the third column in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.ColumnW">
            <summary>the fourth column in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.RowX">
            <summary>the first row in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.RowY">
            <summary>the second row in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.RowZ">
            <summary>the third row in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.RowW">
            <summary>the fourth row in the matrix</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.AxisX">
            <summary>XYZ components of ColumnX</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.AxisY">
            <summary>XYZ components of ColumnY</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.AxisZ">
            <summary>XYZ components of ColumnZ</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Matrix4.AxisW">
            <summary>XYZ components of ColumnW</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Quaternion">
            <summary>quaternion</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.W">
            <summary>W</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Quaternion.Identity">
            <summary>identity quaternion</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.#ctor(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>constructor taking a Vector3 and a scalar float</summary>
            <param name="xyz">the x, y, z values to init with</param>
            <param name="w">the w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Length">
            <summary>return the length of this quaternion</summary>
            <returns>the length of this quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.LengthSquared">
            <summary>return the length squared of this quaternion</summary>
            <returns>the length squared of this quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Dot(Sce.PlayStation.Core.Quaternion)">
            <summary>dot product</summary>
            <param name="q">quaternion to take the dot product with</param>
            <returns>dot product of this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Dot(Sce.PlayStation.Core.Quaternion@)">
            <summary>dot product</summary>
            <param name="q">quaternion to take the dot product with</param>
            <returns>dot product of this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Normalize">
            <summary>return a unit quaternion</summary>
            <returns>this as a unit quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Normalize(Sce.PlayStation.Core.Quaternion@)">
            <summary>return a unit quaternion</summary>
            <param name="result">this as a unit quaternion</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Conjugate">
            <summary>quaternion conjugate</summary>
            <returns>quaternion conjugate</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Conjugate(Sce.PlayStation.Core.Quaternion@)">
            <summary>quaternion conjugate</summary>
            <param name="result">quaternion conjugate</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Inverse">
            <summary>quaternion inverse</summary>
            <returns>quaternion inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Inverse(Sce.PlayStation.Core.Quaternion@)">
            <summary>quaternion inverse</summary>
            <param name="result">quaternion inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Slerp(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>slerp between 2 quaternions</summary>
            <param name="q">second quaternion</param>
            <param name="f">slerp amount</param>
            <returns>slerp between this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Slerp(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>slerp between 2 quaternions</summary>
            <param name="q">second quaternion</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between this and q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Lerp(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>lerp between 2 quaternions</summary>
            <param name="q">second quaternion</param>
            <param name="f">lerp amount</param>
            <returns>lerp between this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Lerp(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>lerp between 2 quaternions</summary>
            <param name="q">second quaternion</param>
            <param name="f">lerp amount</param>
            <param name="result">lerp between this and q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Log">
            <summary>quaternion log</summary>
            <returns>quaternion log</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Log(Sce.PlayStation.Core.Quaternion@)">
            <summary>quaternion log</summary>
            <param name="result">quaternion log</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Exp">
            <summary>quaternion exp</summary>
            <returns>quaternion exp</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Exp(Sce.PlayStation.Core.Quaternion@)">
            <summary>quaternion exp</summary>
            <param name="result">quaternion exp</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.TurnTo(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>turn to target quaternion by specified angle</summary>
            <param name="q">target quaternion</param>
            <param name="angle">step angle</param>
            <returns>a new quaternion turned to target quaternion by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.TurnTo(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>turn to target quaternion by specified angle</summary>
            <param name="q">target quaternion</param>
            <param name="angle">step angle</param>
            <param name="result">a new quaternion turned to target quaternion by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Angle(Sce.PlayStation.Core.Quaternion)">
            <summary>get the angle between this and the input quaternion</summary>
            <param name="q">the quaternion to get the angle to</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Angle(Sce.PlayStation.Core.Quaternion@)">
            <summary>get the angle between this and the input quaternion</summary>
            <param name="q">the quaternion to get the angle to</param>
            <returns>the angle between this and q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector4)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Add(Sce.PlayStation.Core.Quaternion)">
            <summary>return this + q</summary>
            <param name="q">quaternion</param>
            <returns>this + q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Add(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this + q</summary>
            <param name="q">quaternion</param>
            <param name="result">this + q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Subtract(Sce.PlayStation.Core.Quaternion)">
            <summary>return this - q</summary>
            <param name="q">quaternion</param>
            <returns>this - q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Subtract(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this - q</summary>
            <param name="q">quaternion</param>
            <param name="result">this - q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion)">
            <summary>return this * q</summary>
            <param name="q">quaternion</param>
            <returns>this * q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this * q</summary>
            <param name="q">quaternion</param>
            <param name="result">this * q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Divide(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Negate(Sce.PlayStation.Core.Quaternion@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToVector4">
            <summary>return the quaternion as a Vector4</summary>
            <returns>the quaternion as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToVector4(Sce.PlayStation.Core.Vector4@)">
            <summary>return the quaternion as a Vector4</summary>
            <param name="result">the quaternion as a Vector4</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToMatrix4">
            <summary>convert this quaternion to a Matrix4</summary>
            <returns>Matrix4 representation of this quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToMatrix4(Sce.PlayStation.Core.Matrix4@)">
            <summary>convert this quaternion to a Matrix4</summary>
            <param name="result">Matrix4 representation of this quaternion</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToAxisAngle(Sce.PlayStation.Core.Vector3@,System.Single@)">
            <summary>extract the rotation axis and angle from this quaternion</summary>
            <param name="axis">the rotation axis</param>
            <param name="angle">the rotation angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.IsUnit(System.Single)">
            <summary>test if this is a unit quaternion</summary>
            <param name="epsilon">epsilon used in testing</param>
            <returns>true if this is a unit quaternion, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.IsIdentity">
            <summary>test if this is an identity quaternion</summary>
            <returns>true if this is an identity quaternion, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Quaternion.Equals(Sce.PlayStation.Core.Quaternion,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Quaternion.Equals(Sce.PlayStation.Core.Quaternion)">
            <summary>equality test</summary>
            <param name="q">the quaternion to compare this to</param>
            <returns>true if this == q, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.ToString">
            <summary>get the string representation of this quaternion</summary>
            <returns>the string representation of this quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.FromMatrix4(Sce.PlayStation.Core.Matrix4)">
            <summary>return a quaternion representing a rotation matrix</summary>
            <param name="m">matrix to form the quaternion out of</param>
            <returns>a quaternion representing a rotation matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.FromMatrix4(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation matrix</summary>
            <param name="m">matrix to form the quaternion out of</param>
            <param name="result">a quaternion representing a rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationAxis(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>return a quaternion representing a rotation about an arbitrary axis</summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">the angle to rotate</param>
            <returns>a quaternion representing a rotation about an arbitrary axis</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationAxis(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation about an arbitrary axis</summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">the angle to rotate</param>
            <param name="result">a quaternion representing a rotation about an arbitrary axis</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationX(System.Single)">
            <summary>return a quaternion representing a rotation about the x axis</summary>
            <param name="angle">the angle to rotate by</param>
            <returns>a quaternion representing a rotation about the x axis</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationX(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation about the x axis</summary>
            <param name="angle">the angle to rotate by</param>
            <param name="result">a quaternion representing a rotation about the x axis</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationY(System.Single)">
            <summary>return a quaternion representing a rotation about the y axis</summary>
            <param name="angle">the angle to rotate by</param>
            <returns>a quaternion representing a rotation about the y axis</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationY(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation about the y axis</summary>
            <param name="angle">the angle to rotate by</param>
            <param name="result">a quaternion representing a rotation about the y axis</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZ(System.Single)">
            <summary>return a quaternion representing a rotation about the z axis</summary>
            <param name="angle">the angle to rotate by</param>
            <returns>a quaternion representing a rotation about the z axis</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZ(System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>return a quaternion representing a rotation about the z axis</summary>
            <param name="angle">the angle to rotate by</param>
            <param name="result">a quaternion representing a rotation about the z axis</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZyx(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZyx(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZyx(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the z, y, x euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZyx(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the z, y, x euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYxz(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYxz(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYxz(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the y, x, z euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYxz(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the y, x, z euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXzy(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXzy(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXzy(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the x, z, y euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXzy(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the x, z, y euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXyz(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXyz(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXyz(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the x, y, z euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationXyz(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the x, y, z euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYzx(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYzx(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYzx(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the y, z, x euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationYzx(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the y, z, x euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZxy(System.Single,System.Single,System.Single)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZxy(System.Single,System.Single,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="x">x angle</param>
            <param name="y">y angle</param>
            <param name="z">z angle</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZxy(Sce.PlayStation.Core.Vector3)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the z, x, y euler angles used to create the quaternion</param>
            <returns>a new quaternion from the three euler angles</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.RotationZxy(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Quaternion@)">
            <summary>create a new quaternion from three euler angles</summary>
            <param name="angles">the z, x, y euler angles used to create the quaternion</param>
            <param name="result">a new quaternion from the three euler angles</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Length(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Length()</summary>
            <param name="q">quaternion</param>
            <returns>the length of quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Length(Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Length()</summary>
            <param name="q">quaternion</param>
            <returns>the length of quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.LengthSquared(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="q">quaternion</param>
            <returns>the length squared of quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.LengthSquared(Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="q">quaternion</param>
            <returns>the length squared of quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Dot(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Dot(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>dot product of q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Dot(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Dot(ref Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>dot product of q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Normalize(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Normalize()</summary>
            <param name="q">quaternion</param>
            <returns>q as a unit quaternion</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Normalize(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Normalize(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">q as a unit quaternion</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Conjugate(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Conjugate()</summary>
            <param name="q">quaternion</param>
            <returns>quaternion conjugate</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Conjugate(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Conjugate(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">quaternion conjugate</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Inverse(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Inverse()</summary>
            <param name="q">quaternion</param>
            <returns>quaternion inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Inverse(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Inverse(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">quaternion inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Slerp(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to Slerp(Quaternion, float)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="f">slerp amount</param>
            <returns>slerp between q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Slerp(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Slerp(ref Quaternion, float, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between q1 and q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Lerp(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to Lerp(Quaternion, float)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="f">lerp amount</param>
            <returns>lerp between q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Lerp(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Lerp(ref Quaternion, float, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="f">lerp amount</param>
            <param name="result">lerp between q1 and q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Log(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Log()</summary>
            <param name="q">quaternion</param>
            <returns>quaternion log</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Log(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Log(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">quaternion log</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Exp(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Exp()</summary>
            <param name="q">quaternion</param>
            <returns>quaternion exp</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Exp(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Exp(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">quaternion exp</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.TurnTo(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to TurnTo(Quaternion, float)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="angle">step angle</param>
            <returns>a new quaternion turned to target quaternion by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.TurnTo(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to TurnTo(ref Quaternion, float, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="angle">step angle</param>
            <param name="result">a new quaternion turned to target quaternion by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Angle(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Angle(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>the angle between q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Angle(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Angle(ref Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>the angle between q1 and q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Transform(Vector4)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <returns>q * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Transform(ref Vector4, out Vector4)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <param name="result">q * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Transform(Vector3)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <returns>q * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Transform(ref Vector3, out Vector3)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <param name="result">q * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Transform(Vector2)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <returns>q * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Transform(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Transform(ref Vector2, out Vector2)</summary>
            <param name="q">quaternion</param>
            <param name="v">vector</param>
            <param name="result">q * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Add(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Add(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>q1 + q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Add(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Add(ref Quaternion, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="result">q1 + q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Subtract(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Subtract(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>q1 - q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Subtract(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Subtract(ref Quaternion, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="result">q1 - q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Multiply(Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <returns>q1 * q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Multiply(ref Quaternion, out Quaternion)</summary>
            <param name="q1">quaternion 1</param>
            <param name="q2">quaternion 2</param>
            <param name="result">q1 * q2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="q">quaternion</param>
            <param name="f">scalar</param>
            <returns>q * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Multiply(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Multiply(float, out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="f">scalar</param>
            <param name="result">q * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Divide(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="q">quaternion</param>
            <param name="f">scalar</param>
            <returns>q / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Divide(Sce.PlayStation.Core.Quaternion@,System.Single,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Divide(float, out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="f">scalar</param>
            <param name="result">q / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Negate(Sce.PlayStation.Core.Quaternion)">
            <summary>static function equivalent to Negate()</summary>
            <param name="q">quaternion</param>
            <returns>-q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.Negate(Sce.PlayStation.Core.Quaternion@,Sce.PlayStation.Core.Quaternion@)">
            <summary>static function equivalent to Negate(out Quaternion)</summary>
            <param name="q">quaternion</param>
            <param name="result">-q</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Equality(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>equality operator</summary>
            <param name="q1">first quaternion to compare</param>
            <param name="q2">second quaternion to compare</param>
            <returns>true if q1 == q2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Inequality(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>not equals operator</summary>
            <param name="q1">first quaternion to compare</param>
            <param name="q2">second quaternion to compare</param>
            <returns>true if q1 != q2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Addition(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>addition operator</summary>
            <param name="q1">first quaternion to add</param>
            <param name="q2">second quaternion to add</param>
            <returns>q1 + q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Subtraction(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>subtraction operator</summary>
            <param name="q1">value to subtract from</param>
            <param name="q2">value to subtract</param>
            <returns>q1 - q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_UnaryNegation(Sce.PlayStation.Core.Quaternion)">
            <summary>unary minus operator</summary>
            <param name="q">quaternion to negate</param>
            <returns>unary minus applied to each member of q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Multiply(Sce.PlayStation.Core.Quaternion,Sce.PlayStation.Core.Quaternion)">
            <summary>multiplication operator</summary>
            <param name="q1">first value to multiply</param>
            <param name="q2">second value to multiply</param>
            <returns>q1 * q2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Multiply(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>multiply a quaternion by a scalar float</summary>
            <param name="q">quaternion to multiply</param>
            <param name="f">float to multiply by</param>
            <returns>q * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Multiply(System.Single,Sce.PlayStation.Core.Quaternion)">
            <summary>multiply a quaternion by a scalar float</summary>
            <param name="f">float to multiply by</param>
            <param name="q">quaternion to multiply</param>
            <returns>f * q</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Quaternion.op_Division(Sce.PlayStation.Core.Quaternion,System.Single)">
            <summary>division operator</summary>
            <param name="q">quaternion to divide</param>
            <param name="f">scalar float value to divide by</param>
            <returns>q / f</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Rectangle">
            <summary>rectangle</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Width">
            <summary>Width</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Height">
            <summary>Height</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Zero">
            <summary>a rectangle of all zeroes</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Rectangle.Identity">
            <summary>identity rectangle</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="width">width value to init with</param>
            <param name="height">height value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking a two Vector2s</summary>
            <param name="position">the x, y values to init with</param>
            <param name="size">the width, height value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.#ctor(Sce.PlayStation.Core.Vector4)">
            <summary>constructor taking a Vector4</summary>
            <param name="v">the vector to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Inverse">
            <summary>rectangle inverse</summary>
            <returns>rectangle inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Inverse(Sce.PlayStation.Core.Rectangle@)">
            <summary>rectangle inverse</summary>
            <param name="result">rectangle inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Lerp(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>lerp between 2 rectangles</summary>
            <param name="r">second rectangle</param>
            <param name="f">lerp amount</param>
            <returns>lerp between this and r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Lerp(Sce.PlayStation.Core.Rectangle@,System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>lerp between 2 rectangles</summary>
            <param name="r">second rectangle</param>
            <param name="f">lerp amount</param>
            <param name="result">lerp between this and r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformPoint(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v (X,Y,0,1)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,0,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformPoint(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v (X,Y,0,1)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,0,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformVector(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v (X,Y,0,0)</summary>
            <param name="v">vector</param>
            <returns>this * v (X,Y,0,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformVector(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v (X,Y,0,0)</summary>
            <param name="v">vector</param>
            <param name="result">this * v (X,Y,0,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Add(Sce.PlayStation.Core.Rectangle)">
            <summary>return this + r</summary>
            <param name="r">rectangle</param>
            <returns>this + r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Add(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this + r</summary>
            <param name="r">rectangle</param>
            <param name="result">this + r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Subtract(Sce.PlayStation.Core.Rectangle)">
            <summary>return this - r</summary>
            <param name="r">rectangle</param>
            <returns>this - r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Subtract(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this - r</summary>
            <param name="r">rectangle</param>
            <param name="result">this - r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle)">
            <summary>return this * r</summary>
            <param name="r">rectangle</param>
            <returns>this * r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this * r</summary>
            <param name="r">rectangle</param>
            <param name="result">this * r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Divide(System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Negate(Sce.PlayStation.Core.Rectangle@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToVector4">
            <summary>return the rectangle as a Vector4</summary>
            <returns>the rectangle as a Vector4</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToVector4(Sce.PlayStation.Core.Vector4@)">
            <summary>return the rectangle as a Vector4</summary>
            <param name="result">the rectangle as a Vector4</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToMatrix4">
            <summary>convert this rectangle to a Matrix4</summary>
            <returns>Matrix4 representation of this rectangle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToMatrix4(Sce.PlayStation.Core.Matrix4@)">
            <summary>convert this rectangle to a Matrix4</summary>
            <param name="result">Matrix4 representation of this rectangle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.IsIdentity">
            <summary>test if this is an identity rectangle</summary>
            <returns>true if this is an identity rectangle, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Rectangle.Equals(Sce.PlayStation.Core.Rectangle,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Rectangle.Equals(Sce.PlayStation.Core.Rectangle)">
            <summary>equality test</summary>
            <param name="r">the rectangle to compare this to</param>
            <returns>true if this == r, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.ToString">
            <summary>get the string representation of this rectangle</summary>
            <returns>the string representation of this rectangle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.FromMatrix4(Sce.PlayStation.Core.Matrix4)">
            <summary>return a rectangle representing a 2D translation/scale matrix</summary>
            <param name="m">matrix to form the rectangle out of</param>
            <returns>a rectangle representing a rectangle matrix</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.FromMatrix4(Sce.PlayStation.Core.Matrix4@,Sce.PlayStation.Core.Rectangle@)">
            <summary>return a rectangle representing a 2D translation/scale matrix</summary>
            <param name="m">matrix to form the rectangle out of</param>
            <param name="result">a rectangle representing a rotation matrix</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Inverse(Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Inverse()</summary>
            <param name="r">rectangle</param>
            <returns>rectangle inverse</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Inverse(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Inverse(out Rectangle)</summary>
            <param name="r">rectangle</param>
            <param name="result">rectangle inverse</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Lerp(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>static function equivalent to Lerp(Rectangle, float)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="f">lerp amount</param>
            <returns>lerp between r1 and r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Lerp(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@,System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Lerp(ref Rectangle, float, out Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="f">lerp amount</param>
            <param name="result">lerp between r1 and r2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformPoint(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformPoint(Vector2)</summary>
            <param name="r">rectangle</param>
            <param name="v">vector</param>
            <returns>r * v (X,Y,0,1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformPoint(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformPoint(ref Vector2, out Vector2)</summary>
            <param name="r">rectangle</param>
            <param name="v">vector</param>
            <param name="result">r * v (X,Y,0,1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformVector(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to TransformVector(Vector2)</summary>
            <param name="r">rectangle</param>
            <param name="v">vector</param>
            <returns>r * v (X,Y,0,0)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.TransformVector(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TransformVector(ref Vector2, out Vector2)</summary>
            <param name="r">rectangle</param>
            <param name="v">vector</param>
            <param name="result">r * v (X,Y,0,0)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Add(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Add(Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <returns>r1 + r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Add(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Add(ref Rectangle, out Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="result">r1 + r2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Subtract(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Subtract(Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <returns>r1 - r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Subtract(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Subtract(ref Rectangle, out Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="result">r1 - r2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Multiply(Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <returns>r1 * r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Multiply(ref Rectangle, out Rectangle)</summary>
            <param name="r1">rectangle 1</param>
            <param name="r2">rectangle 2</param>
            <param name="result">r1 * r2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="r">rectangle</param>
            <param name="f">scalar</param>
            <returns>r * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Multiply(Sce.PlayStation.Core.Rectangle@,System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Multiply(float, out Rectangle)</summary>
            <param name="r">rectangle</param>
            <param name="f">scalar</param>
            <param name="result">r * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Divide(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="r">rectangle</param>
            <param name="f">scalar</param>
            <returns>r / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Divide(Sce.PlayStation.Core.Rectangle@,System.Single,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Divide(float, out Rectangle)</summary>
            <param name="r">rectangle</param>
            <param name="f">scalar</param>
            <param name="result">r / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Negate(Sce.PlayStation.Core.Rectangle)">
            <summary>static function equivalent to Negate()</summary>
            <param name="r">rectangle</param>
            <returns>-r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.Negate(Sce.PlayStation.Core.Rectangle@,Sce.PlayStation.Core.Rectangle@)">
            <summary>static function equivalent to Negate(out Rectangle)</summary>
            <param name="r">rectangle</param>
            <param name="result">-r</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Equality(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>equality operator</summary>
            <param name="r1">first rectangle to compare</param>
            <param name="r2">second rectangle to compare</param>
            <returns>true if r1 == r2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Inequality(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>not equals operator</summary>
            <param name="r1">first rectangle to compare</param>
            <param name="r2">second rectangle to compare</param>
            <returns>true if r1 != r2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Addition(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>addition operator</summary>
            <param name="r1">first rectangle to add</param>
            <param name="r2">second rectangle to add</param>
            <returns>r1 + r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Subtraction(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>subtraction operator</summary>
            <param name="r1">value to subtract from</param>
            <param name="r2">value to subtract</param>
            <returns>r1 - r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_UnaryNegation(Sce.PlayStation.Core.Rectangle)">
            <summary>unary minus operator</summary>
            <param name="r">rectangle to negate</param>
            <returns>unary minus applied to each member of r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Multiply(Sce.PlayStation.Core.Rectangle,Sce.PlayStation.Core.Rectangle)">
            <summary>multiplication operator</summary>
            <param name="r1">first value to multiply</param>
            <param name="r2">second value to multiply</param>
            <returns>r1 * r2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Multiply(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>multiply a rectangle by a scalar float</summary>
            <param name="r">rectangle to multiply</param>
            <param name="f">float to multiply by</param>
            <returns>r * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Multiply(System.Single,Sce.PlayStation.Core.Rectangle)">
            <summary>multiply a rectangle by a scalar float</summary>
            <param name="f">float to multiply by</param>
            <param name="r">rectangle to multiply</param>
            <returns>f * r</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Rectangle.op_Division(Sce.PlayStation.Core.Rectangle,System.Single)">
            <summary>division operator</summary>
            <param name="r">rectangle to divide</param>
            <param name="f">scalar float value to divide by</param>
            <returns>r / f</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Rectangle.Position">
            <summary>the base position of the rectangle</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Rectangle.Size">
            <summary>the size dimensions of the rectangle</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Vector4">
            <summary>vector of 4 floats</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.W">
            <summary>W</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.Zero">
            <summary>return a new vector of all zeros</summary>
            <returns>a new vector of all zeros</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.One">
            <summary>return a new vector of all ones</summary>
            <returns>a new vector of all ones</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.UnitX">
            <summary>return a new vector of all zeros with only the x value set to one</summary>
            <returns>a new vector of all zeros with only the x value set to one</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.UnitY">
            <summary>return a new vector of all zeros with only the y value set to one</summary>
            <returns>a new vector of all zeros with only the y value set to one</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.UnitZ">
            <summary>return a new vector of all zeros with only the z value set to one</summary>
            <returns>a new vector of all zeros with only the z value set to one</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector4.UnitW">
            <summary>return a new vector of all zeros with only the w value set to one</summary>
            <returns>a new vector of all zeros with only the w value set to one</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>constructor taking 4 scalar floats</summary>
            <param name="x">x value to init with</param>
            <param name="y">y value to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>constructor taking a Vector3 and a scalar float</summary>
            <param name="xyz">xyz value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>constructor taking a Vector2 and two scalar floats</summary>
            <param name="xy">xy values to init with</param>
            <param name="z">z value to init with</param>
            <param name="w">w value to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>constructor taking two Vector2s</summary>
            <param name="xy">xy values to init with</param>
            <param name="zw">zw values to init with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.#ctor(System.Single)">
            <summary>constructor taking one float</summary>
            <param name="f">f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Length">
            <summary>return the length of this vector</summary>
            <returns>the length of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.LengthSquared">
            <summary>return the length squared of this vector</summary>
            <returns>the length squared of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Distance(Sce.PlayStation.Core.Vector4)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Distance(Sce.PlayStation.Core.Vector4@)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.DistanceSquared(Sce.PlayStation.Core.Vector4)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.DistanceSquared(Sce.PlayStation.Core.Vector4@)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Dot(Sce.PlayStation.Core.Vector4)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Dot(Sce.PlayStation.Core.Vector4@)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Normalize">
            <summary>return this vector normalized</summary>
            <returns>this vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Normalize(Sce.PlayStation.Core.Vector4@)">
            <summary>return this vector normalized</summary>
            <param name="result">this vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Abs">
            <summary>element wise absolute value</summary>
            <returns>element wise absolute value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Abs(Sce.PlayStation.Core.Vector4@)">
            <summary>element wise absolute value</summary>
            <param name="result">element wise absolute value of this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <returns>the min of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the min of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(System.Single)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the min of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the min of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <returns>the max of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the max of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(System.Single)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the max of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the max of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(System.Single,System.Single)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(System.Single,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(System.Single,System.Single)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(System.Single,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Lerp(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <returns>a Vector4 where each element is the result of lerping f between the corresponding elements of this and other</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Lerp(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector4 where each element is the result of lerping f between the corresponding elements of this and other</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.MoveTo(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.MoveTo(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Add(Sce.PlayStation.Core.Vector4)">
            <summary>return this + v</summary>
            <param name="v">vector</param>
            <returns>this + v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Add(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this + v</summary>
            <param name="v">vector</param>
            <param name="result">this + v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Subtract(Sce.PlayStation.Core.Vector4)">
            <summary>return this - v</summary>
            <param name="v">vector</param>
            <returns>this - v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Subtract(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this - v</summary>
            <param name="v">vector</param>
            <param name="result">this - v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4)">
            <summary>return this / v</summary>
            <param name="v">vector</param>
            <returns>this / v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this / v</summary>
            <param name="v">vector</param>
            <param name="result">this / v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Negate(Sce.PlayStation.Core.Vector4@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector4.IsUnit(System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector4.IsZero">
            <summary>test if all elements of this are zero</summary>
            <returns>true if all elements of this are zero, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.IsOne">
            <summary>test if all elements of this are one</summary>
            <returns>true if all elements of this are one, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector4.Equals(Sce.PlayStation.Core.Vector4,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector4.Equals(Sce.PlayStation.Core.Vector4)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.ToString">
            <summary>get the string representation of this vector</summary>
            <returns>the string representation of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Length(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Length(Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.LengthSquared(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.LengthSquared(Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Distance(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Distance(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Distance(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Distance(ref Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.DistanceSquared(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to DistanceSquared(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.DistanceSquared(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to DistanceSquared(ref Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Dot(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Dot(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Dot(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Dot(ref Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Normalize(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Normalize()</summary>
            <param name="v">vector</param>
            <returns>the vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Normalize(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Normalize(out Vector4)</summary>
            <param name="v">vector</param>
            <param name="result">the vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Abs(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Abs()</summary>
            <param name="v">vector</param>
            <returns>element wise absolute value of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Abs(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Abs(out Vector4)</summary>
            <param name="v">vector</param>
            <param name="result">element wise absolute value of v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Min(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the min of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Min(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the min of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Min(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the min of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Min(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Min(float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the min of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Max(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the max of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Max(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the max of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Max(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the max of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Max(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Max(float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the max of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Clamp(Vector4, Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Clamp(ref Vector4, ref Vector4, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4,System.Single,System.Single)">
            <summary>static function equivalent to Clamp(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Clamp(Sce.PlayStation.Core.Vector4@,System.Single,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Clamp(float, float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Repeat(Vector4, Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Repeat(ref Vector4, ref Vector4, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4,System.Single,System.Single)">
            <summary>static function equivalent to Repeat(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Repeat(Sce.PlayStation.Core.Vector4@,System.Single,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Repeat(float, float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Lerp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Lerp(Vector4, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <returns>a Vector4 where each element is the result of lerping f between the corresponding elements of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Lerp(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Lerp(ref Vector4, float, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector4 where each element is the result of lerping f between the corresponding elements of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.MoveTo(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to MoveTo(Vector4, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.MoveTo(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to MoveTo(ref Vector4, float, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Add(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Add(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Add(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Add(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 + v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Subtract(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Subtract(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Subtract(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Subtract(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 - v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Multiply(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 * v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Multiply(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 * v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Multiply(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Multiply(float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Divide(Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 / v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Divide(ref Vector4, out Vector4)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 / v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Divide(Sce.PlayStation.Core.Vector4@,System.Single,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Divide(float, out Vector4)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Negate(Sce.PlayStation.Core.Vector4)">
            <summary>static function equivalent to Negate()</summary>
            <param name="v">vector</param>
            <returns>-v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.Negate(Sce.PlayStation.Core.Vector4@,Sce.PlayStation.Core.Vector4@)">
            <summary>static function equivalent to Negate(out Vector4)</summary>
            <param name="v">vector</param>
            <param name="result">-v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Equality(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Inequality(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 != vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Addition(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>vector addition operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 + vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Addition(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="v">the vector to add</param>
            <param name="f">the scalar float to add each element of the vector</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Addition(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="f">the scalar float to add each element of the vector</param>
            <param name="v">the vector to add</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Subtraction(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>vector subtraction operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 - vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Subtraction(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>subtract a scalar float from each element of a vector</summary>
            <param name="v">the vector to subtract from</param>
            <param name="f">the scalar float to subtract from each element of the vector</param>
            <returns>a new vector with f subtracted from each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Subtraction(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>creates a new vector consisting of {f, f, f, f}, and then subtracts v from it</summary>
            <param name="f">the scalar that we subtract v from</param>
            <param name="v">the vector to subtract</param>
            <returns>a new vector consisting of v subtracted from the vector {f, f, f, f}</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_UnaryNegation(Sce.PlayStation.Core.Vector4)">
            <summary>unary minus operator</summary>
            <param name="v">vector to negate</param>
            <returns>unary minus applied to each member of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Multiply(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>multiplication operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 * vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Multiply(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="v">the vector to multiply</param>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Multiply(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <param name="v">the vector to multiply</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Division(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>division operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 / vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Division(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>divide each element of a vector by a scalar float</summary>
            <param name="v">the vector to divide by scalar</param>
            <param name="f">the scalar to divide by</param>
            <returns>a new Vector4 consisting of each element of v divided by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector4.op_Division(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>create a new vector consisting of {f, f, f, f} and divide it by vec</summary>
            <param name="f">the scalar to divide by vector</param>
            <param name="v">the vector to divide by</param>
            <returns>a new vector {f, f, f, f} divided by v</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxxx">
            <returns>a new vector consisting of the current vector's x, x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxxx">
            <returns>a new vector consisting of the current vector's y, x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxxx">
            <returns>a new vector consisting of the current vector's z, x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxxx">
            <returns>a new vector consisting of the current vector's w, x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyxx">
            <returns>a new vector consisting of the current vector's x, y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyxx">
            <returns>a new vector consisting of the current vector's y, y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyxx">
            <returns>a new vector consisting of the current vector's z, y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyxx">
            <returns>a new vector consisting of the current vector's w, y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzxx">
            <returns>a new vector consisting of the current vector's x, z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzxx">
            <returns>a new vector consisting of the current vector's y, z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzxx">
            <returns>a new vector consisting of the current vector's z, z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzxx">
            <returns>a new vector consisting of the current vector's w, z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwxx">
            <returns>a new vector consisting of the current vector's x, w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywxx">
            <returns>a new vector consisting of the current vector's y, w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwxx">
            <returns>a new vector consisting of the current vector's z, w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwxx">
            <returns>a new vector consisting of the current vector's w, w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxyx">
            <returns>a new vector consisting of the current vector's x, x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxyx">
            <returns>a new vector consisting of the current vector's y, x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxyx">
            <returns>a new vector consisting of the current vector's z, x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxyx">
            <returns>a new vector consisting of the current vector's w, x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyyx">
            <returns>a new vector consisting of the current vector's x, y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyyx">
            <returns>a new vector consisting of the current vector's y, y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyyx">
            <returns>a new vector consisting of the current vector's z, y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyyx">
            <returns>a new vector consisting of the current vector's w, y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzyx">
            <returns>a new vector consisting of the current vector's x, z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzyx">
            <returns>a new vector consisting of the current vector's y, z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzyx">
            <returns>a new vector consisting of the current vector's z, z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzyx">
            <returns>a new vector consisting of the current vector's w, z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwyx">
            <returns>a new vector consisting of the current vector's x, w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywyx">
            <returns>a new vector consisting of the current vector's y, w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwyx">
            <returns>a new vector consisting of the current vector's z, w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwyx">
            <returns>a new vector consisting of the current vector's w, w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxzx">
            <returns>a new vector consisting of the current vector's x, x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxzx">
            <returns>a new vector consisting of the current vector's y, x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxzx">
            <returns>a new vector consisting of the current vector's z, x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxzx">
            <returns>a new vector consisting of the current vector's w, x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyzx">
            <returns>a new vector consisting of the current vector's x, y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyzx">
            <returns>a new vector consisting of the current vector's y, y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyzx">
            <returns>a new vector consisting of the current vector's z, y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyzx">
            <returns>a new vector consisting of the current vector's w, y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzzx">
            <returns>a new vector consisting of the current vector's x, z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzzx">
            <returns>a new vector consisting of the current vector's y, z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzzx">
            <returns>a new vector consisting of the current vector's z, z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzzx">
            <returns>a new vector consisting of the current vector's w, z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwzx">
            <returns>a new vector consisting of the current vector's x, w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywzx">
            <returns>a new vector consisting of the current vector's y, w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwzx">
            <returns>a new vector consisting of the current vector's z, w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwzx">
            <returns>a new vector consisting of the current vector's w, w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxwx">
            <returns>a new vector consisting of the current vector's x, x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxwx">
            <returns>a new vector consisting of the current vector's y, x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxwx">
            <returns>a new vector consisting of the current vector's z, x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxwx">
            <returns>a new vector consisting of the current vector's w, x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xywx">
            <returns>a new vector consisting of the current vector's x, y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yywx">
            <returns>a new vector consisting of the current vector's y, y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zywx">
            <returns>a new vector consisting of the current vector's z, y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wywx">
            <returns>a new vector consisting of the current vector's w, y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzwx">
            <returns>a new vector consisting of the current vector's x, z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzwx">
            <returns>a new vector consisting of the current vector's y, z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzwx">
            <returns>a new vector consisting of the current vector's z, z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzwx">
            <returns>a new vector consisting of the current vector's w, z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwwx">
            <returns>a new vector consisting of the current vector's x, w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywwx">
            <returns>a new vector consisting of the current vector's y, w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwwx">
            <returns>a new vector consisting of the current vector's z, w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwwx">
            <returns>a new vector consisting of the current vector's w, w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxxy">
            <returns>a new vector consisting of the current vector's x, x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxxy">
            <returns>a new vector consisting of the current vector's y, x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxxy">
            <returns>a new vector consisting of the current vector's z, x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxxy">
            <returns>a new vector consisting of the current vector's w, x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyxy">
            <returns>a new vector consisting of the current vector's x, y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyxy">
            <returns>a new vector consisting of the current vector's y, y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyxy">
            <returns>a new vector consisting of the current vector's z, y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyxy">
            <returns>a new vector consisting of the current vector's w, y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzxy">
            <returns>a new vector consisting of the current vector's x, z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzxy">
            <returns>a new vector consisting of the current vector's y, z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzxy">
            <returns>a new vector consisting of the current vector's z, z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzxy">
            <returns>a new vector consisting of the current vector's w, z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwxy">
            <returns>a new vector consisting of the current vector's x, w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywxy">
            <returns>a new vector consisting of the current vector's y, w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwxy">
            <returns>a new vector consisting of the current vector's z, w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwxy">
            <returns>a new vector consisting of the current vector's w, w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxyy">
            <returns>a new vector consisting of the current vector's x, x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxyy">
            <returns>a new vector consisting of the current vector's y, x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxyy">
            <returns>a new vector consisting of the current vector's z, x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxyy">
            <returns>a new vector consisting of the current vector's w, x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyyy">
            <returns>a new vector consisting of the current vector's x, y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyyy">
            <returns>a new vector consisting of the current vector's y, y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyyy">
            <returns>a new vector consisting of the current vector's z, y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyyy">
            <returns>a new vector consisting of the current vector's w, y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzyy">
            <returns>a new vector consisting of the current vector's x, z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzyy">
            <returns>a new vector consisting of the current vector's y, z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzyy">
            <returns>a new vector consisting of the current vector's z, z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzyy">
            <returns>a new vector consisting of the current vector's w, z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwyy">
            <returns>a new vector consisting of the current vector's x, w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywyy">
            <returns>a new vector consisting of the current vector's y, w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwyy">
            <returns>a new vector consisting of the current vector's z, w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwyy">
            <returns>a new vector consisting of the current vector's w, w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxzy">
            <returns>a new vector consisting of the current vector's x, x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxzy">
            <returns>a new vector consisting of the current vector's y, x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxzy">
            <returns>a new vector consisting of the current vector's z, x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxzy">
            <returns>a new vector consisting of the current vector's w, x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyzy">
            <returns>a new vector consisting of the current vector's x, y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyzy">
            <returns>a new vector consisting of the current vector's y, y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyzy">
            <returns>a new vector consisting of the current vector's z, y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyzy">
            <returns>a new vector consisting of the current vector's w, y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzzy">
            <returns>a new vector consisting of the current vector's x, z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzzy">
            <returns>a new vector consisting of the current vector's y, z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzzy">
            <returns>a new vector consisting of the current vector's z, z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzzy">
            <returns>a new vector consisting of the current vector's w, z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwzy">
            <returns>a new vector consisting of the current vector's x, w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywzy">
            <returns>a new vector consisting of the current vector's y, w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwzy">
            <returns>a new vector consisting of the current vector's z, w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwzy">
            <returns>a new vector consisting of the current vector's w, w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxwy">
            <returns>a new vector consisting of the current vector's x, x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxwy">
            <returns>a new vector consisting of the current vector's y, x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxwy">
            <returns>a new vector consisting of the current vector's z, x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxwy">
            <returns>a new vector consisting of the current vector's w, x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xywy">
            <returns>a new vector consisting of the current vector's x, y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yywy">
            <returns>a new vector consisting of the current vector's y, y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zywy">
            <returns>a new vector consisting of the current vector's z, y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wywy">
            <returns>a new vector consisting of the current vector's w, y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzwy">
            <returns>a new vector consisting of the current vector's x, z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzwy">
            <returns>a new vector consisting of the current vector's y, z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzwy">
            <returns>a new vector consisting of the current vector's z, z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzwy">
            <returns>a new vector consisting of the current vector's w, z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwwy">
            <returns>a new vector consisting of the current vector's x, w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywwy">
            <returns>a new vector consisting of the current vector's y, w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwwy">
            <returns>a new vector consisting of the current vector's z, w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwwy">
            <returns>a new vector consisting of the current vector's w, w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxxz">
            <returns>a new vector consisting of the current vector's x, x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxxz">
            <returns>a new vector consisting of the current vector's y, x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxxz">
            <returns>a new vector consisting of the current vector's z, x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxxz">
            <returns>a new vector consisting of the current vector's w, x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyxz">
            <returns>a new vector consisting of the current vector's x, y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyxz">
            <returns>a new vector consisting of the current vector's y, y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyxz">
            <returns>a new vector consisting of the current vector's z, y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyxz">
            <returns>a new vector consisting of the current vector's w, y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzxz">
            <returns>a new vector consisting of the current vector's x, z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzxz">
            <returns>a new vector consisting of the current vector's y, z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzxz">
            <returns>a new vector consisting of the current vector's z, z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzxz">
            <returns>a new vector consisting of the current vector's w, z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwxz">
            <returns>a new vector consisting of the current vector's x, w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywxz">
            <returns>a new vector consisting of the current vector's y, w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwxz">
            <returns>a new vector consisting of the current vector's z, w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwxz">
            <returns>a new vector consisting of the current vector's w, w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxyz">
            <returns>a new vector consisting of the current vector's x, x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxyz">
            <returns>a new vector consisting of the current vector's y, x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxyz">
            <returns>a new vector consisting of the current vector's z, x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxyz">
            <returns>a new vector consisting of the current vector's w, x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyyz">
            <returns>a new vector consisting of the current vector's x, y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyyz">
            <returns>a new vector consisting of the current vector's y, y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyyz">
            <returns>a new vector consisting of the current vector's z, y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyyz">
            <returns>a new vector consisting of the current vector's w, y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzyz">
            <returns>a new vector consisting of the current vector's x, z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzyz">
            <returns>a new vector consisting of the current vector's y, z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzyz">
            <returns>a new vector consisting of the current vector's z, z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzyz">
            <returns>a new vector consisting of the current vector's w, z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwyz">
            <returns>a new vector consisting of the current vector's x, w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywyz">
            <returns>a new vector consisting of the current vector's y, w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwyz">
            <returns>a new vector consisting of the current vector's z, w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwyz">
            <returns>a new vector consisting of the current vector's w, w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxzz">
            <returns>a new vector consisting of the current vector's x, x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxzz">
            <returns>a new vector consisting of the current vector's y, x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxzz">
            <returns>a new vector consisting of the current vector's z, x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxzz">
            <returns>a new vector consisting of the current vector's w, x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyzz">
            <returns>a new vector consisting of the current vector's x, y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyzz">
            <returns>a new vector consisting of the current vector's y, y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyzz">
            <returns>a new vector consisting of the current vector's z, y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyzz">
            <returns>a new vector consisting of the current vector's w, y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzzz">
            <returns>a new vector consisting of the current vector's x, z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzzz">
            <returns>a new vector consisting of the current vector's y, z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzzz">
            <returns>a new vector consisting of the current vector's z, z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzzz">
            <returns>a new vector consisting of the current vector's w, z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwzz">
            <returns>a new vector consisting of the current vector's x, w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywzz">
            <returns>a new vector consisting of the current vector's y, w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwzz">
            <returns>a new vector consisting of the current vector's z, w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwzz">
            <returns>a new vector consisting of the current vector's w, w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxwz">
            <returns>a new vector consisting of the current vector's x, x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxwz">
            <returns>a new vector consisting of the current vector's y, x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxwz">
            <returns>a new vector consisting of the current vector's z, x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxwz">
            <returns>a new vector consisting of the current vector's w, x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xywz">
            <returns>a new vector consisting of the current vector's x, y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yywz">
            <returns>a new vector consisting of the current vector's y, y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zywz">
            <returns>a new vector consisting of the current vector's z, y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wywz">
            <returns>a new vector consisting of the current vector's w, y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzwz">
            <returns>a new vector consisting of the current vector's x, z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzwz">
            <returns>a new vector consisting of the current vector's y, z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzwz">
            <returns>a new vector consisting of the current vector's z, z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzwz">
            <returns>a new vector consisting of the current vector's w, z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwwz">
            <returns>a new vector consisting of the current vector's x, w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywwz">
            <returns>a new vector consisting of the current vector's y, w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwwz">
            <returns>a new vector consisting of the current vector's z, w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwwz">
            <returns>a new vector consisting of the current vector's w, w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxxw">
            <returns>a new vector consisting of the current vector's x, x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxxw">
            <returns>a new vector consisting of the current vector's y, x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxxw">
            <returns>a new vector consisting of the current vector's z, x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxxw">
            <returns>a new vector consisting of the current vector's w, x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyxw">
            <returns>a new vector consisting of the current vector's x, y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyxw">
            <returns>a new vector consisting of the current vector's y, y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyxw">
            <returns>a new vector consisting of the current vector's z, y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyxw">
            <returns>a new vector consisting of the current vector's w, y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzxw">
            <returns>a new vector consisting of the current vector's x, z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzxw">
            <returns>a new vector consisting of the current vector's y, z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzxw">
            <returns>a new vector consisting of the current vector's z, z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzxw">
            <returns>a new vector consisting of the current vector's w, z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwxw">
            <returns>a new vector consisting of the current vector's x, w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywxw">
            <returns>a new vector consisting of the current vector's y, w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwxw">
            <returns>a new vector consisting of the current vector's z, w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwxw">
            <returns>a new vector consisting of the current vector's w, w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxyw">
            <returns>a new vector consisting of the current vector's x, x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxyw">
            <returns>a new vector consisting of the current vector's y, x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxyw">
            <returns>a new vector consisting of the current vector's z, x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxyw">
            <returns>a new vector consisting of the current vector's w, x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyyw">
            <returns>a new vector consisting of the current vector's x, y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyyw">
            <returns>a new vector consisting of the current vector's y, y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyyw">
            <returns>a new vector consisting of the current vector's z, y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyyw">
            <returns>a new vector consisting of the current vector's w, y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzyw">
            <returns>a new vector consisting of the current vector's x, z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzyw">
            <returns>a new vector consisting of the current vector's y, z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzyw">
            <returns>a new vector consisting of the current vector's z, z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzyw">
            <returns>a new vector consisting of the current vector's w, z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwyw">
            <returns>a new vector consisting of the current vector's x, w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywyw">
            <returns>a new vector consisting of the current vector's y, w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwyw">
            <returns>a new vector consisting of the current vector's z, w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwyw">
            <returns>a new vector consisting of the current vector's w, w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxzw">
            <returns>a new vector consisting of the current vector's x, x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxzw">
            <returns>a new vector consisting of the current vector's y, x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxzw">
            <returns>a new vector consisting of the current vector's z, x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxzw">
            <returns>a new vector consisting of the current vector's w, x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyzw">
            <returns>a new vector consisting of the current vector's x, y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyzw">
            <returns>a new vector consisting of the current vector's y, y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyzw">
            <returns>a new vector consisting of the current vector's z, y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyzw">
            <returns>a new vector consisting of the current vector's w, y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzzw">
            <returns>a new vector consisting of the current vector's x, z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzzw">
            <returns>a new vector consisting of the current vector's y, z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzzw">
            <returns>a new vector consisting of the current vector's z, z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzzw">
            <returns>a new vector consisting of the current vector's w, z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwzw">
            <returns>a new vector consisting of the current vector's x, w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywzw">
            <returns>a new vector consisting of the current vector's y, w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwzw">
            <returns>a new vector consisting of the current vector's z, w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwzw">
            <returns>a new vector consisting of the current vector's w, w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxww">
            <returns>a new vector consisting of the current vector's x, x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxww">
            <returns>a new vector consisting of the current vector's y, x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxww">
            <returns>a new vector consisting of the current vector's z, x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxww">
            <returns>a new vector consisting of the current vector's w, x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyww">
            <returns>a new vector consisting of the current vector's x, y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyww">
            <returns>a new vector consisting of the current vector's y, y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyww">
            <returns>a new vector consisting of the current vector's z, y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyww">
            <returns>a new vector consisting of the current vector's w, y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzww">
            <returns>a new vector consisting of the current vector's x, z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzww">
            <returns>a new vector consisting of the current vector's y, z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzww">
            <returns>a new vector consisting of the current vector's z, z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzww">
            <returns>a new vector consisting of the current vector's w, z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwww">
            <returns>a new vector consisting of the current vector's x, w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywww">
            <returns>a new vector consisting of the current vector's y, w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwww">
            <returns>a new vector consisting of the current vector's z, w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwww">
            <returns>a new vector consisting of the current vector's w, w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxx">
            <returns>a new vector consisting of the current vector's x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxx">
            <returns>a new vector consisting of the current vector's y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxx">
            <returns>a new vector consisting of the current vector's z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxx">
            <returns>a new vector consisting of the current vector's w, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyx">
            <returns>a new vector consisting of the current vector's x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyx">
            <returns>a new vector consisting of the current vector's y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyx">
            <returns>a new vector consisting of the current vector's z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyx">
            <returns>a new vector consisting of the current vector's w, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzx">
            <returns>a new vector consisting of the current vector's x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzx">
            <returns>a new vector consisting of the current vector's y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzx">
            <returns>a new vector consisting of the current vector's z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzx">
            <returns>a new vector consisting of the current vector's w, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwx">
            <returns>a new vector consisting of the current vector's x, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywx">
            <returns>a new vector consisting of the current vector's y, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwx">
            <returns>a new vector consisting of the current vector's z, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwx">
            <returns>a new vector consisting of the current vector's w, w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxy">
            <returns>a new vector consisting of the current vector's x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxy">
            <returns>a new vector consisting of the current vector's y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxy">
            <returns>a new vector consisting of the current vector's z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxy">
            <returns>a new vector consisting of the current vector's w, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyy">
            <returns>a new vector consisting of the current vector's x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyy">
            <returns>a new vector consisting of the current vector's y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyy">
            <returns>a new vector consisting of the current vector's z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyy">
            <returns>a new vector consisting of the current vector's w, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzy">
            <returns>a new vector consisting of the current vector's x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzy">
            <returns>a new vector consisting of the current vector's y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzy">
            <returns>a new vector consisting of the current vector's z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzy">
            <returns>a new vector consisting of the current vector's w, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwy">
            <returns>a new vector consisting of the current vector's x, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywy">
            <returns>a new vector consisting of the current vector's y, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwy">
            <returns>a new vector consisting of the current vector's z, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwy">
            <returns>a new vector consisting of the current vector's w, w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxz">
            <returns>a new vector consisting of the current vector's x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxz">
            <returns>a new vector consisting of the current vector's y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxz">
            <returns>a new vector consisting of the current vector's z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxz">
            <returns>a new vector consisting of the current vector's w, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyz">
            <returns>a new vector consisting of the current vector's x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyz">
            <returns>a new vector consisting of the current vector's y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyz">
            <returns>a new vector consisting of the current vector's z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyz">
            <returns>a new vector consisting of the current vector's w, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzz">
            <returns>a new vector consisting of the current vector's x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzz">
            <returns>a new vector consisting of the current vector's y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzz">
            <returns>a new vector consisting of the current vector's z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzz">
            <returns>a new vector consisting of the current vector's w, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xwz">
            <returns>a new vector consisting of the current vector's x, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ywz">
            <returns>a new vector consisting of the current vector's y, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zwz">
            <returns>a new vector consisting of the current vector's z, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wwz">
            <returns>a new vector consisting of the current vector's w, w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xxw">
            <returns>a new vector consisting of the current vector's x, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yxw">
            <returns>a new vector consisting of the current vector's y, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zxw">
            <returns>a new vector consisting of the current vector's z, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wxw">
            <returns>a new vector consisting of the current vector's w, x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyw">
            <returns>a new vector consisting of the current vector's x, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yyw">
            <returns>a new vector consisting of the current vector's y, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zyw">
            <returns>a new vector consisting of the current vector's z, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wyw">
            <returns>a new vector consisting of the current vector's w, y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xzw">
            <returns>a new vector consisting of the current vector's x, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yzw">
            <returns>a new vector consisting of the current vector's y, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zzw">
            <returns>a new vector consisting of the current vector's z, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wzw">
            <returns>a new vector consisting of the current vector's w, z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xww">
            <returns>a new vector consisting of the current vector's x, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yww">
            <returns>a new vector consisting of the current vector's y, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zww">
            <returns>a new vector consisting of the current vector's z, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Www">
            <returns>a new vector consisting of the current vector's w, w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xx">
            <returns>a new vector consisting of the current vector's x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yx">
            <returns>a new vector consisting of the current vector's y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zx">
            <returns>a new vector consisting of the current vector's z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wx">
            <returns>a new vector consisting of the current vector's w, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xy">
            <returns>a new vector consisting of the current vector's x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yy">
            <returns>a new vector consisting of the current vector's y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zy">
            <returns>a new vector consisting of the current vector's z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wy">
            <returns>a new vector consisting of the current vector's w, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xz">
            <returns>a new vector consisting of the current vector's x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yz">
            <returns>a new vector consisting of the current vector's y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zz">
            <returns>a new vector consisting of the current vector's z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Wz">
            <returns>a new vector consisting of the current vector's w, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xw">
            <returns>a new vector consisting of the current vector's x, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Yw">
            <returns>a new vector consisting of the current vector's y, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Zw">
            <returns>a new vector consisting of the current vector's z, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Ww">
            <returns>a new vector consisting of the current vector's w, w values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyz0">
            <summary>
            return a 4 element vector consisting of the current vector with the w component set to 0
            </summary>
            <returns>a 4 element vector consisting of the current vector with the w component set to 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.Xyz1">
            <summary>
            return a 4 element vector consisting of the current vector with the w component set to 1
            </summary>
            <returns>a 4 element vector consisting of the current vector with the w component set to 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.R">
            <summary>Red</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.G">
            <summary>Green</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.B">
            <summary>Blue</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector4.A">
            <summary>Alpha</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Vector3">
            <summary>vector of 3 floats</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.Zero">
            <summary>return a vector of all zeros</summary>
            <returns>a vector of all zeros</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.One">
            <summary>return a vector of all ones</summary>
            <returns>a vector of all ones</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.UnitX">
            <summary>return a Vector3 with the x component set to one, and all others set to zero</summary>
            <returns>a Vector3 with the x component set to one, and all others set to zero</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.UnitY">
            <summary>return a Vector3 with the y component set to one, and all others set to zero</summary>
            <returns>a Vector3 with the y component set to one, and all others set to zero</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector3.UnitZ">
            <summary>return a Vector3 with the z component set to one, and all others set to zero</summary>
            <returns>a Vector3 with the z component set to one, and all others set to zero</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>constructor taking three floats</summary>
            <param name="x">x value to initialize with</param>
            <param name="y">y value to initialize with</param>
            <param name="z">z value to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>constructor taking a Vector2 and a float</summary>
            <param name="xy">x and y values to initialize with</param>
            <param name="z">z value to initialize with</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.#ctor(System.Single)">
            <summary>constructor taking one float</summary>
            <param name="f">f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Length">
            <summary>return the length of this vector</summary>
            <returns>the length of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.LengthSquared">
            <summary>return the length squared of this vector</summary>
            <returns>the length squared of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Distance(Sce.PlayStation.Core.Vector3)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Distance(Sce.PlayStation.Core.Vector3@)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.DistanceSquared(Sce.PlayStation.Core.Vector3)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.DistanceSquared(Sce.PlayStation.Core.Vector3@)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Dot(Sce.PlayStation.Core.Vector3)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Dot(Sce.PlayStation.Core.Vector3@)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Cross(Sce.PlayStation.Core.Vector3)">
            <summary>cross product</summary>
            <param name="v">vector to take the cross product with</param>
            <returns>cross product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Cross(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>cross product</summary>
            <param name="v">vector to take the cross product with</param>
            <param name="result">cross product of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Normalize">
            <summary>return this vector normalized</summary>
            <returns>this vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Normalize(Sce.PlayStation.Core.Vector3@)">
            <summary>return this vector normalized</summary>
            <param name="result">this vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Abs">
            <summary>element wise absolute value</summary>
            <returns>element wise absolute value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Abs(Sce.PlayStation.Core.Vector3@)">
            <summary>element wise absolute value</summary>
            <param name="result">element wise absolute value of this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <returns>the min of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the min of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(System.Single)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the min of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the min of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <returns>the max of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the max of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(System.Single)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the max of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the max of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(System.Single,System.Single)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(System.Single,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(System.Single,System.Single)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(System.Single,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Lerp(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <returns>a Vector3 where each element is the result of lerping f between the corresponding elements of this and other</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Lerp(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector3 where each element is the result of lerping f between the corresponding elements of this and other</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Slerp(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>slerp between this and the other vector</summary>
            <param name="v">the other vector to slerp to</param>
            <param name="f">slerp amount</param>
            <returns>slerp between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Slerp(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>slerp between this and the other vector</summary>
            <param name="v">the other vector to slerp to</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.MoveTo(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.MoveTo(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.TurnTo(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>turn to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="angle">step angle</param>
            <returns>a new vector turned to target vector by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.TurnTo(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>turn to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="angle">step angle</param>
            <param name="result">a new vector turned to target vector by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Angle(Sce.PlayStation.Core.Vector3)">
            <summary>get the angle between this and the input vector</summary>
            <param name="v">the vector to get the angle to</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Angle(Sce.PlayStation.Core.Vector3@)">
            <summary>get the angle between this and the input vector</summary>
            <param name="v">the vector to get the angle to</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(System.Single)">
            <summary>rotate this around the x axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the x axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector2)">
            <summary>rotate this around the x axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the x axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(System.Single)">
            <summary>rotate this around the y axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the y axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector2)">
            <summary>rotate this around the y axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the y axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(System.Single)">
            <summary>rotate this around the z axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the z axis by an angle</summary>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector2)">
            <summary>rotate this around the z axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>rotate this around the z axis by an angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Reflect(Sce.PlayStation.Core.Vector3)">
            <summary>return this vector reflected about normal </summary>
            <param name="normal">the vector to reflect about</param>
            <returns>this vector reflected about normal</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Reflect(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>return this vector reflected about normal </summary>
            <param name="normal">the vector to reflect about</param>
            <param name="result">this vector reflected about normal</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Perpendicular">
            <summary>return a vector perpendicular to this</summary>
            <returns>a vector perpendicular to this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Perpendicular(Sce.PlayStation.Core.Vector3@)">
            <summary>return a vector perpendicular to this</summary>
            <param name="result">a vector perpendicular to this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ProjectOnLine(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>project this vector onto the line (point,direction)</summary>
            <param name="point">line start point</param>
            <param name="direction">line direction</param>
            <returns>this vector projected onto the line (point,direction)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ProjectOnLine(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>project this vector onto the line (point,direction)</summary>
            <param name="point">line start point</param>
            <param name="direction">line direction</param>
            <param name="result">this vector projected onto the line (point,direction)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Add(Sce.PlayStation.Core.Vector3)">
            <summary>return this + v</summary>
            <param name="v">vector</param>
            <returns>this + v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Add(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this + v</summary>
            <param name="v">vector</param>
            <param name="result">this + v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Subtract(Sce.PlayStation.Core.Vector3)">
            <summary>return this - v</summary>
            <param name="v">vector</param>
            <returns>this - v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Subtract(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this - v</summary>
            <param name="v">vector</param>
            <param name="result">this - v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3)">
            <summary>return this / v</summary>
            <param name="v">vector</param>
            <returns>this / v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this / v</summary>
            <param name="v">vector</param>
            <param name="result">this / v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Negate(Sce.PlayStation.Core.Vector3@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector3.IsUnit(System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector3.IsZero">
            <summary>test if all elements of this are zero</summary>
            <returns>true if all elements of this are zero, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.IsOne">
            <summary>test if all elements of this are one</summary>
            <returns>true if all elements of this are one, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.IsNaN">
            <summary>test if any elements of this are NaN</summary>
            <returns>true if any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector3.Equals(Sce.PlayStation.Core.Vector3,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector3.Equals(Sce.PlayStation.Core.Vector3)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ToString">
            <summary>return the string representation of this</summary>
            <returns>the string representation of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Length(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Length(Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.LengthSquared(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.LengthSquared(Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Distance(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Distance(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Distance(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Distance(ref Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.DistanceSquared(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to DistanceSquared(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.DistanceSquared(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to DistanceSquared(ref Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Dot(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Dot(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Dot(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Dot(ref Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Cross(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Cross(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>cross product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Cross(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Cross(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">cross product of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Normalize(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Normalize()</summary>
            <param name="v">vector</param>
            <returns>the vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Normalize(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Normalize(out Vector3)</summary>
            <param name="v">vector</param>
            <param name="result">the vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Abs(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Abs()</summary>
            <param name="v">vector</param>
            <returns>element wise absolute value of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Abs(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Abs(out Vector3)</summary>
            <param name="v">vector</param>
            <param name="result">element wise absolute value of v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Min(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the min of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Min(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the min of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Min(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the min of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Min(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Min(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the min of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Max(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the max of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Max(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the max of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Max(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the max of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Max(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Max(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the max of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Clamp(Vector3, Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Clamp(ref Vector3, ref Vector3, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3,System.Single,System.Single)">
            <summary>static function equivalent to Clamp(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Clamp(Sce.PlayStation.Core.Vector3@,System.Single,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Clamp(float, float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Repeat(Vector3, Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Repeat(ref Vector3, ref Vector3, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3,System.Single,System.Single)">
            <summary>static function equivalent to Repeat(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Repeat(Sce.PlayStation.Core.Vector3@,System.Single,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Repeat(float, float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Lerp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Lerp(Vector3, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <returns>a Vector3 where each element is the result of lerping f between the corresponding elements of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Lerp(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Lerp(ref Vector3, float, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector3 where each element is the result of lerping f between the corresponding elements of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Slerp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Slerp(Vector3, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">slerp amount</param>
            <returns>slerp between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Slerp(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Slerp(ref Vector3, float, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.MoveTo(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to MoveTo(Vector3, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.MoveTo(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to MoveTo(ref Vector3, float, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector3.TurnTo(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector3.TurnTo(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to TurnTo(ref Vector3, float, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="angle">step angle</param>
            <param name="result">a new vector turned to target vector by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Angle(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Angle(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the angle between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Angle(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Angle(ref Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the angle between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to RotateX(float)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateX(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to RotateX(Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateX(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateX(ref Vector2, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to RotateY(float)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateY(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to RotateY(Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateY(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateY(ref Vector2, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to RotateZ(float)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateZ(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to RotateZ(Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.RotateZ(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to RotateZ(ref Vector2, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the rotated vector</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Reflect(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Reflect(Vector3)</summary>
            <param name="v">vector</param>
            <param name="normal">the vector to reflect about</param>
            <returns>the vector reflected about normal</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Reflect(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Reflect(ref Vector3, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="normal">the vector to reflect about</param>
            <param name="result">the vector reflected about normal</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Perpendicular(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Perpendicular()</summary>
            <param name="v">vector</param>
            <returns>a vector perpendicular to v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Perpendicular(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Perpendicular(out Vector3)</summary>
            <param name="v">vector</param>
            <param name="result">a vector perpendicular to v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ProjectOnLine(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to ProjectOnLine(Vector3, Vector3)</summary>
            <param name="v">vector</param>
            <param name="point">line start point</param>
            <param name="direction">line direction</param>
            <returns>the vector projected onto the line (point,direction)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.ProjectOnLine(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to ProjectOnLine(ref Vector3, ref Vector3, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="point">line start point</param>
            <param name="direction">line direction</param>
            <param name="result">the vector projected onto the line (point,direction)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Add(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Add(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Add(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Add(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 + v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Subtract(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Subtract(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Subtract(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Subtract(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 - v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Multiply(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 * v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Multiply(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 * v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Multiply(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Multiply(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Divide(Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 / v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Divide(ref Vector3, out Vector3)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 / v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Divide(Sce.PlayStation.Core.Vector3@,System.Single,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Divide(float, out Vector3)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Negate(Sce.PlayStation.Core.Vector3)">
            <summary>static function equivalent to Negate()</summary>
            <param name="v">vector</param>
            <returns>-v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.Negate(Sce.PlayStation.Core.Vector3@,Sce.PlayStation.Core.Vector3@)">
            <summary>static function equivalent to Negate(out Vector3)</summary>
            <param name="v">vector</param>
            <param name="result">-v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Equality(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Inequality(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 != vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Addition(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>vector addition operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 + vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Addition(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="v">the vector to add</param>
            <param name="f">the scalar float to add each element of the vector</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Addition(System.Single,Sce.PlayStation.Core.Vector3)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="f">the scalar float to add each element of the vector</param>
            <param name="v">the vector to add</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Subtraction(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>vector subtraction operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 - vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Subtraction(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>subtract a scalar float from each element of a vector</summary>
            <param name="v">the vector to subtract from</param>
            <param name="f">the scalar float to subtract from each element of the vector</param>
            <returns>a new vector with f subtracted from each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Subtraction(System.Single,Sce.PlayStation.Core.Vector3)">
            <summary>creates a new vector consisting of {f, f, f}, and then subtracts v from it</summary>
            <param name="f">the scalar that we subtract v from</param>
            <param name="v">the vector to subtract</param>
            <returns>a new vector consisting of v subtracted from the vector {f, f, f}</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_UnaryNegation(Sce.PlayStation.Core.Vector3)">
            <summary>unary minus operator</summary>
            <param name="v">the vector to negate</param>
            <returns>unary minus applied to each member of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Multiply(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>multiplication operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 * vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Multiply(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="v">the vector to multiply</param>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Multiply(System.Single,Sce.PlayStation.Core.Vector3)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <param name="v">the vector to multiply</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Division(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>division operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 / vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Division(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>divide each element of a vector by a scalar float</summary>
            <param name="v">the vector to divide by scalar</param>
            <param name="f">the scalar to divide by</param>
            <returns>a new Vector3 consisting of each element of v divided by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector3.op_Division(System.Single,Sce.PlayStation.Core.Vector3)">
            <summary>create a new vector consisting of {f, f, f} and divide it by vec</summary>
            <param name="f">the scalar to divide by vector</param>
            <param name="v">the vector to divide by</param>
            <returns>a new vector {f, f, f} divided by v</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xxx">
            <returns>a new vector consisting of the current vector's x, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yxx">
            <returns>a new vector consisting of the current vector's y, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zxx">
            <returns>a new vector consisting of the current vector's z, x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyx">
            <returns>a new vector consisting of the current vector's x, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yyx">
            <returns>a new vector consisting of the current vector's y, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zyx">
            <returns>a new vector consisting of the current vector's z, y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xzx">
            <returns>a new vector consisting of the current vector's x, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yzx">
            <returns>a new vector consisting of the current vector's y, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zzx">
            <returns>a new vector consisting of the current vector's z, z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xxy">
            <returns>a new vector consisting of the current vector's x, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yxy">
            <returns>a new vector consisting of the current vector's y, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zxy">
            <returns>a new vector consisting of the current vector's z, x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyy">
            <returns>a new vector consisting of the current vector's x, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yyy">
            <returns>a new vector consisting of the current vector's y, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zyy">
            <returns>a new vector consisting of the current vector's z, y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xzy">
            <returns>a new vector consisting of the current vector's x, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yzy">
            <returns>a new vector consisting of the current vector's y, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zzy">
            <returns>a new vector consisting of the current vector's z, z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xxz">
            <returns>a new vector consisting of the current vector's x, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yxz">
            <returns>a new vector consisting of the current vector's y, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zxz">
            <returns>a new vector consisting of the current vector's z, x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyz">
            <returns>a new vector consisting of the current vector's x, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yyz">
            <returns>a new vector consisting of the current vector's y, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zyz">
            <returns>a new vector consisting of the current vector's z, y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xzz">
            <returns>a new vector consisting of the current vector's x, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yzz">
            <returns>a new vector consisting of the current vector's y, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zzz">
            <returns>a new vector consisting of the current vector's z, z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xx">
            <returns>a new vector consisting of the current vector's x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yx">
            <returns>a new vector consisting of the current vector's y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zx">
            <returns>a new vector consisting of the current vector's z, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xy">
            <returns>a new vector consisting of the current vector's x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yy">
            <returns>a new vector consisting of the current vector's y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zy">
            <returns>a new vector consisting of the current vector's z, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xz">
            <returns>a new vector consisting of the current vector's x, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Yz">
            <returns>a new vector consisting of the current vector's y, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Zz">
            <returns>a new vector consisting of the current vector's z, z values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyz0">
            <summary>
            return a 4 element vector consisting of the current vector with the w component set to 0
            </summary>
            <returns>a 4 element vector consisting of the current vector with the w component set to 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.Xyz1">
            <summary>
            return a 4 element vector consisting of the current vector with the w component set to 1
            </summary>
            <returns>a 4 element vector consisting of the current vector with the w component set to 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.R">
            <summary>Red</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.G">
            <summary>Green</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector3.B">
            <summary>Blue</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Vector2">
            <summary>vector of 2 floats</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.X">
            <summary>x</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.Y">
            <summary>y</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.Zero">
            <summary>return a new vector with x and y set to 0 and 0</summary>
            <returns>a new vector with x and y set to 0 and 0</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.One">
            <summary>return a new vector with x and y set to 1 and 1</summary>
            <returns>a new vector with x and y set to 1 and 1</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.UnitX">
            <summary>return a new vector with x and y set to 1 and 0</summary>
            <returns>a new vector with x and y set to 1 and 0</returns>
        </member>
        <member name="F:Sce.PlayStation.Core.Vector2.UnitY">
            <summary>return a new vector with x and y set to 0 and 1</summary>
            <returns>a new vector with x and y set to 0 and 1</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.#ctor(System.Single,System.Single)">
            <summary>constructor taking two floats</summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.#ctor(System.Single)">
            <summary>constructor taking one float</summary>
            <param name="f">f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Length">
            <summary>return the length of this vector</summary>
            <returns>the length of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.LengthSquared">
            <summary>return the length squared of this vector</summary>
            <returns>the length squared of this vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Distance(Sce.PlayStation.Core.Vector2)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Distance(Sce.PlayStation.Core.Vector2@)">
            <summary>get the distance between this and another vector</summary>
            <param name="v">the vector to get the distance to</param>
            <returns>the distance bwteen this and the other vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.DistanceSquared(Sce.PlayStation.Core.Vector2)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.DistanceSquared(Sce.PlayStation.Core.Vector2@)">
            <summary>get the distance squared between this and another vector</summary>
            <param name="v">the vector to get the distance squared to</param>
            <returns>the distance between this and the other vector squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Dot(Sce.PlayStation.Core.Vector2)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Dot(Sce.PlayStation.Core.Vector2@)">
            <summary>dot product of this and v</summary>
            <param name="v">vector to take the dot product with</param>
            <returns>dot product of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Determinant(Sce.PlayStation.Core.Vector2)">
            <summary>return the determinant of the 2x2 matrix formed by this and v</summary>
            <param name="v">vector used to form the 2x2 matrix to take the determinant of</param>
            <returns>the determinant of the 2x2 matrix formed by this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Determinant(Sce.PlayStation.Core.Vector2@)">
            <summary>return the determinant of the 2x2 matrix formed by this and v</summary>
            <param name="v">vector used to form the 2x2 matrix to take the determinant of</param>
            <returns>the determinant of the 2x2 matrix formed by this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Normalize">
            <summary>return this vector normalized</summary>
            <returns>this vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Normalize(Sce.PlayStation.Core.Vector2@)">
            <summary>return this vector normalized</summary>
            <param name="result">this vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Abs">
            <summary>element wise absolute value</summary>
            <returns>element wise absolute value of this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Abs(Sce.PlayStation.Core.Vector2@)">
            <summary>element wise absolute value</summary>
            <param name="result">element wise absolute value of this</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <returns>the min of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise min</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the min of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(System.Single)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the min of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise min</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the min of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <returns>the max of this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise max</summary>
            <param name="v">vector to compare to this</param>
            <param name="result">the max of this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(System.Single)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <returns>the max of this and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise max</summary>
            <param name="f">scalar to compare to this</param>
            <param name="result">the max of this and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise clamp</summary>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(System.Single,System.Single)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of this clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(System.Single,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise clamp</summary>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of this clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise repeat</summary>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(System.Single,System.Single)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of this repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(System.Single,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>element wise repeat</summary>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of this repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Lerp(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <returns>a Vector2 where each element is the result of lerping f between the corresponding elements of this and other</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Lerp(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>lerp between this and the other vector</summary>
            <param name="v">the other vector to lerp to</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector2 where each element is the result of lerping f between the corresponding elements of this and other</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Slerp(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>slerp between this and the other vector</summary>
            <param name="v">the other vector to slerp to</param>
            <param name="f">slerp amount</param>
            <returns>slerp between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Slerp(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>slerp between this and the other vector</summary>
            <param name="v">the other vector to slerp to</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between this and v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.MoveTo(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>move to target vector by specified length</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.MoveTo(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>move to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.TurnTo(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>turn to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="angle">step angle</param>
            <returns>a new vector turned to target vector by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.TurnTo(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>turn to target vector by specified angle</summary>
            <param name="v">target vector</param>
            <param name="angle">step angle</param>
            <param name="result">a new vector turned to target vector by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Angle(Sce.PlayStation.Core.Vector2)">
            <summary>return the angle between this and v</summary>
            <param name="v">vector to get the angle with</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Angle(Sce.PlayStation.Core.Vector2@)">
            <summary>return the angle between this and v</summary>
            <param name="v">vector to get the angle with</param>
            <returns>the angle between this and v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(System.Single)">
            <summary>return this vector rotated by angle</summary>
            <param name="angle">angle to rotate by</param>
            <returns>this vector rotated by angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>return this vector rotated by angle</summary>
            <param name="angle">angle to rotate by</param>
            <param name="result">this vector rotated by angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2)">
            <summary>return this vector rotated by angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>this vector rotated by angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>return this vector rotated by angle</summary>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">this vector rotated by angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Reflect(Sce.PlayStation.Core.Vector2)">
            <summary>return this vector reflected about normal </summary>
            <param name="normal">the vector to reflect about</param>
            <returns>this vector reflected about normal</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Reflect(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>return this vector reflected about normal </summary>
            <param name="normal">the vector to reflect about</param>
            <param name="result">this vector reflected about normal</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Perpendicular">
            <summary>return a vector perpendicular to this</summary>
            <returns>a vector perpendicular to this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Perpendicular(Sce.PlayStation.Core.Vector2@)">
            <summary>return this rotated by +pi/2</summary>
            <param name="result">return this rotated by +pi/2 (this is different from Vector3.Perpendicular)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ProjectOnLine(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>project this onto the line (point,direction)</summary>
            <param name="point">point of the line to project onto</param>
            <param name="direction">direction of the line to project onto</param>
            <returns>projection of this onto the line (point,direction)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ProjectOnLine(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>project this onto the line (point,direction)</summary>
            <param name="point">point of the line to project onto</param>
            <param name="direction">direction of the line to project onto</param>
            <param name="result">projection of this onto the line (point,direction)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Add(Sce.PlayStation.Core.Vector2)">
            <summary>return this + v</summary>
            <param name="v">vector</param>
            <returns>this + v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Add(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this + v</summary>
            <param name="v">vector</param>
            <param name="result">this + v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Subtract(Sce.PlayStation.Core.Vector2)">
            <summary>return this - v</summary>
            <param name="v">vector</param>
            <returns>this - v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Subtract(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this - v</summary>
            <param name="v">vector</param>
            <param name="result">this - v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2)">
            <summary>return this * v</summary>
            <param name="v">vector</param>
            <returns>this * v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * v</summary>
            <param name="v">vector</param>
            <param name="result">this * v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(System.Single)">
            <summary>return this * f</summary>
            <param name="f">scalar</param>
            <returns>this * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this * f</summary>
            <param name="f">scalar</param>
            <param name="result">this * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2)">
            <summary>return this / v</summary>
            <param name="v">vector</param>
            <returns>this / v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this / v</summary>
            <param name="v">vector</param>
            <param name="result">this / v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(System.Single)">
            <summary>return this / f</summary>
            <param name="f">scalar</param>
            <returns>this / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>result = this / f</summary>
            <param name="f">scalar</param>
            <param name="result">this / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Negate">
            <summary>return -this</summary>
            <returns>-this</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Negate(Sce.PlayStation.Core.Vector2@)">
            <summary>result = -this</summary>
            <param name="result">-this</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector2.IsUnit(System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector2.IsZero">
            <summary>test if all elements of this are zero</summary>
            <returns>true if all elements of this are zero, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.IsOne">
            <summary>test if all elements of this are one</summary>
            <returns>true if all elements of this are one, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.IsInfinity">
            <summary>test if any elements of this are Infinity</summary>
            <returns>true if any elements of this are Infinity, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.IsNaN">
            <summary>test if any of the elements of this are NaN</summary>
            <returns>true is any elements of this are NaN, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Vector2.Equals(Sce.PlayStation.Core.Vector2,System.Single)" -->
        <member name="M:Sce.PlayStation.Core.Vector2.Equals(Sce.PlayStation.Core.Vector2)">
            <summary>equality test</summary>
            <param name="v">the vector to compare this to</param>
            <returns>true if this == v, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Equals(System.Object)">
            <summary>equality test</summary>
            <param name="o">the object to compare this to</param>
            <returns>true if this == o, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ToString">
            <summary>convert vector to string</summary>
            <returns>string representation of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.GetHashCode">
            <summary>gets the hash code for this vector</summary>
            <returns>integer hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotation(System.Single)">
            <summary>return a new vector that breaks a rotation angle into its x and y components</summary>
            <param name="angle">the rotation angle</param>
            <returns>a new vector that breaks a rotation angle into its x and y components</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotation(System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>return a new vector that breaks a rotation angle into its x and y components</summary>
            <param name="angle">the rotation angle</param>
            <param name="result">a new vector that breaks a rotation angle into its x and y components</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Length(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Length(Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Length()</summary>
            <param name="v">vector</param>
            <returns>the length of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.LengthSquared(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.LengthSquared(Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to LengthSquared()</summary>
            <param name="v">vector</param>
            <returns>the length squared of the vector</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Distance(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Distance(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Distance(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Distance(ref Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance bwteen v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.DistanceSquared(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to DistanceSquared(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.DistanceSquared(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to DistanceSquared(ref Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the distance between v1 and v2 squared</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Dot(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Dot(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Dot(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Dot(ref Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>dot product of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Determinant(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Determinant(Vector2 v)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the determinant of the 2x2 matrix formed by v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Determinant(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Determinant(ref Vector2 v)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the determinant of the 2x2 matrix formed by v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Normalize(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Normalize()</summary>
            <param name="v">vector</param>
            <returns>the vector normalized</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Normalize(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Normalize(out Vector2)</summary>
            <param name="v">vector</param>
            <param name="result">the vector normalized</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Abs(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Abs()</summary>
            <param name="v">vector</param>
            <returns>element wise absolute value of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Abs(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Abs(out Vector2)</summary>
            <param name="v">vector</param>
            <param name="result">element wise absolute value of v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Min(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the min of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Min(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the min of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Min(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the min of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Min(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Min(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the min of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Max(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the max of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Max(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">the max of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Max(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>the max of v and f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Max(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Max(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">the max of v and f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Clamp(Vector2, Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Clamp(ref Vector2, ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min values to clamp against</param>
            <param name="max">max values to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>static function equivalent to Clamp(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <returns>a new vector consisting of each element of v clamped between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Clamp(Sce.PlayStation.Core.Vector2@,System.Single,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Clamp(float, float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min value to clamp against</param>
            <param name="max">max value to clamp against</param>
            <param name="result">a new vector consisting of each element of v clamped between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Repeat(Vector2, Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Repeat(ref Vector2, ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min values to repeat over</param>
            <param name="max">max values to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>static function equivalent to Repeat(float, float)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <returns>a new vector consisting of each element of v repeated between min and max</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Repeat(Sce.PlayStation.Core.Vector2@,System.Single,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Repeat(float, float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="min">min value to repeat over</param>
            <param name="max">max value to repeat over</param>
            <param name="result">a new vector consisting of each element of v repeated between min and max</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Lerp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Lerp(Vector2, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <returns>a Vector2 where each element is the result of lerping f between the corresponding elements of v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Lerp(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Lerp(ref Vector2, float, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">lerp amount</param>
            <param name="result">a Vector2 where each element is the result of lerping f between the corresponding elements of v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Slerp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Slerp(Vector2, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">slerp amount</param>
            <returns>slerp between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Slerp(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Slerp(ref Vector2, float, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="f">slerp amount</param>
            <param name="result">slerp between v1 and v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.MoveTo(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to MoveTo(Vector2, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <returns>a new vector moved to target vector by specified length</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.MoveTo(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to MoveTo(ref Vector2, float, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="length">step length</param>
            <param name="result">a new vector moved to target vector by specified length</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.TurnTo(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to TurnTo(Vector2, float)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="angle">step angle</param>
            <returns>a new vector turned to target vector by specified angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.TurnTo(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to TurnTo(ref Vector2, float, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="angle">step angle</param>
            <param name="result">a new vector turned to target vector by specified angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Angle(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Angle(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the angle between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Angle(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Angle(ref Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>the angle between v1 and v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Rotate(float)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <returns>the vector rotated by angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Rotate(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="angle">angle to rotate by</param>
            <param name="result">the vector rotated by angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Rotate(Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <returns>the vector rotated by angle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Rotate(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Rotate(ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="rotation">a vector containing the cos and sin of the angle to rotate by</param>
            <param name="result">the vector rotated by angle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Reflect(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Reflect(Vector2)</summary>
            <param name="v">vector</param>
            <param name="normal">the vector to reflect about</param>
            <returns>the vector reflected about normal</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Reflect(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Reflect(ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="normal">the vector to reflect about</param>
            <param name="result">the vector reflected about normal</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Perpendicular(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Perpendicular()</summary>
            <param name="v">vector</param>
            <returns>a vector perpendicular to v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Perpendicular(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Perpendicular(out Vector2)</summary>
            <param name="v">vector</param>
            <param name="result">a vector perpendicular to v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ProjectOnLine(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to ProjectOnLine(Vector2, Vector2)</summary>
            <param name="v">vector</param>
            <param name="point">point of the line to project onto</param>
            <param name="direction">direction of the line to project onto</param>
            <returns>projection of v onto the line (point,direction)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.ProjectOnLine(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to ProjectOnLine(ref Vector2, ref Vector2, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="point">point of the line to project onto</param>
            <param name="direction">direction of the line to project onto</param>
            <param name="result">projection of v onto the line (point,direction)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Add(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Add(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Add(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Add(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 + v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Subtract(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Subtract(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Subtract(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Subtract(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 - v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Multiply(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 * v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Multiply(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 * v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Multiply(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v * f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Multiply(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Multiply(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v * f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Divide(Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>v1 / v2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Divide(ref Vector2, out Vector2)</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <param name="result">v1 / v2</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>static function equivalent to Divide(float)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <returns>v / f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Divide(Sce.PlayStation.Core.Vector2@,System.Single,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Divide(float, out Vector2)</summary>
            <param name="v">vector</param>
            <param name="f">scalar</param>
            <param name="result">v / f</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Negate(Sce.PlayStation.Core.Vector2)">
            <summary>static function equivalent to Negate()</summary>
            <param name="v">vector</param>
            <returns>-v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.Negate(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>static function equivalent to Negate(out Vector2)</summary>
            <param name="v">vector</param>
            <param name="result">-v</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Equality(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>equality operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 == vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Inequality(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>not equals operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>true if vector 1 != vector 2, false otherwise</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Addition(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>vector addition operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 + vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Addition(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="v">the vector to add</param>
            <param name="f">the scalar float to add each element of the vector</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Addition(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>adds a scalar float to each element of a vector</summary>
            <param name="f">the scalar float to add each element of the vector</param>
            <param name="v">the vector to add</param>
            <returns>a new vector with f added to each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Subtraction(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>vector subtraction operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 - vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Subtraction(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>subtract a scalar float from each element of a vector</summary>
            <param name="v">the vector to subtract from</param>
            <param name="f">the scalar float to subtract from each element of the vector</param>
            <returns>a new vector with f subtracted from each element of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Subtraction(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>creates a new vector consisting of {f, f}, and then subtracts v from it</summary>
            <param name="f">the scalar that we subtract v from</param>
            <param name="v">the vector to subtract</param>
            <returns>a new vector consisting of v subtracted from the vector {f, f}</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_UnaryNegation(Sce.PlayStation.Core.Vector2)">
            <summary>unary minus operator</summary>
            <param name="v">the vector to negate</param>
            <returns>unary minus applied to each member of v</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Multiply(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>multiplication operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 * vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Multiply(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="v">the vector to multiply</param>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Multiply(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>multiply each element of vector by scalar float</summary>
            <param name="f">the scalar to multiply each element of the vector by</param>
            <param name="v">the vector to multiply</param>
            <returns>a new vector consisting of each element of vector multiplied by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Division(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>division operator</summary>
            <param name="v1">vector 1</param>
            <param name="v2">vector 2</param>
            <returns>vector 1 / vector 2</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Division(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>divide each element of a vector by a scalar float</summary>
            <param name="v">the vector to divide by scalar</param>
            <param name="f">the scalar to divide by</param>
            <returns>a new Vector2 consisting of each element of v divided by f</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Vector2.op_Division(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>create a new vector consisting of {f, f} and divide it by vec</summary>
            <param name="f">the scalar to divide by vector</param>
            <param name="v">the vector to divide by</param>
            <returns>a new vector {f, f} divided by v</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xx">
            <returns>a new vector consisting of the current vector's x, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Yx">
            <returns>a new vector consisting of the current vector's y, x values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy">
            <returns>a new vector consisting of the current vector's x, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Yy">
            <returns>a new vector consisting of the current vector's y, y values</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy0">
            <summary>
            returns a 3 element vector consisting of the current vector with the z component set to 0
            </summary>
            <returns>a 3 element vector consisting of the current vector with the z component set to 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy1">
            <summary>
            return a 3 element vector consisting of the current vector with the z component set to 1
            </summary>
            <returns>a 3 element vector consisting of the current vector with the z component set to 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy00">
            <summary>
            return a 4 element vector consisting of the current vector with the z and w components set to 0 and 0
            </summary>
            <returns>a 4 element vector consisting of the current vector with the z and w components set to 0 and 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy01">
            <summary>
            return a 4 element vector consisting of the current vector with the z and w components set to 0 and 1
            </summary>
            <returns>a 4 element vector consisting of the current vector with the z and w components set to 0 and 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy10">
            <summary>
            return a 4 element vector consisting of the current vector with the z and w components set to 1 and 0
            </summary>
            <returns>a 4 element vector consisting of the current vector with the z and w components set to 1 and 0</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.Xy11">
            <summary>
            return a 4 element vector consisting of the current vector with the z and w components set to 1 and 1
            </summary>
            <returns>a 4 element vector consisting of the current vector with the z and w components set to 1 and 1</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.R">
            <summary>Red</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Vector2.G">
            <summary>Green</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.BgmStatus">
            <summary>Enumerators representing states for music</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.BgmStatus.Stopped">
            <summary>Stop</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.BgmStatus.Playing">
            <summary>Play</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.BgmStatus.Paused">
            <summary>Pause</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.BgmPlayer">
            <summary>Class providing music playback features</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Finalize">
            <summary>BgmPlayer finalizer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Dispose">
            <summary>Frees unmanaged resources of the BgmPlayer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Play">
            <summary>Plays music</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Stop">
            <summary>Stops music</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Pause">
            <summary>Pauses the music player</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.BgmPlayer.Resume">
            <summary>Cancels the pause of the music player</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Status">
            <summary>State of the music player</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Volume">
            <summary>Volume (0.0-1.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Loop">
            <summary>Loop playback</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.PlaybackRate">
            <summary>Playback speed ratio and pitch (0.25-4.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Time">
            <summary>Playback time (seconds)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.Duration">
            <summary>Playback duration (seconds)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.LoopStart">
            <summary>Loop start time (seconds)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.BgmPlayer.LoopEnd">
            <summary>Loop end time (seconds)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.Bgm">
            <summary>Music data</summary>
            <remarks>mp3 files can be used as music data.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.#ctor(System.String)">
            <summary>Bgm constructor (from the filename)</summary>
            <param name="filename">Music data filename</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.#ctor(System.Byte[])">
            <summary>Bgm constructor (from the file image)</summary>
            <param name="fileImage">Music data file image</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.Finalize">
            <summary>Bgm finalizer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.Dispose">
            <summary>Frees unmanaged resources of the Bgm</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Bgm.CreatePlayer">
            <summary>Creates a BgmPlayer object to play this Bgm</summary>
            <returns>BgmPlayer object linked to the music data</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.SoundStatus">
            <summary>Enumerators representing states for sound effects</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.SoundStatus.Stopped">
            <summary>Stop</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Audio.SoundStatus.Playing">
            <summary>Play</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.SoundPlayer">
            <summary>Class providing sound effect playback features</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.SoundPlayer.Finalize">
            <summary>SoundPlayer finalizer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.SoundPlayer.Dispose">
            <summary>Frees unmanaged resources of SoundPlayer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.SoundPlayer.Play">
            <summary>Plays back sound effects</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.SoundPlayer.Stop">
            <summary>Stops sound effects</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Status">
            <summary>States of sound effects</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Volume">
            <summary>Volume (0.0-1.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Pan">
            <summary>Left/right voice position (-1.0-1.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Loop">
            <summary>Loop playback</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.PlaybackRate">
            <summary>Playback speed and pitch (0.25-4.0)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Time">
            <summary>Playback time (seconds)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Audio.SoundPlayer.Duration">
            <summary>Playback duration (seconds)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Audio.Sound">
            <summary>Sound effects data</summary>
            <remarks>wav files can be used as sound effects data.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.#ctor(System.String)">
            <summary>Sound constructor (from the filename)</summary>
            <param name="filename">Sound effect filename</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.#ctor(System.Byte[])">
            <summary>Sound constructor (from the file image)</summary>
            <param name="fileImage">Sound effect file image</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.Finalize">
            <summary>Sound finalizer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.Dispose">
            <summary>Frees unmanaged resources of Sound</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Audio.Sound.CreatePlayer">
            <summary>Creates a SoundPlayer object to play back this sound effect</summary>
            <returns>SoundPlayer object linked to the sound effect data</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraFacing">
            <summary>Camera orientation</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraFacing.Back">
            <summary>Rear camera</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraFacing.Front">
            <summary>Front camera</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraSize">
            <summary>Resolution of the camera image</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraSize.Width">
            <summary>Image width (pixels)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraSize.Height">
            <summary>Image height (pixels)</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraSize.#ctor(System.Int32,System.Int32)">
            <summary>Create instance with the image width and height specified</summary>
            <param name="width">Specify the image width (pixels)</param>
            <param name="height">Specify the image width (pixels)</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraImageFormat">
            <summary>Data format of the stream</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraImageFormat.Rgb565">
            <summary>RGB565 format</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraImageFormat.Rgba8888">
            <summary>RGBA8888 format</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraState">
            <summary>Operational state of the camera</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraState.Closed">
            <summary>Stream is not opened</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraState.Stopped">
            <summary>Stream is stopped</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraState.Running">
            <summary>Stream is running</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraState.TakingPicture">
            <summary>Photograph is being taken</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.PictureState">
            <summary>State of photograph taking</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PictureState.Idle">
            <summary>Photograph is not yet taken</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PictureState.Running">
            <summary>Photograph is being taken</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PictureState.Finishied">
            <summary>Photograph was taken</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PictureState.Failed">
            <summary>Failed to take a photograph</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraInfo">
            <summary>Detailed information of the camera</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraInfo.Facing">
            <summary>Camera orientation</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraInfo.SupportedPreviewSizes">
            <summary>List of resolutions for an image that can be specified to a stream</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraInfo.SupportedPictureSizes">
            <summary>List of resolutions for an image that can be specified for taking a photograph</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera">
            <summary>Class representing a camera</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.Camera.InvalidOperaion">
            <summary>Error code when the method cannot be called</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.Camera.ObjectDisposed">
            <summary>Error code when the object is already deleted</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.Camera.ArgumentOutOfRange">
            <summary>Error code when outside of the array range was specified</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.GetNumberOfCameras">
            <summary>Obtain the number of cameras</summary>
            <returns>Number of cameras</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.GetCameraInfo(System.Int32)">
            <summary>Obtain detailed information of the camera</summary>
            <param name="cameraId">Camera number</param>
            <returns>Detailed information of the camera</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.#ctor(System.Int32)">
            <summary>Constructor that activates a camera and creates an instance<br />
            The instance must be destroyed using the Dispose method<br />
            Because only one camera can be used, when using a different camera,
            a new instance must be created after deleting the current instance.</summary>
            <param name="cameraId">Camera number</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Finalize">
            <summary>Destructor to destroy the camera instance</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Dispose">
            <summary>Destroy the camera instance</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Dispose(System.Boolean)">
            <summary>Destroy the camera instance</summary>
            <param name="disposing">Whether an instance is being destroyed or not</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Open">
            <summary>Open the stream with the default resolution</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Open(System.Int32)">
            <summary>Open the stream with the specified resolution</summary>
            <param name="sizeId">Number of the resolution for an image to be used in a stream</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Close">
            <summary>Close the stream</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Start">
            <summary>Starts image streaming<br />
            Reads data asynchronously to the buffer when the FrameChanged event is set</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Stop">
            <summary>Stops image streaming</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.DoWork(System.Object)">
            <summary>Reads data of the stream to the buffer using a worker thread</summary>
            <param name="obj">Camera instance</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.Read">
            <summary>Reads data of the stream to the buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.TakePicture(System.Int32)">
            <summary>Takes a photograph<br />
            The format of the taken photograph is JPEG<br />
            The taken photograph will be stored in a file<br />
            This method can only be called while an image is being streamed</summary>
            <param name="sizeId">Number of the resolution for an image to be used in taking a photograph</param>
        </member>
        <member name="E:Sce.PlayStation.Core.Device.Camera.FrameChanged">
            <summary>Event that occurs when the stream image frame has changed<br />
            Occurs asynchronously in a thread separate from the thread that called the Start method</summary>
        </member>
        <member name="E:Sce.PlayStation.Core.Device.Camera.PictureStateChanged">
            <summary>Event that occurs when the picture state has changed<br />
            Occurs asynchronously in a thread separate from the thread that called the TakePicture method</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.CameraState">
            <summary>Obtain the operational state of a camera</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.PictureState">
            <summary>Obtain the camera's photo taking state</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.CurrentPreviewSize">
            <summary>Obtains the currently set stream image's resolution</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.CurrentPreviewImageFormat">
            <summary>Obtains the currently set stream data format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.PictureFilename">
            <summary>Obtains the file path of the taken photograph</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera.FrameChangedCallback">
            <summary>Callback method called when the stream image frame has changed</summary>
            <param name="frameBuffer">Frame buffer where the image was stored</param>
            <param name="frameCount">Image frame number</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera.FrameChangedEventArgs">
            <summary>Argument class passed with the event that occurs when the stream image frame has changed</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.FrameChangedEventArgs.#ctor(System.Byte[],System.Int64)">
            <summary>Constructor</summary>
            <param name="frameBuffer">Buffer where the frame data was stored</param>
            <param name="frameCount">Frame number when streaming started</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.FrameChangedEventArgs.FrameBuffer">
            <summary>Buffer where the frame data was stored</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.FrameChangedEventArgs.FrameCount">
            <summary>Frame number when streaming started</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera.PictureStateChangedCallback">
            <summary>Callback method called when the picture state has changed</summary>
            <param name="taken">Picture state</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Camera.PictureStateChangedEventArgs">
            <summary>Argument class passed with the event that occurs when the picture state has changed</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Camera.PictureStateChangedEventArgs.#ctor(Sce.PlayStation.Core.Device.PictureState)">
            <summary>Constructor</summary>
            <param name="taken">Picture state</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.Camera.PictureStateChangedEventArgs.PictureState">
            <summary>Picture state</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraImportDialog">
            <summary>Common dialog class to take a photograph</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.ICommonDialog">
            <summary>Interface common to the Common Dialog</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.ICommonDialog.Open">
            <summary>Opens the Common Dialog</summary>
            <remarks>Calling only in the main thread is possible.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.ICommonDialog.Abort">
            <summary>Aborts the Common Dialog</summary>
            <remarks>Calling only in the main thread is possible.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.ICommonDialog.State">
            <summary>Common Dialog state</summary>
            <remarks>Obtaining only in the main thread is possible.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.ICommonDialog.Result">
            <summary>Operational result of the Common Dialog</summary>
            <remarks>Obtaining only in the main thread is possible.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Dispose">
            <summary>Destroys the common dialog object for taking a photograph</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Dispose(System.Boolean)">
            <summary>Destroys the common dialog object for taking a photograph</summary>
            <param name="disposing">Whether an object is being destroyed or not</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Open">
            <summary>Opens the common dialog for taking a photograph</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Open(Sce.PlayStation.Core.Device.CameraImportDialog.DialogArguments)">
            <summary>Opens the common dialog for taking a photograph</summary>
            <param name="args">Parameters of the common dialog for taking a photograph</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.CameraImportDialog.Abort">
            <summary>Aborts the common dialog for taking a photograph</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.CameraImportDialog.Filename">
            <summary>Obtains the file path of the content stored in the local area</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.CameraImportDialog.State">
            <summary>Obtains the state of the common dialog for taking a photograph</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.CameraImportDialog.Result">
            <summary>Obtains the result of the common dialog for taking a photograph</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraImportDialog.DialogArguments">
            <summary>Parameters that can be specified when opening the common dialog for taking a photograph</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.CameraImportDialog.DialogResults">
            <summary>Result of storing a photograph</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.CameraImportDialog.DialogResults.Filename">
            <summary>File path of the content stored in the local area</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.PhotoImportDialog">
            <summary>Common dialog class to select a photograph</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Dispose">
            <summary>Destroys the common dialog object for selecting a photograph</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Dispose(System.Boolean)">
            <summary>Destroys the common dialog object for selecting a photograph</summary>
            <param name="disposing">Whether an object is being destroyed or not</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Open">
            <summary>Opens the common dialog for selecting a photograph</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Open(Sce.PlayStation.Core.Device.PhotoImportDialog.DialogArguments)">
            <summary>Opens the common dialog for selecting a photograph</summary>
            <param name="args">Parameters of the common dialog for selecting a photograph</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.PhotoImportDialog.Abort">
            <summary>Aborts the common dialog for selecting a photograph</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.PhotoImportDialog.Filename">
            <summary>Obtains the file path of the content stored in the local area</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.PhotoImportDialog.State">
            <summary>Obtains the state of the common dialog for selecting a photograph</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.PhotoImportDialog.Result">
            <summary>Obtains the result of the common dialog for selecting a photograph</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.PhotoImportDialog.DialogArguments">
            <summary>Parameters that can be specified when opening the common dialog for selecting a photograph</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.PhotoImportDialog.DialogResults">
            <summary>Result of storing a photograph</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.PhotoImportDialog.DialogResults.Filename">
            <summary>File path of the content stored in the local area</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.AccountInformation">
            <summary>Static class representing account information</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.AccountInformation.UniqueID">
            <summary>Unique ID</summary>
            <remarks>Obtain a 16-byte number. This is a unique value per account.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.Clipboard">
            <summary>Class for accessing the clipboard</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.Clipboard.SetText(System.String)">
            <summary>Stores text in the clipboard</summary>
            <param name="text">Text to be stored</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.Clipboard.GetText">
            <summary>Obtains the clipboard text</summary>
            <returns>Clipboard text</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.CommonDialogState">
            <summary>Common Dialog state</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogState.None">
            <summary>Not used</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogState.Running">
            <summary>Running</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogState.Finished">
            <summary>Terminated</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.CommonDialogResult">
            <summary>Operational result of the Common Dialog</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogResult.OK">
            <summary>Successful</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogResult.Canceled">
            <summary>Canceled by the user</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogResult.Aborted">
            <summary>Aborted by the program</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.CommonDialogResult.Error">
            <summary>Error occurred</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.TextInputMode">
            <summary>Text input operational mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.TextInputMode.Normal">
            <summary>Standard character input mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.TextInputMode.BasicLatin">
            <summary>ASCII-only input mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.TextInputMode.Password">
            <summary>Password input mode</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.TextInputDialog">
            <summary>Text input dialog</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.#ctor">
            <summary>TextInputDialog constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.Finalize">
            <summary>TextInputDialog finalizer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.Dispose">
            <summary>Frees unmanaged resources of TextInputDialog</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.Open">
            <summary>Opens the text input dialog</summary>
            <remarks>Calling only in the main thread is possible.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.TextInputDialog.Abort">
            <summary>Aborts the text input dialog</summary>
            <remarks>Calling only in the main thread is possible.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.TextInputDialog.State">
            <summary>Dialog state</summary>
            <remarks>Obtaining only in the main thread is possible.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.TextInputDialog.Result">
            <summary>Dialog operational result</summary>
            <remarks>Obtaining only in the main thread is possible.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.TextInputDialog.Mode">
            <summary>Text input mode</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.TextInputDialog.Text">
            <summary>Edit-target text</summary>
            <remarks>By setting Text before calling Open(), a character string in the initial state of the text input dialog can be specified. After the State becomes Finished and it is confirmed that the Result is OK, obtain Text to consequently obtain the text edit result.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseDialog">
            <summary>Class representing the dialog for processing In-App billing.</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.#ctor">
            <summary>Creates a dialog</summary>
            <remarks>A dialog class is created, and a product list is read from the metadata.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Finalize">
            <summary>Deletes a dialog</summary>
            <remarks>Deletes a dialog.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Dispose">
            <summary>Frees unmanaged resources of a dialog</summary>
            <remarks>Frees unmanaged resources of a dialog.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.GetProductInfo(System.String[])">
            <summary>Opens a dialog and obtains product information from the server</summary>
            <param name="labels">Product label array (select all if null)</param>
            <remarks>Opens a dialog, connects to the server, and obtains product information for the specified product. Note that this function sends requests to the server for each product; therefore, it can take a long time to obtain a vast amount of information at one time.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.GetTicketInfo">
            <summary>Opens a dialog and obtains ticket information from the server</summary>
            <remarks>Opens a dialog, connects to the server, and obtains ticket information for all products.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Purchase(System.String)">
            <summary>Opens a dialog and purchases a product</summary>
            <param name="label">Product label</param>
            <remarks>Opens a dialog, connects to the server, and purchases the specified product. Note that product information and ticket information must be obtained in advance. Exceptions will occur in the following cases.
            <list type="bullet"><item><description>The specified product is not registered in the list</description></item><item><description>Product or ticket information is not obtained</description></item><item><description>The specified product is a normal type product and was already purchased</description></item></list><para>When dialog processing is completed and the result is OK, all ticket information is updated. If the result is Error or Aborted, the ticket information is not updated and the IsTicketInfoComplete property is false. In such cases, obtain the ticket information again with the GetTicketInfo function and check if the processing succeeded or failed.
            </para></remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Consume(System.String)">
            <summary>Opens a dialog and consumes a ticket</summary>
            <param name="label">Product label</param>
            <remarks>Opens a dialog, connects to the server, and consumes the ticket of the specified product. Note that ticket information must be obtained in advance. Exceptions will occur in the following cases.
            <list type="bullet"><item><description>The specified product is not registered in the list</description></item><item><description>Ticket information is not obtained</description></item><item><description>The specified product is not a consumption type product</description></item><item><description>The remaining number of times of the product is zero</description></item></list><para>When dialog processing is completed and the result is OK, all ticket information is updated. If the result is Error or Aborted, the ticket information is not updated and the IsTicketInfoComplete property is false. In such cases, obtain the ticket information again with the GetTicketInfo function and check if the processing succeeded or failed.
            </para></remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Open">
            <summary>Opens the dialog (This function is not supported)</summary>
            <remarks>This function is not supported. To open the dialog, use the GetProductInfo, GetTicketInfo, Purchase, and Consume functions. </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Abort">
            <summary>Aborts the dialog (currently unsupported)</summary>
            <remarks>Aborts dialog processing and closes the dialog. </remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.State">
            <summary>Dialog processing state</summary>
            <remarks>Obtains the state of the dialog processing executed last.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Result">
            <summary>Dialog processing result</summary>
            <remarks>Obtains the result of the dialog processing executed last.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Command">
            <summary>Dialog processing command</summary>
            <remarks>Obtains the command of the dialog processing executed last.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.Arguments">
            <summary>Dialog processing argument</summary>
            <remarks>Obtains the argument of the dialog processing executed last.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.ProductList">
            <summary>Product list</summary>
            <remarks>Obtains a list of products that can be purchased.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.IsProductInfoComplete">
            <summary>Whether all product information is obtained</summary>
            <remarks>Returns true if all product information is obtained.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseDialog.IsTicketInfoComplete">
            <summary>Whether all ticket information is obtained</summary>
            <remarks>Returns true if all ticket information is obtained. Returns false if ticket information is not obtained or it cannot be updated to the latest state due to an error.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseCommand">
            <summary>Operation command of In-App Purchase</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.GetProductInfo">
            <summary>Obtains product information from the server</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.GetTicketInfo">
            <summary>Obtains ticket information from the server</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.Purchase">
            <summary>Purchases a product</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseCommand.Consume">
            <summary>Consumes a ticket</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseTicketType">
            <summary>Ticket type of In-App Purchase</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseTicketType.Normal">
            <summary>Normal type</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.InAppPurchaseTicketType.Consumable">
            <summary>Consumption type</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseProduct">
            <summary>Class representing a product that can be purchased with In-App Purchase.</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.Label">
            <summary>Product label</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.Name">
            <summary>Product name</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.Price">
            <summary>Product price (Obtained with GetProductInfo)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.TicketType">
            <summary>Ticket type</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.IsTicketValid">
            <summary>Whether a ticket is valid (Obtained with GetTicketInfo)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProduct.ConsumableTicketCount">
            <summary>Remaining number of times a ticket can be consumed (Obtained with GetTicketInfo)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.InAppPurchaseProductList">
            <summary>Class representing a list of products that can be purchased with In-App Purchase.</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseProductList.IndexOf(System.String)">
            <summary>Returns the number of the element that has the specified label (If none, then -1)</summary>
            <param name="label">Element label</param>
            <returns>Element number (If none, then -1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseProductList.Contains(System.String)">
            <summary>Determines whether an element that has the specified label exists</summary>
            <param name="label">Element label</param>
            <returns>If element exists, then true</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.InAppPurchaseProductList.GetEnumerator">
            <summary>Returns the enumerator</summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProductList.Count">
            <summary>Number of elements</summary>
            <remarks>Returns the number of elements stored in the list.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.InAppPurchaseProductList.Item(System.Int32)">
            <summary>Indexer (depending on number or label)</summary>
            <remarks>Obtains the elements stored in the list.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.NetworkInterfaceType">
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.NetworkInterfaceType.Ethernet">
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.NetworkInterfaceType.Wireless80211">
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.NetworkInterfaceType.MobileBroadband">
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.NetworkInformation">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.NetworkInformation.GetNetworkInterfaceType">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.PersistentMemory">
            <summary>Class providing persistent memory area</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.PersistentMemory.Write(System.Byte[])">
            <summary>Write data to persistent memory</summary>
            <param name="data">Write content (maximum 64KB)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.PersistentMemory.Read">
            <summary>Read data from persistent memory</summary>
            <returns>Read data (64KB)</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.Shell">
            <summary>Class for calling system features</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.Shell.Execute(Sce.PlayStation.Core.Environment.Shell.Action@)">
            <summary>Executes a system feature call</summary>
            <param name="action">Content of the system feature call</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.Shell.Action">
            <summary>Structure to represent the contents of system features</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.Shell.Action.BrowserAction(System.String)">
            <summary>Creates an Action structure for calling the browser</summary>
            <param name="url">URL to open the browser with</param>
            <returns>Action structure representing a browser call</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.RestoredEventArgs">
            <summary>Data passed to the recovery event from the minimized state</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.MinimizedEventArgs">
            <summary>Data passed from a minimized event</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemEvents">
            <summary>Class to receive events from the system</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.SystemEvents.CheckEvents">
            <summary>Checks for system events and updates the system state</summary>
        </member>
        <member name="E:Sce.PlayStation.Core.Environment.SystemEvents.OnRestored">
            <summary>Event handler for recovering from the minimized state</summary>
        </member>
        <member name="E:Sce.PlayStation.Core.Environment.SystemEvents.OnMinimized">
            <summary>Minimized event handler</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemEvents.RestoredEventHandler">
            <summary>Event handler type for recovering from the minimized state</summary>
            <param name="sender">Send-source object</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemEvents.MinimizedEventHandler">
            <summary>Minimized event handler type</summary>
            <param name="sender">Send-source object</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemMemory">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Environment.SystemMemory.Dump">
            <summary>Print some debug information, content might vary in the future.</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.GamePadButtonMeaning">
            <summary>Meanings of the circle and cross buttons</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.GamePadButtonMeaning.CrossIsEnter">
            <summary>The cross button means select</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.GamePadButtonMeaning.CircleIsEnter">
            <summary>The circle button means select</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.YesNoLayout">
            <summary>Yes and No positions of the message dialog</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.YesNoLayout.YesIsLeft">
            <summary>Yes is left</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Environment.YesNoLayout.YesIsRight">
            <summary>Yes is right</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Environment.SystemParameters">
            <summary>Class to receive system parameters</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.Language">
            <summary>System language settings</summary>
            <remarks>The possible values for this property are as follows.
            \li ja-JP : Japanese  \li en-US : English (US)  \li en-GB : English (UK)  \li fr-FR : French \li es-ES : Spanish  \li de-DE : German  \li it-IT : Italian  \li nl-NL : Dutch \li pt-PT : Portuguese  \li pt-BR : Portuguese (Brazil)  \li ru-RU : Russian  \li ko-KR : Korean  \li zh-Hant : Chinese (traditional)  \li zh-Hans : Chinese (simplified)  \li fi_FI : Finnish  \li sv-SE : Swedish  \li da-DK : Danish  \li nb-NO : Norwegian  \li pl-PL : Polish  
            To support new languages in the future, this range may expand and unknown values for applications may return. Even if this property is an unknown value for applications, describe them so that they will operate correctly.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.GamePadButtonMeaning">
            <summary>Meanings of the circle and cross buttons</summary>
            <remarks>The meanings of the circle and cross buttons differ by region. The meanings of the circle and cross buttons set to the system can be obtained by this property.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.YesNoLayout">
            <summary>Yes and No positions of the message dialog</summary>
            <remarks>Depending on the operational platform, positions of buttons meaning Yes and No differ. The natural layout of the operational platform can be obtained by this property.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.DisplayDpiX">
            <summary>Number of dots per inch of the display (X axis direction)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Environment.SystemParameters.DisplayDpiY">
            <summary>Number of dots per inch of the display (Y axis direction)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.FrameBuffer">
            <summary>Class representing the frame buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.#ctor">
            <summary>Creates a frame buffer</summary>
            <remarks>Creates a frame buffer. Use after setting the color and depth storage destinations.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.#ctor(Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>Creates a default frame buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.#ctor(Sce.PlayStation.Core.Graphics.FrameBuffer)">
            <summary>Creates a copy of the frame buffer</summary>
            <returns>Clones the frame buffer</returns>
            <remarks>Creates a copy of the frame buffer. The 2 frame buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.ShallowClone">
            <summary>Creates a copy of the frame buffer</summary>
            <returns>Copy of the frame buffer</returns>
            <remarks>Creates a copy of the frame buffer. The 2 frame buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.Finalize">
            <summary>Deletes the frame buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.Dispose">
            <summary>Frees the unmanaged resources of the frame buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.GetColorTarget">
            <summary>Obtains the color storage destination</summary>
            <returns>Structure representing the color storage destination</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetColorTarget(Sce.PlayStation.Core.Graphics.RenderTarget)">
            <summary>Sets the color storage destination</summary>
            <param name="target">Structure representing the color storage destination</param>
            <remarks>Sets the color storage destination with the structure. When setting the texture to a storage destination, the texture must be created by specifying the Renderable option.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetColorTarget(Sce.PlayStation.Core.Graphics.ColorBuffer)">
            <summary>Sets the color storage destination (for the color buffer)</summary>
            <param name="buffer">Color buffer (release when NULL)</param>
            <remarks>Sets the color buffer to the color storage destination.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetColorTarget(Sce.PlayStation.Core.Graphics.Texture2D,System.Int32)">
            <summary>Sets the color storage destination (for the 2D textures)</summary>
            <param name="texture">2D texture (release when NULL)</param>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <remarks>Sets the 2D textures to the color storage destination. The texture must be created by specifying the Renderable option.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetColorTarget(Sce.PlayStation.Core.Graphics.TextureCube,System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace)">
            <summary>Sets the color storage destination (for the cube textures)</summary>
            <param name="texture">Cube texture (release when NULL)</param>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="cubeFace">Cube surface</param>
            <remarks>Sets the cube textures to the color storage destination. The texture must be created by specifying the Renderable option.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.GetDepthTarget">
            <summary>Obtains the depth storage destination</summary>
            <returns>Structure representing the depth storage destination</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetDepthTarget(Sce.PlayStation.Core.Graphics.RenderTarget)">
            <summary>Sets the depth storage destination</summary>
            <param name="target">Structure representing the depth storage destination</param>
            <remarks>Sets the depth storage destination with the structure.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.FrameBuffer.SetDepthTarget(Sce.PlayStation.Core.Graphics.DepthBuffer)">
            <summary>Sets the depth storage destination (for the depth buffer)</summary>
            <param name="buffer">Depth buffer (release when NULL)</param>
            <remarks>Sets the depth buffer to the depth storage destination.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.Status">
            <summary>Frame buffer state (true if rendering is enabled)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.Width">
            <summary>Frame buffer width</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.Height">
            <summary>Frame buffer height</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.AspectRatio">
            <summary>Frame buffer aspect ratio (width/height)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.Rectangle">
            <summary>Frame buffer entire size rectangle (0,0,width,height)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.ColorFormat">
            <summary>Frame buffer color format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.DepthFormat">
            <summary>Frame buffer depth format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.FrameBuffer.MultiSampleMode">
            <summary>Frame buffer multi-sample mode</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.RenderTarget">
            <summary>Structure representing the rendering result storage destination</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.#ctor(Sce.PlayStation.Core.Graphics.ColorBuffer)">
            <summary>Creates a structure representing the rendering result storage destination</summary>
            <param name="buffer">Color buffer (release when NULL)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.#ctor(Sce.PlayStation.Core.Graphics.DepthBuffer)">
            <summary>Creates a structure representing the rendering result storage destination</summary>
            <param name="buffer">Depth buffer (release when NULL)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,System.Int32)">
            <summary>Creates a structure representing the rendering result storage destination</summary>
            <param name="texture">2D texture (release when NULL)</param>
            <param name="level">Texture mipmap level (from 0 to LevelCount-1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.#ctor(Sce.PlayStation.Core.Graphics.TextureCube,System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace)">
            <summary>Creates a structure representing the rendering result storage destination</summary>
            <param name="texture">Cube texture (release when NULL)</param>
            <param name="level">Texture mipmap level (from 0 to LevelCount-1)</param>
            <param name="cubeFace">Cube texture cube surface</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.Set(Sce.PlayStation.Core.Graphics.ColorBuffer)">
            <summary>Sets a value to the structure representing the rendering result storage destination</summary>
            <param name="buffer">Color buffer (release when NULL)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.Set(Sce.PlayStation.Core.Graphics.DepthBuffer)">
            <summary>Sets a value to the structure representing the rendering result storage destination</summary>
            <param name="buffer">Depth buffer (release when NULL)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.Set(Sce.PlayStation.Core.Graphics.Texture2D,System.Int32)">
            <summary>Sets a value to the structure representing the rendering result storage destination</summary>
            <param name="texture">2D texture (release when NULL)</param>
            <param name="level">Texture mipmap level (from 0 to LevelCount-1)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.RenderTarget.Set(Sce.PlayStation.Core.Graphics.TextureCube,System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace)">
            <summary>Sets a value to the structure representing the rendering result storage destination</summary>
            <param name="texture">Cube texture (release when NULL)</param>
            <param name="level">Texture mipmap level (from 0 to LevelCount-1)</param>
            <param name="cubeFace">Cube texture cube surface</param>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.RenderTarget.Buffer">
            <summary>Pixel buffer storing the rendering result</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.RenderTarget.Level">
            <summary>Mipmap level of the texture storing the rendering result</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.RenderTarget.CubeFace">
            <summary>Cube surface of cube texture storing the rendering result</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.MultiSampleMode">
            <summary>Multi-sample mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.MultiSampleMode.None">
            <summary>No multi-sample</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.MultiSampleMode.Msaa2x">
            <summary>Multi-sample x2</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.MultiSampleMode.Msaa4x">
            <summary>Multi-sample x4</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.GraphicsContext">
            <summary>Class representing the graphics context</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.#ctor">
            <summary>Creates the graphics context</summary>
            <remarks>Creates the graphics context using standard settings. Note that multiple graphics context cannot be created.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.#ctor(System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.MultiSampleMode)">
            <summary>Creates the graphics context (with screen parameters)</summary>
            <param name="width">Screen width (default if 0)</param>
            <param name="height">Screen height (default if 0)</param>
            <param name="colorFormat">Screen color format (default if PixelFormat.None)</param>
            <param name="depthFormat">Screen depth format (default if PixelFormat.None)</param>
            <param name="multiSampleMode">Screen multisample mode (default if MultiSampleMode.None)</param>
            <remarks>Creates the graphics context using the specified parameters. Rgba, Rgba4444, Rgba5551, or Rgb565 can be specified to the color format. Depth16, Depth24, Depth16Stencil8, or Depth24Stencil8 can be specified to the depth format. Note that multiple graphics context cannot be created.
            <para>When the specified screen size differs from the display resolution of the device, a virtual screen of the specified size is created and the rendered content will be scaled and displayed. The screen's aspect ratio will be maintained and a pillar box or letter box will be displayed as necessary.</para><para>The screen size is restricted to the maximum size or lower. The default value for the maximum size is 1280x800. The maximum size can be specified with PublishingUtility. Correct operation is requested of applications even when the screen size is equivalent to the maximum size.</para><para>If the specified format cannot be used by the device, a separate format close to the specified value will be used.</para></remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Finalize">
            <summary>Deletes the graphics context</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Dispose">
            <summary>Frees unmanaged resources of the graphics context</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SwapBuffers">
            <summary>Updates the screen</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Clear">
            <summary>Clears the frame buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Clear(Sce.PlayStation.Core.Graphics.ClearMask)">
            <summary>Clears the frame buffer (with mask)</summary>
            <param name="mask">Buffer clear mask</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.DrawArrays(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32)">
            <summary>Renders the primitive</summary>
            <param name="mode">Primitive rendering mode</param>
            <param name="first">Starting vertex of the primitive</param>
            <param name="count">Number of vertices in the primitive</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.DrawArrays(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32,System.Int32)">
            <summary>Renders the primitive (for multiple primitives)</summary>
            <param name="mode">Primitive rendering mode</param>
            <param name="first">Starting vertex of the primitive</param>
            <param name="count">Number of vertices in the primitive</param>
            <param name="repeat">Number of primitives</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.DrawArrays(Sce.PlayStation.Core.Graphics.Primitive[])">
            <summary>Renders the primitive (for a primitive array)</summary>
            <param name="primitives">Primitive array</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.DrawArrays(Sce.PlayStation.Core.Graphics.Primitive[],System.Int32,System.Int32)">
            <summary>Renders the primitive (for primitive array, with specified range)</summary>
            <param name="primitives">Primitive array</param>
            <param name="first">Starting number for primitives</param>
            <param name="count">Number of primitives</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.ReadPixels(System.Byte[],Sce.PlayStation.Core.Graphics.PixelFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Reads the pixels of the frame buffer</summary>
            <param name="pixels">Pixel data storing destination</param>
            <param name="format">Pixel format</param>
            <param name="sx">X coordinate of the transfer source</param>
            <param name="sy">Y coordinate of the transfer source</param>
            <param name="sw">Width of the transfer source</param>
            <param name="sh">Height of the transfer source</param>
            <remarks>Copies the pixels of the frame buffer to the specified array. Rgba or the same format as the frame buffer can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.ReadPixels(Sce.PlayStation.Core.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Reads frame buffer pixels (copies to a 2D texture)</summary>
            <param name="texture">2D texture</param>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="dx">X coordinate of the transfer destination</param>
            <param name="dy">Y coordinate of the transfer destination</param>
            <param name="sx">X coordinate of the transfer source</param>
            <param name="sy">Y coordinate of the transfer source</param>
            <param name="sw">Width of the transfer source</param>
            <param name="sh">Height of the transfer source</param>
            <remarks>Copies the frame buffer pixels to the specified 2D texture. The usable texture formats are Rgba, Rgba4444, Rgba5551, and Rgb565. Note that copying cannot be performed from a frame buffer without an alpha component to a texture with an alpha component.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.ReadPixels(Sce.PlayStation.Core.Graphics.TextureCube,System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Reads frame buffer pixels (copies to a cube texture)</summary>
            <param name="texture">Cube texture</param>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="cubeFace">Cube surface</param>
            <param name="dx">X coordinate of the transfer destination</param>
            <param name="dy">Y coordinate of the transfer destination</param>
            <param name="sx">X coordinate of the transfer source</param>
            <param name="sy">Y coordinate of the transfer source</param>
            <param name="sw">Width of the transfer source</param>
            <param name="sh">Height of the transfer source</param>
            <remarks>Copies the frame buffer pixels to the specified cube texture. The usable texture formats are Rgba, Rgba4444, Rgba5551, and Rgb565. Note that copying cannot be performed from a frame buffer without an alpha component to a texture with an alpha component.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetShaderProgram">
            <summary>Obtains the shader program</summary>
            <returns>Shader Program</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetShaderProgram(Sce.PlayStation.Core.Graphics.ShaderProgram)">
            <summary>Sets a shader program</summary>
            <param name="program">Shader program (release when NULL)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetVertexBuffer(System.Int32)">
            <summary>Obtains the vertex buffer</summary>
            <param name="index">Vertex buffer number (0-3)</param>
            <returns>Vertex buffer</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetVertexBuffer(System.Int32,Sce.PlayStation.Core.Graphics.VertexBuffer)">
            <summary>Sets the vertex buffer</summary>
            <param name="index">Vertex buffer number (0-3)</param>
            <param name="buffer">Vertex buffer (release when NULL)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetTexture(System.Int32)">
            <summary>Obtains the texture</summary>
            <param name="index">Texture number (0-7)</param>
            <returns>Textures</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetTexture(System.Int32,Sce.PlayStation.Core.Graphics.Texture)">
            <summary>Sets the texture</summary>
            <param name="index">Texture number (0-7)</param>
            <param name="texture">Texture (release when NULL)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetFrameBuffer">
            <summary>Obtains the frame buffer</summary>
            <returns>FrameBuffer</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetFrameBuffer(Sce.PlayStation.Core.Graphics.FrameBuffer)">
            <summary>Sets the frame buffer</summary>
            <param name="buffer">Frame buffer (release when NULL)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetEnableMode">
            <summary>Obtains the logical OR of the flag that represents whether or not each graphics feature is enabled</summary>
            <returns>Logical OR of the flag that represents whether or not each graphics feature is enabled</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetEnableMode(Sce.PlayStation.Core.Graphics.EnableMode)">
            <summary>Sets the logical OR of the flag that represents whether or not each graphics feature is enabled</summary>
            <returns>Logical OR of the flag that represents whether or not each graphics feature is enabled</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.IsEnabled(Sce.PlayStation.Core.Graphics.EnableMode)">
            <summary>Obtains whether or not the specified graphics feature is enabled</summary>
            <param name="mode">Graphics feature to enable or disable</param>
            <returns>Specify true to enable</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Enable(Sce.PlayStation.Core.Graphics.EnableMode,System.Boolean)">
            <summary>Enables or disables the specified graphics feature</summary>
            <param name="mode">Graphics feature to enable or disable</param>
            <param name="status">Specify true to enable</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Enable(Sce.PlayStation.Core.Graphics.EnableMode)">
            <summary>Enables the specified graphics feature</summary>
            <param name="mode">Graphics feature to enable or disable</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.Disable(Sce.PlayStation.Core.Graphics.EnableMode)">
            <summary>Disables the specified graphics feature</summary>
            <param name="mode">Graphics feature to enable or disable</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetScissor">
            <summary>Obtains the rectangle for the scissor test</summary>
            <returns>Rectangle for the scissor test</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetScissor(Sce.PlayStation.Core.Imaging.ImageRect)">
            <summary>Sets the rectangle for the scissor test</summary>
            <param name="rectangle">Rectangle for the scissor test</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the rectangle for the scissor test</summary>
            <param name="x">Minimum value for the X coordinate of the rectangle for the scissor test</param>
            <param name="y">Minimum value for the Y coordinate of the rectangle for the scissor test</param>
            <param name="w">Width of the rectangle for the scissor test</param>
            <param name="h">Height of the rectangle for the scissor test</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetViewport">
            <summary>Obtains the rectangle of the viewport</summary>
            <returns>Viewport rectangle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetViewport(Sce.PlayStation.Core.Imaging.ImageRect)">
            <summary>Sets the rectangle of the viewport</summary>
            <param name="rectangle">Viewport rectangle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the rectangle of the viewport</summary>
            <param name="x">Minimum value for the X coordinate of the rectangle for the viewport</param>
            <param name="y">Minimum value for the Y coordinate of the rectangle for the viewport</param>
            <param name="w">Width of the viewport rectangle</param>
            <param name="h">Height of the viewport rectangle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetDepthRange">
            <summary>Obtains the range for the depth value</summary>
            <returns>Depth value range</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetDepthRange(Sce.PlayStation.Core.Vector2)">
            <summary>Sets the range for the depth value</summary>
            <param name="range">Depth value range</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetDepthRange(System.Single,System.Single)">
            <summary>Sets the range for the depth value</summary>
            <param name="min">Minimum value for the depth value (0.0f-1.0f)</param>
            <param name="max">Maximum value for the depth value (0.0f-1.0f)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetClearColor">
            <summary>Obtains the color to be used for clearing the frame buffer</summary>
            <returns>Color</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearColor(Sce.PlayStation.Core.Vector4)">
            <summary>Sets the color to be used for clearing the frame buffer</summary>
            <param name="color">Color</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Sets the color to be used for clearing the frame buffer</summary>
            <param name="r">Color R value (0.0f-1.0f)</param>
            <param name="g">Color G value (0.0f-1.0f)</param>
            <param name="b">Color B value (0.0f-1.0f)</param>
            <param name="a">Color A value (0.0f-1.0f)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the color to be used for clearing the frame buffer</summary>
            <param name="r">Color R value (0-255)</param>
            <param name="g">Color G value (0-255)</param>
            <param name="b">Color B value (0-255)</param>
            <param name="a">Color A value (0-255)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetClearDepth">
            <summary>Obtains the depth value to be used for clearing the frame buffer</summary>
            <returns>Depth value (0.0f-1.0f)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearDepth(System.Single)">
            <summary>Sets the depth value to be used for clearing the frame buffer</summary>
            <param name="depth">Depth value (0.0f-1.0f)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetClearStencil">
            <summary>Obtains the stencil value to be used for clearing the frame buffer</summary>
            <returns>Stencil value (0-255)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetClearStencil(System.Int32)">
            <summary>Sets the stencil value to be used for clearing the frame buffer</summary>
            <param name="stencil">Stencil value (0-255)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetCullFace">
            <summary>Obtains back-face culling</summary>
            <returns>Structure representing back-face culling</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetCullFace(Sce.PlayStation.Core.Graphics.CullFace)">
            <summary>Sets back-face culling</summary>
            <param name="face">Structure representing back-face culling</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetCullFace(Sce.PlayStation.Core.Graphics.CullFaceMode,Sce.PlayStation.Core.Graphics.CullFaceDirection)">
            <summary>Sets back-face culling</summary>
            <param name="mode">Back-face culling mode</param>
            <param name="direction">Front direction for back-face culling</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetBlendFunc">
            <summary>Obtains the alpha-blending function</summary>
            <returns>Structure representing the alpha-blending function</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFunc(Sce.PlayStation.Core.Graphics.BlendFunc)">
            <summary>Sets the alpha-blending function</summary>
            <param name="func">Structure representing the alpha-blending function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFunc(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>Sets the alpha-blending function</summary>
            <param name="mode">Alpha-blending function mode</param>
            <param name="srcFactor">Alpha-blending function source coefficient</param>
            <param name="dstFactor">Alpha-blending function destination coefficient</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetBlendFuncRgb">
            <summary>Obtains the alpha-blending function (for the RGB channel)</summary>
            <returns>Structure representing the alpha-blending function</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFuncRgb(Sce.PlayStation.Core.Graphics.BlendFunc)">
            <summary>Sets the alpha-blending function (for the RGB channel)</summary>
            <param name="func">Structure representing the alpha-blending function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFuncRgb(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>Sets the alpha-blending function (for the RGB channel)</summary>
            <param name="mode">Alpha-blending function mode</param>
            <param name="srcFactor">Alpha-blending function source coefficient</param>
            <param name="dstFactor">Alpha-blending function destination coefficient</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetBlendFuncAlpha">
            <summary>Obtains the alpha-blending function (for the alpha channel)</summary>
            <returns>Structure representing the alpha-blending function</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFuncAlpha(Sce.PlayStation.Core.Graphics.BlendFunc)">
            <summary>Sets the alpha-blending function (for the alpha channel)</summary>
            <param name="func">Structure representing the alpha-blending function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetBlendFuncAlpha(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>Sets the alpha-blending function (for the alpha channel)</summary>
            <param name="mode">Alpha-blending function mode</param>
            <param name="srcFactor">Alpha-blending function source coefficient</param>
            <param name="dstFactor">Alpha-blending function destination coefficient</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetDepthFunc">
            <summary>Obtains the depth test function</summary>
            <returns>Structure representing the depth test function</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetDepthFunc(Sce.PlayStation.Core.Graphics.DepthFunc)">
            <summary>Sets the depth test function</summary>
            <param name="func">Structure representing the depth test function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetDepthFunc(Sce.PlayStation.Core.Graphics.DepthFuncMode,System.Boolean)">
            <summary>Sets the depth test function</summary>
            <param name="mode">Depth test function mode</param>
            <param name="writeMask">Depth test function write mask</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetPolygonOffset">
            <summary>Obtains the polygon offset</summary>
            <returns>Structure representing the polygon offset</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetPolygonOffset(Sce.PlayStation.Core.Graphics.PolygonOffset)">
            <summary>Sets the polygon offset</summary>
            <param name="offset">Structure representing the polygon offset</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetPolygonOffset(System.Single,System.Single)">
            <summary>Sets the polygon offset</summary>
            <param name="factor">Polygon offset scaling coefficient</param>
            <param name="units">Polygon offset offset coefficient</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilFunc">
            <summary>Obtains the stencil test function</summary>
            <returns>Structure representing the stencil test function</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFunc(Sce.PlayStation.Core.Graphics.StencilFunc)">
            <summary>Sets the stencil test function</summary>
            <param name="func">Structure representing the stencil test function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFunc(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the stencil test function</summary>
            <param name="mode">Stencil test function mode</param>
            <param name="reference">Reference value (0-255) of the stencil test function</param>
            <param name="readMask">Read mask (0-255) of the stencil test function</param>
            <param name="writeMask">Write mask (0-255) of the stencil test function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilOp">
            <summary>Obtains the stencil test operation</summary>
            <returns>Structure representing the stencil test operation</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOp(Sce.PlayStation.Core.Graphics.StencilOp)">
            <summary>Sets the stencil test operation</summary>
            <param name="op">Structure representing the stencil test operation</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOp(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>Sets the stencil test operation</summary>
            <param name="fail">Stencil failure mode of the stencil test operation</param>
            <param name="zFail">Depth failure mode of the stencil test operation</param>
            <param name="zPass">Depth passing mode of the stencil test operation</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilFuncFront">
            <summary>Obtains the stencil test function (for the front surface)</summary>
            <returns>Structure representing the stencil test function</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFuncFront(Sce.PlayStation.Core.Graphics.StencilFunc)">
            <summary>Sets the stencil test function (for the front surface)</summary>
            <param name="func">Structure representing the stencil test function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFuncFront(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the stencil test function (for the front surface)</summary>
            <param name="mode">Stencil test function mode</param>
            <param name="reference">Reference value (0-255) of the stencil test function</param>
            <param name="readMask">Read mask (0-255) of the stencil test function</param>
            <param name="writeMask">Write mask (0-255) of the stencil test function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilOpFront">
            <summary>Obtains the stencil test operation (for the front surface)</summary>
            <returns>Structure representing the stencil test operation</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOpFront(Sce.PlayStation.Core.Graphics.StencilOp)">
            <summary>Sets the stencil test operation (for the front surface)</summary>
            <param name="op">Structure representing the stencil test operation</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOpFront(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>Sets the stencil test operation (for the front surface)</summary>
            <param name="fail">Stencil failure mode of the stencil test operation</param>
            <param name="zFail">Depth failure mode of the stencil test operation</param>
            <param name="zPass">Depth passing mode of the stencil test operation</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilFuncBack">
            <summary>Obtains the stencil test function (for the back surface)</summary>
            <returns>Structure representing the stencil test function</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFuncBack(Sce.PlayStation.Core.Graphics.StencilFunc)">
            <summary>Sets the stencil test function (for the back surface)</summary>
            <param name="func">Structure representing the stencil test function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilFuncBack(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the stencil test function (for the back surface)</summary>
            <param name="mode">Stencil test function mode</param>
            <param name="reference">Reference value (0-255) of the stencil test function</param>
            <param name="readMask">Read mask (0-255) of the stencil test function</param>
            <param name="writeMask">Write mask (0-255) of the stencil test function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetStencilOpBack">
            <summary>Obtains the stencil test operation (for the back surface)</summary>
            <returns>Structure representing the stencil test operation</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOpBack(Sce.PlayStation.Core.Graphics.StencilOp)">
            <summary>Sets the stencil test operation (for the back surface)</summary>
            <param name="op">Structure representing the stencil test operation</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetStencilOpBack(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>Sets the stencil test operation (for the back surface)</summary>
            <param name="fail">Stencil failure mode of the stencil test operation</param>
            <param name="zFail">Depth failure mode of the stencil test operation</param>
            <param name="zPass">Depth passing mode of the stencil test operation</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetColorMask">
            <summary>Obtains the color write mask</summary>
            <returns>Color write mask</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetColorMask(Sce.PlayStation.Core.Graphics.ColorMask)">
            <summary>Sets the color write mask</summary>
            <param name="mask">Color write mask</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.GetLineWidth">
            <summary>Obtains the line width</summary>
            <returns>Line width</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.GraphicsContext.SetLineWidth(System.Single)">
            <summary>Sets the line width</summary>
            <param name="width">Line width</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsContext.ScreenSizes">
            <summary>Array of the screen size that can be specified upon initialization</summary>
            <remarks>This is used to determine the screen size to be specified when creating the graphics context. This is a static property, and it can be used even before creating the graphics context.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsContext.Screen">
            <summary>Frame buffer representing the default screen</summary>
            <remarks>This is used to set the default screen to the frame buffer and obtain the screen size and pixel format. This frame buffer is read-only, and the color target and depth target cannot be changed.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsContext.Caps">
            <summary>Class representing the graphics capacity</summary>
            <remarks>This is used to obtain the allowable range of the parameters and supported extensions.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ClearMask">
            <summary>Buffer clear mask</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.Color">
            <summary>Color buffer</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.Depth">
            <summary>Depth buffer</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.Stencil">
            <summary>Stencil buffer</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ClearMask.All">
            <summary>All buffers</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.DrawMode">
            <summary>Primitive rendering mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.Points">
            <summary>Point list</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.Lines">
            <summary>Line list</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.LineStrip">
            <summary>Line strip</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.Triangles">
            <summary>Triangle list</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.TriangleStrip">
            <summary>Triangle strip</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DrawMode.TriangleFan">
            <summary>Triangle fan</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.EnableMode">
            <summary>Graphics feature to enable or disable</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.ScissorTest">
            <summary>Scissor test</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.CullFace">
            <summary>Back-face culling</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.Blend">
            <summary>Alpha-blending</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.DepthTest">
            <summary>Depth test</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.PolygonOffsetFill">
            <summary>Polygon offset</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.StencilTest">
            <summary>Stencil test</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.Dither">
            <summary>Dithering</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.EnableMode.All">
            <summary>All features</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.CullFaceMode">
            <summary>Back-face culling mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceMode.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceMode.Front">
            <summary>Front surface</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceMode.Back">
            <summary>Back surface</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceMode.FrontAndBack">
            <summary>Both front and back surfaces</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.CullFaceDirection">
            <summary>Front direction for back-face culling</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceDirection.Cw">
            <summary>Clock-wise</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.CullFaceDirection.Ccw">
            <summary>Counter clock-wise</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.BlendFuncMode">
            <summary>Alpha-blending function mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncMode.Add">
            <summary>Sc*Sf+Dc*Df</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncMode.Subtract">
            <summary>Sc*Sf-Dc*Df</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncMode.ReverseSubtract">
            <summary>Dc*Df-Sc*Sf</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.BlendFuncFactor">
            <summary>Alpha-blending function coefficient</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.Zero">
            <summary>( 0, 0, 0, 0 )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.One">
            <summary>( 1, 1, 1, 1 )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.SrcColor">
            <summary>( Rs, Gs, Bs, As )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.OneMinusSrcColor">
            <summary>( 1-Rs, 1-Gs, 1-Bs, 1-As )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.SrcAlpha">
            <summary>( As, As, As, As )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.OneMinusSrcAlpha">
            <summary>( 1-As, 1-As, 1-As, 1-As )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.DstColor">
            <summary>( Rd, Gd, Bd, Ad )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.OneMinusDstColor">
            <summary>( 1-Rd, 1-Gd, 1-Bd, 1-Ad )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.DstAlpha">
            <summary>( Ad, Ad, Ad, Ad )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.OneMinusDstAlpha">
            <summary>( 1-Ad, 1-Ad, 1-Ad, 1-Ad )</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.BlendFuncFactor.SrcAlphaSaturate">
            <summary>( min(As,1-Ad), min(As,1-Ad), min(As,1-Ad), 1 )</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.DepthFuncMode">
            <summary>Depth test function mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Always">
            <summary>Always pass</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Never">
            <summary>Always fail</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Equal">
            <summary>Pass if depth value == depth buffer value</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.NotEqual">
            <summary>Pass if depth value != depth buffer value</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Less" -->
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.Greater">
            <summary>Pass if depth value > depth buffer value</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.Core.Graphics.DepthFuncMode.LEqual" -->
        <member name="F:Sce.PlayStation.Core.Graphics.DepthFuncMode.GEqual">
            <summary>Pass if depth value &gt;= depth buffer value</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.StencilFuncMode">
            <summary>Stencil test function mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Always">
            <summary>Always pass</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Never">
            <summary>Always fail</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Equal">
            <summary>Pass if the reference value == stencil buffer value</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.NotEqual">
            <summary>Pass if the reference value != stencil buffer value</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Less" -->
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.Greater">
            <summary>Pass if reference value > stencil buffer value</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.Core.Graphics.StencilFuncMode.LEqual" -->
        <member name="F:Sce.PlayStation.Core.Graphics.StencilFuncMode.GEqual">
            <summary>Pass if reference value &gt;= stencil buffer value</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.StencilOpMode">
            <summary>Stencil test operation mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Keep">
            <summary>Keeps the stencil buffer value</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Zero">
            <summary>Sets the stencil buffer value to 0</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Replace">
            <summary>Sets the stencil buffer value to the reference value</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Invert">
            <summary>Flips the stencil buffer value per bit</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Incr">
            <summary>Increments the stencil buffer value (clamped)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.Decr">
            <summary>Decrements the stencil buffer value (clamped)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.IncrWrap">
            <summary>Increments the stencil buffer value (not clamped)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.StencilOpMode.DecrWrap">
            <summary>Decrements the stencil buffer value (not clamped)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ColorMask">
            <summary>Color write mask</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.R">
            <summary>R element</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.G">
            <summary>G element</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.B">
            <summary>B element</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.A">
            <summary>A element</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.Rgb">
            <summary>RGB elements</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ColorMask.Rgba">
            <summary>RGBA elements</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.Primitive">
            <summary>Structure representing the primitive</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Primitive.#ctor(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32,System.Int32)">
            <summary>Creates the structure representing the primitive</summary>
            <param name="mode">Primitive rendering mode</param>
            <param name="first">Starting vertex of the primitive</param>
            <param name="count">Number of vertices in the primitive</param>
            <param name="userData">User data</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Primitive.Set(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the structure representing the primitive</summary>
            <param name="mode">Primitive rendering mode</param>
            <param name="first">Starting vertex of the primitive</param>
            <param name="count">Number of vertices in the primitive</param>
            <param name="userData">User data</param>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.Primitive.Mode">
            <summary>Primitive rendering mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.Primitive.First">
            <summary>Starting vertex of the primitive</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.Primitive.Count">
            <summary>Number of vertices in the primitive</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.Primitive.UserData">
            <summary>User data</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.CullFace">
            <summary>Structure representing back-face culling</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.CullFace.#ctor(Sce.PlayStation.Core.Graphics.CullFaceMode,Sce.PlayStation.Core.Graphics.CullFaceDirection)">
            <summary>Creates the structure representing back-face culling</summary>
            <param name="mode">Back-face culling mode</param>
            <param name="direction">Front direction for back-face culling</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.CullFace.Set(Sce.PlayStation.Core.Graphics.CullFaceMode,Sce.PlayStation.Core.Graphics.CullFaceDirection)">
            <summary>Sets the structure representing back-face culling</summary>
            <param name="mode">Back-face culling mode</param>
            <param name="direction">Front direction for back-face culling</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.CullFace.Mode">
            <summary>Back-face culling mode</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.CullFace.Direction">
            <summary>Front direction for back-face culling</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.BlendFunc">
            <summary>Structure representing the alpha-blending function</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.BlendFunc.#ctor(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>Creates the structure representing the alpha-blending function</summary>
            <param name="mode">Alpha-blending function mode</param>
            <param name="srcFactor">Alpha-blending function source coefficient</param>
            <param name="dstFactor">Alpha-blending function destination coefficient</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.BlendFunc.Set(Sce.PlayStation.Core.Graphics.BlendFuncMode,Sce.PlayStation.Core.Graphics.BlendFuncFactor,Sce.PlayStation.Core.Graphics.BlendFuncFactor)">
            <summary>Sets a value to the the structure representing the alpha-blending function</summary>
            <param name="mode">Alpha-blending function mode</param>
            <param name="srcFactor">Alpha-blending function source coefficient</param>
            <param name="dstFactor">Alpha-blending function destination coefficient</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.BlendFunc.Mode">
            <summary>Alpha-blending function mode</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.BlendFunc.SrcFactor">
            <summary>Alpha-blending function source coefficient</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.BlendFunc.DstFactor">
            <summary>Alpha-blending function destination coefficient</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.DepthFunc">
            <summary>Structure representing the depth test function</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthFunc.#ctor(Sce.PlayStation.Core.Graphics.DepthFuncMode,System.Boolean)">
            <summary>Creates the structure representing the depth test function</summary>
            <param name="mode">Depth test function mode</param>
            <param name="writeMask">Depth test function write mask</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthFunc.Set(Sce.PlayStation.Core.Graphics.DepthFuncMode,System.Boolean)">
            <summary>Sets a value to the structure representing the depth test function</summary>
            <param name="mode">Depth test function mode</param>
            <param name="writeMask">Depth test function write mask</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.DepthFunc.Mode">
            <summary>Depth test function mode</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.DepthFunc.WriteMask">
            <summary>Depth test function write mask</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PolygonOffset">
            <summary>Structure representing the polygon offset</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PolygonOffset.#ctor(System.Single,System.Single)">
            <summary>Creates the structure representing the polygon offset</summary>
            <param name="factor">Polygon offset scaling coefficient</param>
            <param name="units">Polygon offset offset coefficient</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PolygonOffset.Set(System.Single,System.Single)">
            <summary>Sets a value to the structure representing the polygon offset</summary>
            <param name="factor">Polygon offset scaling coefficient</param>
            <param name="units">Polygon offset offset coefficient</param>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PolygonOffset.Factor">
            <summary>Polygon offset scaling coefficient</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PolygonOffset.Units">
            <summary>Polygon offset offset coefficient</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.StencilFunc">
            <summary>Structure representing the stencil test function</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.StencilFunc.#ctor(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>Creates the structure representing the stencil test function</summary>
            <param name="mode">Stencil test function mode</param>
            <param name="reference">Reference value (0-255) of the stencil test function</param>
            <param name="readMask">Read mask (0-255) of the stencil test function</param>
            <param name="writeMask">Write mask (0-255) of the stencil test function</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.StencilFunc.Set(Sce.PlayStation.Core.Graphics.StencilFuncMode,System.Int32,System.Int32,System.Int32)">
            <summary>Sets a value to the structure representing the stencil test function</summary>
            <param name="mode">Stencil test function mode</param>
            <param name="reference">Reference value (0-255) of the stencil test function</param>
            <param name="readMask">Read mask (0-255) of the stencil test function</param>
            <param name="writeMask">Write mask (0-255) of the stencil test function</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilFunc.Mode">
            <summary>Stencil test function mode</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilFunc.Reference">
            <summary>Reference value (0-255) of the stencil test function</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilFunc.ReadMask">
            <summary>Read mask (0-255) of the stencil test function</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilFunc.WriteMask">
            <summary>Write mask (0-255) of the stencil test function</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.StencilOp">
            <summary>Structure representing the stencil test operation</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.StencilOp.#ctor(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>Creates the structure representing the stencil test operation</summary>
            <param name="fail">Stencil failure mode of the stencil test operation</param>
            <param name="zFail">Depth failure mode of the stencil test operation</param>
            <param name="zPass">Depth passing mode of the stencil test operation</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.StencilOp.Set(Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode,Sce.PlayStation.Core.Graphics.StencilOpMode)">
            <summary>Sets a value to the structure representing the stencil test operation</summary>
            <param name="fail">Stencil failure mode of the stencil test operation</param>
            <param name="zFail">Depth failure mode of the stencil test operation</param>
            <param name="zPass">Depth passing mode of the stencil test operation</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilOp.Fail">
            <summary>Stencil failure mode of the stencil test operation</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilOp.ZFail">
            <summary>Depth failure mode of the stencil test operation</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.StencilOp.ZPass">
            <summary>Depth passing mode of the stencil test operation</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.GraphicsCaps">
            <summary>Class representing the graphics capacity</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxViewportWidth">
            <summary>Viewport maximum width</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxViewportHeight">
            <summary>Viewport maximum height</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxTextureSize">
            <summary>Texture maximum width and height</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxCubeMapTextureSize">
            <summary>Cube texture maximum width and height</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxRenderbufferSize">
            <summary>Render buffer maximum width and height</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxVertexUniformVectors">
            <summary>Maximum number of vectors for the uniform variable of the vertex shader</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxFragmentUniformVectors">
            <summary>Maximum number of vectors for the uniform variable of the fragment shader</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxVertexAttribs">
            <summary>Maximum number of vectors for the vertex attribute</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxVaryingVectors">
            <summary>Maximum number of vectors for the varying variable</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxTextureImageUnits">
            <summary>Maximum number of texture units for the fragment shader</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxTextureMaxAnisotropy">
            <summary>Maximum number of anisotropies for the texture filter</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MinAliasedLineWidth">
            <summary>Line maximum width</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxAliasedLineWidth">
            <summary>Line maximum height</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MinAliasedPointSize">
            <summary>Point minimum size</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.MaxAliasedPointSize">
            <summary>Point maximum size</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportTextureFilterAnisotropic">
            <summary>Enables the application of anisotropic filtering to the texture</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportVertexHalfFloat">
            <summary>Enables the creation of a vertex buffer of the half float format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportTextureHalfFloat">
            <summary>Enables the creation of a texture of the half float format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportTextureHalfFloatLinear">
            <summary>Enables the application of the linear mode to texture filtering to a texture of the half float format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportRgb8Rgba8">
            <summary>Enables the creation of a color buffer of the RGBA 8-bit format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportDepth24">
            <summary>Enables the creation of a depth buffer of the depth 24-bit format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.GraphicsCaps.SupportPackedDepthStencil">
            <summary>Enables the creation of a depth buffer of the stencil 24-bit+8-bit format</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PixelBuffer">
            <summary>Base class representing the pixel buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.#ctor(Sce.PlayStation.Core.Graphics.PixelBufferType,System.Int32,System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelBufferOption,Sce.PlayStation.Core.Graphics.InternalOption)">
            <summary>Creates the pixel buffer</summary>
            <param name="type">Pixel buffer type</param>
            <param name="width">Pixel buffer width</param>
            <param name="height">Pixel buffer height</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <param name="option">Pixel buffer creation option</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.#ctor">
            <summary>Creates the pixel buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.#ctor(Sce.PlayStation.Core.Graphics.PixelBuffer)">
            <summary>Creates a copy of the pixel buffer</summary>
            <param name="buffer">Pixel buffer</param>
            <remarks>Creates a copy of the pixel buffer. The 2 pixel buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.ShallowClone">
            <summary>Creates a copy of the pixel buffer</summary>
            <returns>Clones the pixel buffer</returns>
            <remarks>Creates a copy of the pixel buffer. The 2 pixel buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.Finalize">
            <summary>Deletes the pixel buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.Dispose">
            <summary>Frees the unmanaged resources of the pixel buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.GetMipmapWidth(System.Int32)">
            <summary>Obtains the width of the specified mipmap level</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <returns>Width of the specified mipmap level</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.PixelBuffer.GetMipmapHeight(System.Int32)">
            <summary>Obtains the height of the specified mipmap level</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <returns>Height of the specified mipmap level</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Type">
            <summary>Pixel buffer type</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Option">
            <summary>Pixel buffer creation option</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Format">
            <summary>Pixel format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Width">
            <summary>Pixel buffer width</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.Height">
            <summary>Pixel buffer height</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.LevelCount">
            <summary>Number of mipmap levels</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.IsRenderable">
            <summary>true if rendering is enabled</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.PixelBuffer.IsPowerOfTwo">
            <summary>true if the width and height are a power of 2</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.Texture">
            <summary>Base class representing a texture</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.#ctor(Sce.PlayStation.Core.Graphics.PixelBufferType,System.Int32,System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelBufferOption,Sce.PlayStation.Core.Graphics.InternalOption)">
            <summary>Creates a texture</summary>
            <param name="type">Texture type</param>
            <param name="width">Texture width</param>
            <param name="height">Texture height</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <param name="option">Pixel buffer creation option</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.#ctor(Sce.PlayStation.Core.Graphics.PixelBufferType,System.String,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a texture (from a file)</summary>
            <param name="type">Pixel buffer type</param>
            <param name="fileName">Filename</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.#ctor(Sce.PlayStation.Core.Graphics.PixelBufferType,System.Byte[],System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a texture (from a file image)</summary>
            <param name="type">Pixel buffer type</param>
            <param name="fileImage">File image</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.#ctor(Sce.PlayStation.Core.Graphics.Texture)">
            <summary>Creates a copy of the texture</summary>
            <param name="texture">Textures</param>
            <remarks>Creates a copy of the texture. The 2 textures will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.ShallowClone">
            <summary>Creates a copy of the texture</summary>
            <returns>Clones the texture</returns>
            <remarks>Creates a copy of the texture. The 2 textures will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.GetFilter">
            <summary>Obtains the texture filter</summary>
            <returns>Structure representing the texture filter</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetFilter(Sce.PlayStation.Core.Graphics.TextureFilter)">
            <summary>Sets the texture filter</summary>
            <param name="filter">Structure representing the texture filter</param>
            <remarks>Sets the texture filter. If the device is not supported, note that the linear filter of the half float texture will not function.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetFilter(Sce.PlayStation.Core.Graphics.TextureFilterMode)">
            <summary>Sets the texture filter</summary>
            <param name="mode">Texture filter mode</param>
            <remarks>Sets the texture filter. If the device is not supported, note that the linear filter of the half float texture will not function.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetFilter(Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode)">
            <summary>Sets the texture filter</summary>
            <param name="mag">Enlarged texture filter mode</param>
            <param name="min">Reduced texture filter mode</param>
            <param name="mip">Mipmap texture filter mode</param>
            <remarks>Sets the texture filter. If the device is not supported, note that the linear filter of the half float texture will not function.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.GetWrap">
            <summary>Obtains the texture wrap</summary>
            <returns>Structure representing the texture wrap</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetWrap(Sce.PlayStation.Core.Graphics.TextureWrap)">
            <summary>Sets the texture wrap</summary>
            <param name="wrap">Structure representing the texture wrap</param>
            <remarks>Sets the texture wrap. Note that textures that are not a power of 2 will always operate in clamp mode.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetWrap(Sce.PlayStation.Core.Graphics.TextureWrapMode)">
            <summary>Sets the texture wrap</summary>
            <param name="mode">Texture wrap mode</param>
            <remarks>Sets the texture wrap. Note that textures that are not a power of 2 will always operate in clamp mode.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetWrap(Sce.PlayStation.Core.Graphics.TextureWrapMode,Sce.PlayStation.Core.Graphics.TextureWrapMode)">
            <summary>Sets the texture wrap</summary>
            <param name="s">S coordinate texture wrap mode</param>
            <param name="t">T coordinate texture wrap mode</param>
            <remarks>Sets the texture wrap. Note that textures that are not a power of 2 will always operate in clamp mode.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.GetMaxAnisotropy">
            <summary>Obtains the maximum value of the anisotropic filter</summary>
            <returns>Maximum value of the anisotropic filter (from 1.0f)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture.SetMaxAnisotropy(System.Single)">
            <summary>Sets the maximum value of the anisotropic filter</summary>
            <param name="anisotropy">Maximum value of the anisotropic filter (from 1.0f)</param>
            <remarks>Sets the maximum value of the anisotropic filter. If the device is not supported, note that the anisotropic filter will not function.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.Texture2D">
            <summary>Class representing a 2D texture</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.Int32,System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a 2D texture</summary>
            <param name="width">Texture width</param>
            <param name="height">Texture height</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <remarks>Creates the 2D texture using the specified parameters. Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, or AlphaH can be specified to the pixel format. If the device is not supported, note that mipmaps for textures that are not a power of 2 will not be created.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.Int32,System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelBufferOption)">
            <summary>Creates a 2D texture (with options)</summary>
            <param name="width">Texture width</param>
            <param name="height">Texture height</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <param name="option">Pixel buffer creation option</param>
            <remarks>Creates the 2D texture using the specified parameters. Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, or AlphaH can be specified to the pixel format. However, if the Renderable option is specified, only Rgba, Rgba4444, Rgba5551, or Rgb565 can be specified. If the device is not supported, note that mipmaps for textures that are not a power of 2 will not be created.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.String,System.Boolean)">
            <summary>Creates a 2D texture (from a file)</summary>
            <param name="fileName">Filename</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <remarks>Creates a 2D texture from a specified file. The usable file formats are PNG, JPG, BMP, and GIF (however, animated GIFs are not supported). If the device is not supported, note that mipmaps for textures that are not a power of 2 will not be created.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.String,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a 2D texture (from a file, with format conversion)</summary>
            <param name="fileName">Filename</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <remarks>Creates a 2D texture from a specified file. The usable file formats are PNG, JPG, BMP, and GIF (however, animated GIFs are not supported). Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, or AlphaH can be specified to the pixel format. If the device is not supported, note that mipmaps for textures that are not a power of 2 will not be created.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.Byte[],System.Boolean)">
            <summary>Creates a 2D texture (from a file image)</summary>
            <param name="fileImage">File image</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <remarks>Creates a 2D texture from a specified file image. The usable file formats are PNG, JPG, BMP, and GIF (however, animated GIFs are not supported). If the device is not supported, note that mipmaps for textures that are not a power of 2 will not be created.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(System.Byte[],System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a 2D texture (from a file image, with format conversion)</summary>
            <param name="fileImage">File image</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <remarks>Creates a 2D texture from a specified file image. The usable file formats are PNG, JPG, BMP, and GIF (however, animated GIFs are not supported). Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, or AlphaH can be specified to the pixel format. If the device is not supported, note that mipmaps for textures that are not a power of 2 will not be created.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.#ctor(Sce.PlayStation.Core.Graphics.Texture2D)">
            <summary>Creates a copy of a 2D texture</summary>
            <param name="texture">2D texture</param>
            <remarks>Creates a copy of the texture. The 2 2D textures will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.ShallowClone">
            <summary>Creates a copy of a 2D texture</summary>
            <returns>Clones a 2D texture</returns>
            <remarks>Creates a copy of the texture. The 2 2D textures will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array)">
            <summary>Sets pixel data</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="pixels">Pixel data</param>
            <remarks>Sets the pixel data to the specified mipmap level.
            <para>This overload sets data to all pixels of the specified mipmap level. When the size of the array differs from the required size, an exception is thrown. When the array size is bigger than the required size, please use a different overload.</para></remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets pixel data (with range)</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="pixels">Pixel data</param>
            <param name="dx">X coordinate of the transfer destination</param>
            <param name="dy">Y coordinate of the transfer destination</param>
            <param name="dw">Width of the transfer destination</param>
            <param name="dh">Height of the transfer destination</param>
            <remarks>Sets the pixel data to the specified mipmap level.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>Sets pixel data (with byte offset)</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="pixels">Pixel data</param>
            <param name="offset">Byte offset of pixel data</param>
            <param name="pitch">Byte pitch of pixel data</param>
            <remarks>Sets the pixel data to the specified mipmap level.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Sets pixel data (with format conversion)</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="pixels">Pixel data</param>
            <param name="format">Pixel format</param>
            <remarks>Sets the pixel data to the specified mipmap level. Rgba or the same format as the texture can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.SetPixels(System.Int32,System.Array,Sce.PlayStation.Core.Graphics.PixelFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets pixel data (with format conversion, with byte offset, with range)</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="pixels">Pixel data</param>
            <param name="format">Pixel format</param>
            <param name="offset">Byte offset of pixel data</param>
            <param name="pitch">Byte pitch of pixel data</param>
            <param name="dx">X coordinate of the transfer destination</param>
            <param name="dy">Y coordinate of the transfer destination</param>
            <param name="dw">Width of the transfer destination</param>
            <param name="dh">Height of the transfer destination</param>
            <remarks>Sets the pixel data to the specified mipmap level. Rgba or the same format as the texture can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.Texture2D.GenerateMipmap">
            <summary>Automatically creates a mipmap image</summary>
            <remarks>Automatically creates a mipmap image from the current zero level image. Nothing will be performed if mipmaps are not present.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureCube">
            <summary>Class representing a cube texture</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a cube texture</summary>
            <param name="width">Texture width</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <remarks>Creates the cube texture using the specified parameters. The texture width must have a power of 2. Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, or AlphaH can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.Int32,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat,Sce.PlayStation.Core.Graphics.PixelBufferOption)">
            <summary>Creates a cube texture (with options)</summary>
            <param name="width">Texture width</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <param name="option">Pixel buffer creation option</param>
            <remarks>Creates the cube texture using the specified parameters. The texture width must have a power of 2. Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, or AlphaH can be specified to the pixel format. However, if the Renderable option is specified, only Rgba, Rgba4444, Rgba5551, or Rgb565 can be specified.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.String,System.Boolean)">
            <summary>Creates a cube texture (from a file)</summary>
            <param name="fileName">Filename</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <remarks>Creates a cube texture from a specified file. The usable file formats are PNG, JPG, BMP, and GIF (however, animated GIFs are not supported). The short side of the image must be a power of 2, and the long side must be 6 times the short side.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.String,System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a cube texture (from a file, with format conversion)</summary>
            <param name="fileName">Filename</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <remarks>Creates a cube texture from a specified file. The usable file formats are PNG, JPG, BMP, and GIF (however, animated GIFs are not supported). The short side of the image must be a power of 2, and the long side must be 6 times the short side. Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, or AlphaH can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.Byte[],System.Boolean)">
            <summary>Creates a cube texture (from a file image)</summary>
            <param name="fileImage">File image</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <remarks>Creates a cube texture from a specified file image. The usable file formats are PNG, JPG, BMP, and GIF (however, animated GIFs are not supported). The short side of the image must be a power of 2, and the long side must be 6 times the short side.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(System.Byte[],System.Boolean,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a cube texture (from a file image, with format conversion)</summary>
            <param name="fileImage">File image</param>
            <param name="mipmap">Existence/Lack of mipmap</param>
            <param name="format">Pixel format</param>
            <remarks>Creates a cube texture from a specified file image. The usable file formats are PNG, JPG, BMP, and GIF (however, animated GIFs are not supported). The short side of the image must be a power of 2, and the long side must be 6 times the short side. Rgba, Rgba4444, Rgba5551, Rgb565, LuminanceAlpha, Luminance, Alpha, RgbaH, LuminanceAlphaH, LuminanceH, or AlphaH can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.#ctor(Sce.PlayStation.Core.Graphics.TextureCube)">
            <summary>Creates a copy of a cube texture</summary>
            <param name="texture">Cube texture</param>
            <remarks>Creates a copy of a cube texture. The 2 cube textures will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.ShallowClone">
            <summary>Creates a copy of a cube texture</summary>
            <returns>Clones a cube texture</returns>
            <remarks>Creates a copy of a cube texture. The 2 cube textures will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array)">
            <summary>Sets pixel data</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="cubeFace">Cube surface</param>
            <param name="pixels">Pixel data</param>
            <remarks>Sets the pixel data to the cube surface of the specified mipmap level.
            <para>This overload sets data to all pixels of the specified mipmap level's cube surface. When the size of the array differs from the required size, an exception is thrown. When the array size is bigger than the required size, please use a different overload.</para></remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets pixel data (with range)</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="cubeFace">Cube surface</param>
            <param name="pixels">Pixel data</param>
            <param name="dx">X coordinate of the transfer destination</param>
            <param name="dy">Y coordinate of the transfer destination</param>
            <param name="dw">Width of the transfer destination</param>
            <param name="dh">Height of the transfer destination</param>
            <remarks>Sets the pixel data to the cube surface of the specified mipmap level.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array,System.Int32,System.Int32)">
            <summary>Sets pixel data (with byte offset)</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="cubeFace">Cube surface</param>
            <param name="pixels">Pixel data</param>
            <param name="offset">Byte offset of pixel data</param>
            <param name="pitch">Byte pitch of pixel data</param>
            <remarks>Sets the pixel data to the cube surface of the specified mipmap level.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Sets pixel data (with format conversion)</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="cubeFace">Cube surface</param>
            <param name="pixels">Pixel data</param>
            <param name="format">Pixel format</param>
            <remarks>Sets the pixel data to the cube surface of the specified mipmap level. Rgba or the same format as the texture can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.SetPixels(System.Int32,Sce.PlayStation.Core.Graphics.TextureCubeFace,System.Array,Sce.PlayStation.Core.Graphics.PixelFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets pixel data (with format conversion, with byte offset, with range)</summary>
            <param name="level">Mipmap level (0 to LevelCount-1)</param>
            <param name="cubeFace">Cube surface</param>
            <param name="pixels">Pixel data</param>
            <param name="format">Pixel format</param>
            <param name="offset">Byte offset of pixel data</param>
            <param name="pitch">Byte pitch of pixel data</param>
            <param name="dx">X coordinate of the transfer destination</param>
            <param name="dy">Y coordinate of the transfer destination</param>
            <param name="dw">Width of the transfer destination</param>
            <param name="dh">Height of the transfer destination</param>
            <remarks>Sets the pixel data to the cube surface of the specified mipmap level. Rgba or the same format as the texture can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureCube.GenerateMipmap">
            <summary>Automatically creates a mipmap image</summary>
            <remarks>Automatically creates a mipmap image from the current zero level image. Nothing will be performed if mipmaps are not present.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ColorBuffer">
            <summary>Class representing the color buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ColorBuffer.#ctor(System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a color buffer</summary>
            <param name="width">Color buffer width</param>
            <param name="height">Color buffer height</param>
            <param name="format">Pixel format</param>
            <remarks>Creates a color buffer. Rgba, Rgba4444, Rgba5551, or Rgb565 can be specified to the pixel format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ColorBuffer.#ctor(Sce.PlayStation.Core.Graphics.ColorBuffer)">
            <summary>Creates a copy of the color buffer</summary>
            <returns>Clones a color buffer</returns>
            <remarks>Creates a copy of the color buffer. The 2 color buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ColorBuffer.ShallowClone">
            <summary>Creates a copy of the color buffer</summary>
            <returns>Copy of the color buffer</returns>
            <remarks>Creates a copy of the color buffer. The 2 color buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.DepthBuffer">
            <summary>Class representing the depth buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthBuffer.#ctor(System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a depth buffer</summary>
            <param name="width">Depth buffer width</param>
            <param name="height">Depth buffer height</param>
            <param name="format">Pixel format</param>
            <remarks>Creates a depth buffer. Depth16, Depth24, Depth16Stencil8, or Depth24Stencil8 can be specified to the pixel format. If the specified format cannot be used by the device, a separate format close to the specified value will be used.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthBuffer.#ctor(Sce.PlayStation.Core.Graphics.DepthBuffer)">
            <summary>Creates a copy of the depth buffer</summary>
            <returns>Clones the depth buffer</returns>
            <remarks>Creates a copy of the depth buffer. The 2 depth buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.DepthBuffer.ShallowClone">
            <summary>Creates a copy of the depth buffer</summary>
            <returns>The copy of depth buffer</returns>
            <remarks>Creates a copy of the depth buffer. The 2 depth buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PixelBufferType">
            <summary>Pixel buffer type</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.Texture2D">
            <summary>2D texture</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.TextureCube">
            <summary>Cube texture</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.ColorBuffer">
            <summary>Color buffer</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferType.DepthBuffer">
            <summary>Depth buffer</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PixelBufferOption">
            <summary>Pixel buffer creation option</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferOption.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelBufferOption.Renderable">
            <summary>Possible to render</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.PixelFormat">
            <summary>Pixel format</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Rgba">
            <summary>RGBA (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.RgbaH">
            <summary>RGBA (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Rgba4444">
            <summary>RGBA (ushort 4:4:4:4)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Rgba5551">
            <summary>RGBA (ushort 5:5:5:1)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Rgb565">
            <summary>RGB (ushort 5:6:5)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.LuminanceAlpha">
            <summary>Luminance and alpha (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.LuminanceAlphaH">
            <summary>Luminance and alpha (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Luminance">
            <summary>Luminance (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.LuminanceH">
            <summary>Luminance (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Alpha">
            <summary>Alpha (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.AlphaH">
            <summary>Alpha (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Depth16">
            <summary>Depth 16-bit</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Depth24">
            <summary>Depth 24-bit</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Depth16Stencil8">
            <summary>Depth 16-bit stencil 8-bit</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.PixelFormat.Depth24Stencil8">
            <summary>Depth 24-bit stencil 8-bit</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureFilterMode">
            <summary>Texture filter mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureFilterMode.Nearest">
            <summary>Nearest mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureFilterMode.Linear">
            <summary>Linear mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureFilterMode.Disabled">
            <summary>Disabled</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureWrapMode">
            <summary>Texture wrap mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureWrapMode.ClampToEdge">
            <summary>Clamp mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureWrapMode.Repeat">
            <summary>Repeat mode</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureCubeFace">
            <summary>Cube texture surface</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.PositiveX">
            <summary>Positive direction on the X axis</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.NegativeX">
            <summary>Negative direction on the X axis</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.PositiveY">
            <summary>Positive direction on the Y axis</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.NegativeY">
            <summary>Negative direction on the Y axis</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.PositiveZ">
            <summary>Positive direction on the Z axis</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.TextureCubeFace.NegativeZ">
            <summary>Negative direction on the Z axis</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureFilter">
            <summary>Structure representing the texture filter</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureFilter.#ctor(Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode)">
            <summary>Creates the structure representing the texture filter</summary>
            <param name="mag">Enlarged texture filter mode</param>
            <param name="min">Reduced texture filter mode</param>
            <param name="mip">Mipmap texture filter mode</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureFilter.Set(Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode,Sce.PlayStation.Core.Graphics.TextureFilterMode)">
            <summary>Sets a value to the structure representing the texture filter</summary>
            <param name="mag">Enlarged texture filter mode</param>
            <param name="min">Reduced texture filter mode</param>
            <param name="mip">Mipmap texture filter mode</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureFilter.Mag">
            <summary>Enlarged texture filter mode</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureFilter.Min">
            <summary>Reduced texture filter mode</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureFilter.Mip">
            <summary>Mipmap texture filter mode</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.TextureWrap">
            <summary>Structure representing the texture wrap</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureWrap.#ctor(Sce.PlayStation.Core.Graphics.TextureWrapMode,Sce.PlayStation.Core.Graphics.TextureWrapMode)">
            <summary>Creates the structure representing the texture wrap</summary>
            <param name="s">S coordinate texture wrap mode</param>
            <param name="t">T coordinate texture wrap mode</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.TextureWrap.Set(Sce.PlayStation.Core.Graphics.TextureWrapMode,Sce.PlayStation.Core.Graphics.TextureWrapMode)">
            <summary>Sets a value to the structure representing the texture wrap</summary>
            <param name="s">S coordinate texture wrap mode</param>
            <param name="t">T coordinate texture wrap mode</param>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureWrap.S">
            <summary>S coordinate texture wrap mode</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.TextureWrap.T">
            <summary>T coordinate texture wrap mode</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ShaderProgram">
            <summary>Class representing a shader program</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.String)">
            <summary>Creates a shader program (from a file)</summary>
            <param name="fileName">Shader filename</param>
            <remarks>Creates a shader program from a specified file. The usable file format is CGX.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.String,System.String)">
            <summary>Creates a shader program (from a file)</summary>
            <param name="vpFileName">Vertex shader filename</param>
            <param name="fpFileName">Fragment shader filename</param>
            <remarks>Creates a shader program from a specified file. The usable file format is CGX.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.String,Sce.PlayStation.Core.Graphics.ShaderProgramOption)">
            <summary>Creates a shader program (from a file, with options)</summary>
            <param name="fileName">Shader filename</param>
            <param name="option">Shader program creation option</param>
            <remarks>Creates a shader program from a specified file. The usable file format is CGX.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.String,System.String,Sce.PlayStation.Core.Graphics.ShaderProgramOption)">
            <summary>Creates a shader program (from a file, with options)</summary>
            <param name="vpFileName">Vertex shader filename</param>
            <param name="fpFileName">Fragment shader filename</param>
            <param name="option">Shader program creation option</param>
            <remarks>Creates a shader program from a specified file. The usable file format is CGX.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.Byte[])">
            <summary>Creates a shader program (from a file image)</summary>
            <param name="fileImage">Shader file image</param>
            <remarks>Creates a shader program from a specified file image. The usable file format is CGX.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.Byte[],System.Byte[])">
            <summary>Creates a shader program (from a file image)</summary>
            <param name="vpFileImage">Vertex shader file image</param>
            <param name="fpFileImage">Fragment shader file image</param>
            <remarks>Creates a shader program from a specified file image. The usable file format is CGX.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.Byte[],Sce.PlayStation.Core.Graphics.ShaderProgramOption)">
            <summary>Creates a shader program (from a file image, with options)</summary>
            <param name="fileImage">Shader file image</param>
            <remarks>Creates a shader program from a specified file image. The usable file format is CGX.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(System.Byte[],System.Byte[],Sce.PlayStation.Core.Graphics.ShaderProgramOption)">
            <summary>Creates a shader program (from a file image, with options)</summary>
            <param name="vpFileImage">Vertex shader file image</param>
            <param name="fpFileImage">Fragment shader file image</param>
            <remarks>Creates a shader program from a specified file image. The usable file format is CGX.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.#ctor(Sce.PlayStation.Core.Graphics.ShaderProgram)">
            <summary>Creates a copy of the shader program</summary>
            <returns>Clones a shader program</returns>
            <remarks>Creates a copy of the shader program. The 2 shader programs will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.ShallowClone">
            <summary>Creates a copy of the shader program</summary>
            <returns>Copy of the shader program</returns>
            <remarks>Creates a copy of the shader program. The 2 shader programs will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.Finalize">
            <summary>Deletes a shader program</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.Dispose">
            <summary>Frees the unmanaged resources of the shader program</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.FindUniform(System.String)">
            <summary>Enables search by specifying the uniform variable name</summary>
            <param name="name">Name of the uniform variable</param>
            <returns>Number of the uniform variable (failure if -1)</returns>
            <remarks>Enables search by specifying the uniform variable name. -1 will be returned if the specified variable is not found.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.FindAttribute(System.String)">
            <summary>Enables search by specifying the attribute variable name</summary>
            <param name="name">Name of the attribute variable</param>
            <returns>Number of the attribute variable (failure if -1)</returns>
            <remarks>Enables search by specifying the attribute variable name. -1 will be returned if the specified variable is not found.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformBinding(System.Int32)">
            <summary>Obtains the uniform variable binding</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <returns>Name of the uniform variable (default when null)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformBinding(System.Int32,System.String)">
            <summary>Sets the uniform variable binding</summary>
            <param name="index">Number of the uniform variable</param>
            <param name="name">Name of the uniform variable (default when null)</param>
            <remarks>Links the uniform variable to a specific number. The old binding of the specified variable will be freed. Variables that do not have a binding are assigned an unused number.</remarks>
            \image html image/graphics_uniform_binding.png
            <remarks>It is also possible to specify a number that is equal to or greater than UniformCount to index. In such cases, an empty variable is inserted and the UniformCount value increases.</remarks>
            \image html image/graphics_uniform_binding2.png
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeBinding(System.Int32)">
            <summary>Obtains the attribute variable binding</summary>
            <param name="index">Number of the attribute variable (0 to AttributeCount-1)</param>
            <returns>Name of the attribute variable (default when null)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetAttributeBinding(System.Int32,System.String)">
            <summary>Sets the attribute variable binding</summary>
            <param name="index">Number of the attribute variable</param>
            <param name="name">Name of the attribute variable (default when null)</param>
            <remarks>Links the attribute variable to a specific number. The old binding of the specified variable will be freed. Variables that do not have a binding are assigned an unused number.</remarks>
            \image html image/graphics_attribute_binding.png
            <remarks>It is also possible to specify a number that is equal to or greater than AttributeCount to index. In such cases, an empty variable is inserted and the AttributeCount value increases.</remarks>
            \image html image/graphics_attribute_binding2.png
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformType(System.Int32)">
            <summary>Obtains the uniform variable type</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <returns>Uniform variable type</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeType(System.Int32)">
            <summary>Obtains the attribute variable type</summary>
            <param name="index">Number of the attribute variable (0 to AttributeCount-1)</param>
            <returns>Attribute variable type</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformName(System.Int32)">
            <summary>Obtains the uniform variable name</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <returns>Name of the uniform variable</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeName(System.Int32)">
            <summary>Obtains the attribute variable name</summary>
            <param name="index">Number of the attribute variable (0 to AttributeCount-1)</param>
            <returns>Name of the attribute variable</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformSize(System.Int32)">
            <summary>Obtains the array size of the uniform variable</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <returns>Obtains the array size of the uniform variable</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeSize(System.Int32)">
            <summary>Obtains the array size of the attribute variable</summary>
            <param name="index">Number of the attribute variable (0 to AttributeCount-1)</param>
            <returns>Attribute variable array size</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Matrix4@)">
            <summary>Sets the uniform variable value</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">4D matrix (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector4@)">
            <summary>Sets the uniform variable value</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">4D vector (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector3@)">
            <summary>Sets the uniform variable value</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">3D vector (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector2@)">
            <summary>Sets the uniform variable value</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">2D vector (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Single)">
            <summary>Sets the uniform variable value</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">Scalar (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32)">
            <summary>Sets the uniform variable value</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">Scalar (int)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Single[])">
            <summary>Sets the uniform variable value</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">Array data (float)</param>
            <remarks>Sets the uniform variable value. This overload can set a value not only to a float scalar variable, but also to the float vector or matrix variable such as float2,float3,float4... However, the array data size must be a multiple of the vector or matrix size.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32[])">
            <summary>Sets the uniform variable value</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">Array data (int)</param>
            <remarks>Sets the uniform variable value. This overload can set a value not only to an int scalar variable, but also to the int vector variable such as int2,int3,int4... However, the array data size must be a multiple of the vector size.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,Sce.PlayStation.Core.Matrix4@)">
            <summary>Sets the uniform variable value (with offset)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="offset">Offset of array variable</param>
            <param name="value">4D matrix (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,Sce.PlayStation.Core.Vector4@)">
            <summary>Sets the uniform variable value (with offset)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="offset">Offset of array variable</param>
            <param name="value">4D vector (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,Sce.PlayStation.Core.Vector3@)">
            <summary>Sets the uniform variable value (with offset)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="offset">Offset of array variable</param>
            <param name="value">3D vector (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,Sce.PlayStation.Core.Vector2@)">
            <summary>Sets the uniform variable value (with offset)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="offset">Offset of array variable</param>
            <param name="value">2D vector (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,System.Single)">
            <summary>Sets the uniform variable value (with offset)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="offset">Offset of array variable</param>
            <param name="value">Scalar (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the uniform variable value (with offset)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="offset">Offset of array variable</param>
            <param name="value">Scalar (int)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,System.Single[])">
            <summary>Sets the uniform variable value (with offset)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="offset">Offset of array variable</param>
            <param name="value">Array data (float)</param>
            <remarks>Sets the uniform variable value. This overload can set a value not only to a float scalar variable, but also to the float vector or matrix variable such as float2,float3,float4... However, the array data size must be a multiple of the vector or matrix size. Note that the offset arguments are counted in vector or matrix units.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32,System.Int32[])">
            <summary>Sets the uniform variable value (with offset)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="offset">Offset of array variable</param>
            <param name="value">Array data (int)</param>
            <remarks>Sets the uniform variable value. This overload can set a value not only to an int scalar variable, but also to the int vector variable such as int2,int3,int4... However, the array data size must be a multiple of the vector size. Note that the offset arguments are counted in vector units.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Matrix4[],System.Int32,System.Int32,System.Int32)">
            <summary>Sets the uniform variable value (for array data)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">4D matrix array (float)</param>
            <param name="to">Offset of the transfer destination</param>
            <param name="from">Offset of the transfer source</param>
            <param name="count">Number of data items to be transferred</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector4[],System.Int32,System.Int32,System.Int32)">
            <summary>Sets the uniform variable value (for array data)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">4D vector array (float)</param>
            <param name="to">Offset of the transfer destination</param>
            <param name="from">Offset of the transfer source</param>
            <param name="count">Number of data items to be transferred</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector3[],System.Int32,System.Int32,System.Int32)">
            <summary>Sets the uniform variable value (for array data)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">3D vector array (float)</param>
            <param name="to">Offset of the transfer destination</param>
            <param name="from">Offset of the transfer source</param>
            <param name="count">Number of data items to be transferred</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,Sce.PlayStation.Core.Vector2[],System.Int32,System.Int32,System.Int32)">
            <summary>Sets the uniform variable value (for array data)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">2D vector array (float)</param>
            <param name="to">Offset of the transfer destination</param>
            <param name="from">Offset of the transfer source</param>
            <param name="count">Number of data items to be transferred</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>Sets the uniform variable value (for array data)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">Array data (float)</param>
            <param name="to">Offset of the transfer destination</param>
            <param name="from">Offset of the transfer source</param>
            <param name="count">Number of data items to be transferred</param>
            <remarks>Sets the uniform variable value. This overload can set a value not only to a float scalar variable, but also to the float vector or matrix variable such as float2,float3,float4... However, note that the offset and count arguments are counted in vector or matrix units.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetUniformValue(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>Sets the uniform variable value (for array data)</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <param name="value">Array data (int)</param>
            <param name="to">Offset of the transfer destination</param>
            <param name="from">Offset of the transfer source</param>
            <param name="count">Number of data items to be transferred</param>
            <remarks>Sets the uniform variable value. This overload can set a value not only to an int scalar variable, but also to the int vector variable such as int2,int3,int4... However, note that the offset and count arguments are counted in vector units.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetAttributeValue(System.Int32,System.Single[])">
            <summary>Sets the default value of the attribute variable.</summary>
            <param name="index">Number of the attribute variable (0 to AttributeCount-1)</param>
            <param name="value">Array data (float)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetUniformTexture(System.Int32)">
            <summary>Obtains the uniform variable texture number</summary>
            <param name="index">Number of the uniform variable (0 to UniformCount-1)</param>
            <returns>Texture number of the uniform variable (disabled if -1)</returns>
            <remarks>Obtains the uniform variable texture number. -1 will be returned if the specified variable is not a sampler.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.GetAttributeStream(System.Int32)">
            <summary>Obtains the vertex stream number of the attribute variable</summary>
            <param name="index">Number of the attribute variable (0 to AttributeCount-1)</param>
            <returns>Vertex stream number (invalid if -1)</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SetAttributeStream(System.Int32,System.Int32)">
            <summary>Sets the vertex stream number of the attribute variable</summary>
            <param name="index">Number of the attribute variable (0 to AttributeCount-1)</param>
            <param name="stream">Vertex stream number (invalid if -1)</param>
            <remarks>Sets the vertex stream number of the attribute variable. The initial value is the number of the attribute variable. With this setting, an arbitrary vertex stream can be forwarded to the specified attribute variable. In addition, specific vertex streams can be disabled and a single vertex stream can be forwarded to multiple attribute variables.</remarks>
            \image html image/graphics_attribute_stream.png
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.SwapShader(Sce.PlayStation.Core.Graphics.ShaderProgram)">
            <summary>Changes the shader</summary>
            <param name="program">Shader Program</param>
            <remarks>Sets the shader of the specified shader program to this shader program. This function is used when switching shaders internally.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgram.UpdateShader">
            <summary>Updates the shader state</summary>
            <remarks>A virtual function that is called from the graphics context before primitive rendering. This function is used when a cached state in a class is applied to the shader.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.ShaderProgram.UniformCount">
            <summary>Number of uniform variables</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.ShaderProgram.AttributeCount">
            <summary>Number of attribute variables</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ShaderUniformType">
            <summary>Uniform variable type</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float">
            <summary>Scalar (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float2">
            <summary>2D vector (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float3">
            <summary>3D vector (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float4">
            <summary>4D vector (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float2x2">
            <summary>2D matrix (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float3x3">
            <summary>3D matrix (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Float4x4">
            <summary>4D matrix (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Int">
            <summary>Scalar (int)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Int2">
            <summary>2D vector (int)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Int3">
            <summary>3D vector (int)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Int4">
            <summary>4D vector (int)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Bool">
            <summary>Scalar (bool)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Bool2">
            <summary>2D vector (bool)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Bool3">
            <summary>3D vector (bool)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Bool4">
            <summary>4D vector (bool)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.Sampler2D">
            <summary>2D texture sampler</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderUniformType.SamplerCube">
            <summary>Cube texture sampler</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ShaderAttributeType">
            <summary>Attribute variable type</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.Float">
            <summary>Scalar (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.Float2">
            <summary>2D vector (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.Float3">
            <summary>3D vector (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderAttributeType.Float4">
            <summary>4D vector (float)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.ShaderProgramOption">
            <summary>Class representing shader program creation options</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.ShaderProgramOption.#ctor">
            <summary>Creates a class representing shader program creation options</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.ShaderProgramOption.ConstantValues">
            <summary>Constant value overwritten at the time of the compile</summary>
            <remarks>Used for rewriting a variable to a constant at the time of the compile.  "uniform int" can be rewritten as "static const int" and "uniform bool" can be rewritten as "static const bool". The declaration of each variable must be completed on one line. Once a variable has been rewritten to a constant, that value cannot be changed.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.VertexBuffer">
            <summary>Class representing the vertex buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.#ctor(System.Int32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            <summary>Creates the vertex buffer</summary>
            <param name="vertexCount">Number of vertices (no vertex array if 0)</param>
            <param name="formats">Vertex format</param>
            <remarks>Creates a vertex buffer. Specify the datatype for each vertex stream for the vertex format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.#ctor(System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            <summary>Creates a vertex buffer (with an index array)</summary>
            <param name="vertexCount">Number of vertices (no vertex array if 0)</param>
            <param name="indexCount">Number of indices (no index array if 0)</param>
            <param name="formats">Vertex format</param>
            <remarks>Creates a vertex buffer. Index arrays can be used by specifying the number of indices. Specify the datatype for each vertex stream for the vertex format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.#ctor(Sce.PlayStation.Core.Graphics.VertexBuffer)">
            <summary>Creates a copy of the vertex buffer</summary>
            <param name="buffer">Vertex buffer</param>
            <remarks>Creates a copy of the vertex buffer. The 2 vertex buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.ShallowClone">
            <summary>Creates a copy of the vertex buffer</summary>
            <returns>Clones the vertex buffer</returns>
            <remarks>Creates a copy of the vertex buffer. The 2 vertex buffers will then share unmanaged resources. When Dispose() is called for all copies, the shared unmanaged resources will be freed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.Finalize">
            <summary>Deletes the vertex buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.Dispose">
            <summary>Frees the unmanaged resources of the vertex buffer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Array)">
            <summary>Sets vertex data</summary>
            <param name="vertices">Vertex data</param>
            <remarks>Sets vertex data. Specify the vertex data in interleaved format.
            <para>This overload sets data to all vertices. When the size of the array differs from the required size, an exception is thrown. When the array size is bigger than the required size, please use a different overload.</para></remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>Sets vertex data (with range)</summary>
            <param name="vertices">Vertex data</param>
            <param name="to">Transfer destination vertex number</param>
            <param name="from">Transfer source vertex number</param>
            <param name="count">Number of vertices to be transferred</param>
            <remarks>Sets vertex data. Specify the vertex data in interleaved format.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array)">
            <summary>Sets vertex data (for single stream)</summary>
            <param name="stream">Stream number (0 to StreamCount-1)</param>
            <param name="vertices">Vertex data</param>
            <remarks>Sets the vertex data to a specified stream.
            <para>This overload sets data to all vertices. When the size of the array differs from the required size, an exception is thrown. When the array size is bigger than the required size, please use a different overload.</para></remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>Sets vertex data (for single stream, with range)</summary>
            <param name="stream">Stream number (0 to StreamCount-1)</param>
            <param name="vertices">Vertex data</param>
            <param name="to">Transfer destination vertex number</param>
            <param name="from">Transfer source vertex number</param>
            <param name="count">Number of vertices to be transferred</param>
            <remarks>Sets the vertex data to a specified stream.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>Sets vertex data (for single stream, with byte offset)</summary>
            <param name="stream">Stream number (0 to StreamCount-1)</param>
            <param name="vertices">Vertex data</param>
            <param name="offset">Byte offset of vertex data</param>
            <param name="stride">Byte stride of vertex data</param>
            <remarks>Sets the vertex data to a specified stream.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array,Sce.PlayStation.Core.Graphics.VertexFormat,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Sets vertex data (for single stream, with format conversion)</summary>
            <param name="stream">Stream number (0 to StreamCount-1)</param>
            <param name="vertices">Vertex data</param>
            <param name="format">Vertex format</param>
            <param name="trans">Translation value</param>
            <param name="scale">Scale value</param>
            <remarks>Sets the vertex data to a specified stream. The same format as the vertex buffer or the float vector format of the same dimensionality can be specified to the vertex format. When specifying the float vector format to the vertex format, the vertex data can be converted using the (vertex-trans)/scale formula. </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetVertices(System.Int32,System.Array,Sce.PlayStation.Core.Graphics.VertexFormat,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets vertex data (for single stream, with format conversion, with byte offset, with range)</summary>
            <param name="stream">Stream number (0 to StreamCount-1)</param>
            <param name="vertices">Vertex data</param>
            <param name="format">Vertex format</param>
            <param name="trans">Translation value</param>
            <param name="scale">Scale value</param>
            <param name="offset">Byte offset of vertex data</param>
            <param name="stride">Byte stride of vertex data</param>
            <param name="to">Transfer destination vertex number</param>
            <param name="from">Transfer source vertex number</param>
            <param name="count">Number of vertices to be transferred</param>
            <remarks>Sets the vertex data to a specified stream. The same format as the vertex buffer or the float vector format of the same dimensionality can be specified to the vertex format. When specifying the float vector format to the vertex format, the vertex data can be converted using the (vertex-trans)/scale formula. </remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetIndices(System.UInt16[])">
            <summary>Sets index data</summary>
            <param name="indices">Index data</param>
            <remarks>Sets index data.
            <para>This overload sets data to all indices. When the size of the array differs from the required size, an exception is thrown. When the array size is bigger than the required size, please use a different overload.</para></remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Graphics.VertexBuffer.SetIndices(System.UInt16[],System.Int32,System.Int32,System.Int32)">
            <summary>Sets index data (with range)</summary>
            <param name="indices">Index data</param>
            <param name="to">Transfer destination index number</param>
            <param name="from">Transfer source index number</param>
            <param name="count">Number of indices to be transferred</param>
            <remarks>Sets index data.</remarks>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.VertexBuffer.Formats">
            <summary>Vertex format</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.VertexBuffer.VertexCount">
            <summary>Number of vertices</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.VertexBuffer.IndexCount">
            <summary>Number of indices</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Graphics.VertexBuffer.StreamCount">
            <summary>Number of streams</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Graphics.VertexFormat">
            <summary>Vertex format</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Float">
            <summary>Scalar (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Float2">
            <summary>2D vector (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Float3">
            <summary>3D vector (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Float4">
            <summary>4D vector (float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Half">
            <summary>Scalar (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Half2">
            <summary>2D vector (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Half3">
            <summary>3D vector (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Half4">
            <summary>4D vector (half float)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short">
            <summary>Scalar (short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short2">
            <summary>2D vector (short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short3">
            <summary>3D vector (short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short4">
            <summary>4D vector (short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort">
            <summary>Scalar (ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort2">
            <summary>2D vector (ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort3">
            <summary>3D vector (ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort4">
            <summary>4D vector (ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte">
            <summary>Scalar (sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte2">
            <summary>2D vector (sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte3">
            <summary>3D vector (sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte4">
            <summary>4D vector (sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte">
            <summary>Scalar (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte2">
            <summary>2D vector (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte3">
            <summary>3D vector (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte4">
            <summary>4D vector (byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.ShortN">
            <summary>Scalar (normalized short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short2N">
            <summary>2D vector (normalized short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short3N">
            <summary>3D vector (normalized short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Short4N">
            <summary>4D vector (normalized short)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShortN">
            <summary>Scalar (normalized ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort2N">
            <summary>2D vector (normalized ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort3N">
            <summary>3D vector (normalized ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UShort4N">
            <summary>4D vector (normalized ushort)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.ByteN">
            <summary>Scalar (normalized sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte2N">
            <summary>2D vector (normalized sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte3N">
            <summary>3D vector (normalized sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.Byte4N">
            <summary>4D vector (normalized sbyte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByteN">
            <summary>Scalar (normalized byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte2N">
            <summary>2D vector (normalized byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte3N">
            <summary>3D vector (normalized byte)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Graphics.VertexFormat.UByte4N">
            <summary>4D vector (normalized byte)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.FontMetrics">
            <summary>Font metrics information</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontMetrics.Ascent">
            <summary>Length from the baseline to the upper edge of the character</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontMetrics.Descent">
            <summary>Length from the baseline to the lower edge of the character</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontMetrics.Leading">
            <summary>Row spacing</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.FontMetrics.Height">
            <summary>Distance between the baselines of the 2 lines</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.CharMetrics">
            <summary>Metrics information per character</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.X">
            <summary>X coordinate of the character's standard position</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.Y">
            <summary>Y coordinate of the character's standard position</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.Width">
            <summary>Character width</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.Height">
            <summary>Character height</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.HorizontalBearingX">
            <summary>Distance from the standard position to the left edge of the character (right is positive)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.HorizontalBearingY">
            <summary>Distance from the standard position to the top of the character (up is positive)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.CharMetrics.HorizontalAdvance">
            <summary>Distance from the standard position of one character to the next</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.FontAlias">
            <summary>Font separate name</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontAlias.System">
            <summary>System standard font</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.FontStyle">
            <summary>Font style</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontStyle.Regular">
            <summary>Standard style</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontStyle.Bold">
            <summary>Bold</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.FontStyle.Italic">
            <summary>Italics</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.Font">
            <summary>Font</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.#ctor(System.String,System.Int32,Sce.PlayStation.Core.Imaging.FontStyle)">
            <summary>Font constructor (from filename, size, and style)</summary>
            <param name="filename">Font filename</param>
            <param name="size">Size</param>
            <param name="style">Style</param>
            <remarks>The argument size must be between 1 and 1024. Also, depending on the font, the font may not be generated because its size is too small.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.#ctor(Sce.PlayStation.Core.Imaging.FontAlias,System.Int32,Sce.PlayStation.Core.Imaging.FontStyle)">
            <summary>Font constructor (from separate name, size, and style)</summary>
            <param name="alias">Font separate name</param>
            <param name="size">Size</param>
            <param name="style">Style</param>
            <remarks>The argument size must be between 1 and 1024. Also, depending on the font, the font may not be generated because its size is too small.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.#ctor(Sce.PlayStation.Core.Imaging.Font)">
            <summary>Font constructor (copied from another Font object)</summary>
            <param name="font">Copy source Font object</param>
            <remarks>A separate Font object is copied to create a new Font object. However, the actual body of the Font is not copied and one unmanaged resource will be shared. To free an unmanaged resource of a Font , Dispose() must be called for all the copied Font objects.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.ShallowClone">
            <summary>Font constructor (copied from another Font object)</summary>
            <param name="font">Copy source Font object</param>
            <remarks>A separate Font object is copied to create a new Font object. However, the actual body of the Font is not copied and one unmanaged resource will be shared. To free an unmanaged resource of a Font , Dispose() must be called for all the copied Font objects.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.Finalize">
            <summary>Font finalizer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.Dispose">
            <summary>Frees unmanaged resources of Font</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.GetTextWidth(System.String)">
            <summary>Calculates the width required to render the provided character string with this font (entire character string)</summary>
            <param name="text">Character string</param>
            <returns>Width</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.GetTextWidth(System.String,System.Int32,System.Int32)">
            <summary>Calculates the width required to render the provided character string (part of a character string)</summary>
            <param name="text">All of the character string</param>
            <param name="offset">Offset of the section to be used for calculating the character string's width</param>
            <param name="len">Length of the section to be used for calculating the character string's width</param>
            <returns>Width</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.GetTextMetrics(System.String)">
            <summary>Obtains metrics information of each character in the provided character string (entire character string)</summary>
            <param name="text">Character string</param>
            <returns>Array of metrics information per character</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Font.GetTextMetrics(System.String,System.Int32,System.Int32)">
            <summary>Obtains metrics information of each character in the provided character string (part of the character string)</summary>
            <param name="text">All of the character string</param>
            <param name="offset">Offset of the section to obtain the character string's metrics information</param>
            <param name="len">Length of the section to obtain the character string's metrics information</param>
            <returns>Array of metrics information per character</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Font.Name">
            <summary>Font name</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Font.Size">
            <summary>Size</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Font.Style">
            <summary>Style</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Font.Metrics">
            <summary>Font metrics</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImageSize">
            <summary>Image size</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageSize.Width">
            <summary>Width</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageSize.Height">
            <summary>Height</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.ImageSize.#ctor(System.Int32,System.Int32)">
            <summary>ImageSize constructor</summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImagePosition">
            <summary>Coordinate within the image (upper left being the origin)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImagePosition.X">
            <summary>X coordinate</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImagePosition.Y">
            <summary>Y coordinate</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.ImagePosition.#ctor(System.Int32,System.Int32)">
            <summary>ImagePosition constructor</summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImageRect">
            <summary>Rectangular area within the image</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageRect.X">
            <summary>X coordinate</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageRect.Y">
            <summary>Y coordinate</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageRect.Width">
            <summary>Width</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageRect.Height">
            <summary>Height</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.ImageRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ImageRect constructor</summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImageColor">
            <summary>Pixel color</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageColor.R">
            <summary>Red element (0-255)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageColor.G">
            <summary>Green element (0-255)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageColor.B">
            <summary>Blue element (0-255)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageColor.A">
            <summary>Alpha value (0-255)</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.ImageColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>ImageColor constructor</summary>
            <param name="r">Red element (0-255)</param>
            <param name="g">Green element (0-255)</param>
            <param name="b">Blue element (0-255)</param>
            <param name="a">Alpha value (0-255)</param>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.ImageMode">
            <summary>Image mode (pixel format)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageMode.Rgba">
            <summary>8-bit for each RGBA, total 32-bit mode</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Imaging.ImageMode.A">
            <summary>Alpha-only 8-bit mode</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Imaging.Image">
            <summary>Image</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(System.String)">
            <summary>Image constructor (from filename)</summary>
            <param name="filename">Image filename</param>
            <remarks>The image is not actually decoded immediately after Image is created from an image file. To decode the image, Decode() must be called. However, even if the image has not been decoded, it is still possible to obtain Size, for example.</remarks>
            <remarks>The currently supported image file formats are PNG, BMP, JPG, and GIF.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(System.Byte[])">
            <summary>Image constructor (from the file image)</summary>
            <param name="fileImage">Image file image</param>
            <remarks>The image is not actually decoded immediately after Image is created from an image file. To decode the image, Decode() must be called. However, even if the image has not been decoded, it is still possible to obtain Size, for example.</remarks>
            <remarks>The currently supported image file formats are PNG, BMP, JPG, and GIF.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(Sce.PlayStation.Core.Imaging.ImageMode,Sce.PlayStation.Core.Imaging.ImageSize,Sce.PlayStation.Core.Imaging.ImageColor)">
            <summary>Image constructor (from the image mode, size, and color)</summary>
            <param name="mode">Image mode</param>
            <param name="size">Image size</param>
            <param name="color">Color</param>
            <remarks>The width and height given to the argument size must each be between 0 and 4096.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(Sce.PlayStation.Core.Imaging.ImageMode,Sce.PlayStation.Core.Imaging.ImageSize,System.Byte[])">
            <summary>Image constructor (from the image mode, size, and buffer)</summary>
            <param name="mode">Image mode</param>
            <param name="size">Image size</param>
            <param name="buffer">Color</param>
            <remarks>The width and height given to the argument size must each be between 0 and 4096.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.#ctor(Sce.PlayStation.Core.Imaging.Image)">
            <summary>Image constructor (copied from another Image object)</summary>
            <param name="image">Copy source Image object</param>
            <remarks>A separate Image object is copied to create a new Image object. However, the actual body of the Image is not copied and one unmanaged resource will be shared. To free an unmanaged resource of an Image, Dispose() must be called for all the copied Image objects.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Finalize">
            <summary>Image finalizer</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.ShallowClone">
            <summary>Copies Image object</summary>
            <remarks>A separate Image object is copied to create a new Image object. However, the actual body of the Image is not copied and one unmanaged resource will be shared. To free an unmanaged resource of an Image, Dispose() must be called for all the copied Image objects.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Dispose">
            <summary>Frees unmanaged resources of Image</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Decode">
            <summary>Decodes image</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.ToBuffer">
            <summary>Obtains the memory image of the image</summary>
            <returns>Memory image of the image</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.ReadBuffer(System.Byte[])">
            <summary>Reads the memory image of the image in the provided buffer</summary>
            <param name="buffer">Buffer of read destination</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Resize(Sce.PlayStation.Core.Imaging.ImageSize)">
            <summary>Creates a new image object after scaling</summary>
            <param name="size">Size of the image after scaling</param>
            <returns>Scaled image</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.Crop(Sce.PlayStation.Core.Imaging.ImageRect)">
            <summary>Creates a new Image object by cutting out a part of an already-existing image</summary>
            <param name="rect">Rectangular area to be cut</param>
            <returns>Cut image</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.DrawImage(Sce.PlayStation.Core.Imaging.Image,Sce.PlayStation.Core.Imaging.ImagePosition)">
            <summary>Pastes a different image within the image</summary>
            <param name="source">Image to be pasted</param>
            <param name="position">Coordinate of the paste position (upper left)</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.DrawRectangle(Sce.PlayStation.Core.Imaging.ImageColor,Sce.PlayStation.Core.Imaging.ImageRect)">
            <summary>Renders a single-colored rectangle within the image</summary>
            <param name="color">Rectangle color</param>
            <param name="rect">Rectangle</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.DrawText(System.String,Sce.PlayStation.Core.Imaging.ImageColor,Sce.PlayStation.Core.Imaging.Font,Sce.PlayStation.Core.Imaging.ImagePosition)">
            <summary>Renders text within the image (all of the character string)</summary>
            <param name="text">Character string</param>
            <param name="color">Font color</param>
            <param name="font">Font</param>
            <param name="position">Coordinate within the image (upper left of the text)</param>
            <remarks>DrawText is the action of rendering text on a transparent image. The RGB value is overwritten with the color provided by the color argument, and the Alpha value is blended.</remarks>
            <remarks>When DrawText is called for an opaque image, the expected effect cannot be obtained.</remarks>
        </member>
        <member name="M:Sce.PlayStation.Core.Imaging.Image.DrawText(System.String,System.Int32,System.Int32,Sce.PlayStation.Core.Imaging.ImageColor,Sce.PlayStation.Core.Imaging.Font,Sce.PlayStation.Core.Imaging.ImagePosition)">
            <summary>Renders text within the image (part of the character string)</summary>
            <param name="text">Character string</param>
            <param name="offset">Offset of the position to be used to render in the string</param>
            <param name="len">Length to use for the render in the string</param>
            <param name="color">Font color</param>
            <param name="font">Font</param>
            <param name="position">Coordinate within the image (upper left of the text)</param>
            <remarks>DrawText is the action of rendering text on a transparent image. The RGB value is overwritten with the color provided by the color argument, and the Alpha value is blended.</remarks>
            <remarks>When DrawText is called for an opaque image, the expected effect cannot be obtained.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Imaging.Image.Export(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.Core.Imaging.Image.SaveAs(System.String)" -->
        <member name="P:Sce.PlayStation.Core.Imaging.Image.Size">
            <summary>Image size</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Imaging.Image.DecodeSize">
            <summary>Image size upon decoding</summary>
            <remarks>By setting DecodeSize before calling Decode(), decoding can be performed while enlarging/reducing the image.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.GamePadButtons">
            <summary>Gamepad button enumerator</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Left">
            <summary>Left directional key</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Up">
            <summary>Up directional key</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Right">
            <summary>Right directional key</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Down">
            <summary>Down directional key</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Square">
            <summary>Square button</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Triangle">
            <summary>Triangle button</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Circle">
            <summary>Circle button</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Cross">
            <summary>Cross button</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Start">
            <summary>Start button</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Select">
            <summary>Select button</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.L">
            <summary>L button</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.R">
            <summary>R button</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Enter">
            <summary>Enter button</summary>
            <remarks>The circle or cross button that has the meaning of [Enter] with the value of SystemParameters.GamePadButtonMeaning is abstracted and notified as the Enter button.</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadButtons.Back">
            <summary>Back button</summary>
            <remarks>The circle or cross button that has the meaning of [Back] with the value of SystemParameters.GamePadButtonMeaning is abstracted and notified as the Back button. The Android hardware Back button is also considered and notified.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.GamePadData">
            <summary>Gamepad data</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.Skip">
            <summary>Flag to control whether the subsequent processing will ignore this input data or not</summary>
            <remarks>Use this flag to store/obtain whether the input data has already been consumed by another object.</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.Buttons">
            <summary>Current button state</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.ButtonsPrev">
            <summary>Previous button state</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.ButtonsDown">
            <summary>Button pushed-in this time</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.ButtonsUp">
            <summary>Button released this time</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.AnalogLeftX">
            <summary>X axis of the left analog stick (-1.0 to 1.0)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.AnalogLeftY">
            <summary>Y axis of the left analog stick (-1.0 to 1.0)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.AnalogRightX">
            <summary>X axis of the right analog stick (-1.0 to 1.0)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.GamePadData.AnalogRightY">
            <summary>Y axis of the right analog stick (-1.0 to 1.0)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.GamePad">
            <summary>Class representing the gamepad device</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Input.GamePad.GetData(System.Int32)">
            <summary>Obtains the gamepad data</summary>
            <param name="deviceIndex">Device number (from 0)</param>
            <returns>Gamepad data</returns>
            <seealso cref="T:Sce.PlayStation.Core.Input.GamePadData"/>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.MotionData">
            <summary>Motion sensor data</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.MotionData.Skip">
            <summary>Flag to control whether the subsequent processing will ignore this input data or not</summary>
            <remarks>Use this flag to store/obtain whether the input data has already been consumed by another object.</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.MotionData.Acceleration">
            <summary>Acceleration</summary>
            <remarks>This is the data of the acceleration sensor. The right direction of the display's X axis and the upper direction of the Y axis, as well as the nearer direction of the Z axis, are positive. Units are in G. For example, when the display is turned upward and the device is still, the coordinates will be (0, 0, -1). When the display is vertically standing in relation to the ground and still, the coordinates will be (0, -1, 0).</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.MotionData.AngularVelocity">
            <summary>Angular velocity</summary>
            <remarks>This is the data of the Gyro sensor. Depending on the device, this data will not be obtained.</remarks>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.Motion">
            <summary>Class representing a motion sensor</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Input.Motion.GetData(System.Int32)">
            <summary>Obtains motion sensor data</summary>
            <param name="deviceIndex">Device number (from 0)</param>
            <returns>Motion sensor data</returns>
            <seealso cref="T:Sce.PlayStation.Core.Input.MotionData"/>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.TouchStatus">
            <summary>State of the touch panel finger data</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.None">
            <summary>Not pressed</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.Down">
            <summary>Pressed</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.Up">
            <summary>Released</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.Move">
            <summary>Moved</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchStatus.Canceled">
            <summary>Canceled</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.TouchData">
            <summary>Touch information for one finger on the touch panel</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.Skip">
            <summary>Flag to control whether the subsequent processing will ignore this input data or not</summary>
            <remarks>Use this flag to store/obtain whether the input data has already been consumed by another object.</remarks>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.ID">
            <summary>Finger ID</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.Status">
            <summary>Finger state</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.X">
            <summary>X coordinate of the touch position</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Input.TouchData.Y">
            <summary>Y coordinate of the touch position</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Input.Touch">
            <summary>Class representing the touch panel device</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Input.Touch.GetData(System.Int32)">
            <summary>Obtains the touch panel data</summary>
            <param name="deviceIndex">Device number (from 0)</param>
            <returns>Touch panel data</returns>
            <seealso cref="T:Sce.PlayStation.Core.Input.TouchData"/>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.LocationDeviceType">
            <summary>Type of location device</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.None">
            <summary>There is no device that can calculate location or the device is not ON</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.Gps">
            <summary>GPS</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.Wifi">
            <summary>Wi-Fi</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.Cell3G">
            <summary>3G</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Device.LocationDeviceType.Unknown">
            <summary>Unknown device</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.LocationData">
            <summary>Location information</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasLatitude">
            <summary>Whether the latitude can be calculated</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Latitude">
            <summary>Valid latitude (deg) values are -90 to +90</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasLongitude">
            <summary>Whether the longitude can be calculated</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Longitude">
            <summary>Valid longitude (deg) values are -180 to +180</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasAltitude">
            <summary>Whether the altitude can be calculated</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Altitude">
            <summary>Altitude (m)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasSpeed">
            <summary>Whether the speed can be calculated</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Speed">
            <summary>Speed (km/h)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasTime">
            <summary>Whether the time can be calculated</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Time">
            <summary>Time (msec): UTC time from January 1, 1970 (00:00:00)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasBearing">
            <summary>Whether the direction can be calculated</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Bearing">
            <summary>Valid direction values are clockwise from the North 0 - 360</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.HasAccuracy">
            <summary>Whether the accuracy can be calculated</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.Accuracy">
            <summary>Accuracy (m)</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Device.LocationData.DeviceType">
            <summary>Devices by which calculation is possible</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Device.Location">
            <summary>Class representing location information</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Location.Start">
            <summary>Starts tracking location information</summary>
            <returns>False when initialization is not correctly carried out. For example, when there is no mention of Location in app.xml.</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Location.Stop">
            <summary>Stops tracking location information</summary>
            <returns>False when initialization is not correctly carried out.</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Location.GetData">
            <summary>Tracks location information</summary>
            <returns>Location information</returns>
            <seealso cref="T:Sce.PlayStation.Core.Device.LocationData"/>
        </member>
        <member name="M:Sce.PlayStation.Core.Device.Location.GetEnableDevices">
            <summary>Obtains device with which location information can be calculated</summary>
            <returns>Device information (LocationDeviceType)</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkRequestType">
            <summary>Network request type</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkState">
            <summary>Network state</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NotConnected">
            <summary>no connection (PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.SignedOut">
            <summary>signed out (PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.SignedIn">
            <summary>signed in (PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.Online">
            <summary>online (PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.AuthRequested">
            <summary>ticket requested (PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.AuthRequestReady">
            <summary>ticket received (PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.AuthRequestFailed">
            <summary>authorization failed (PSN)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NetworkServerIdle">
            <summary>needs to connect (Network Services server)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NetworkServerRequested">
            <summary>request has been sent (Network Services server)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NetworkServerReady">
            <summary>ready to make requests (Network Services server)</summary>
        </member>
        <member name="F:Sce.PlayStation.Core.Services.NetworkState.NetworkServerFailed">
            <summary>authorization failed (Network Services server)</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkStreamReader">
            <summary>Stream reader class</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkStreamReader.Dispose">
            <summary>dispose an object</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>reads a stream</summary>
            <param name="buffer">buffer</param>
            <param name="offset">offset in buffer</param>
            <param name="count">number of bytes to read</param>
            <returns>number of bytes read</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkStreamReader.ReadToEnd">
            <summary>reads to end of stream</summary>
            <returns>remainder of stream as a string</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkStreamReader.Close">
            <summary>close stream</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkResponse">
            <summary>Network response class</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkResponse.Dispose">
            <summary>disposes class</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkResponse.GetStreamReader">
            <summary>Creates a stream reader</summary>
            <returns>stream reader</returns>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.NetworkRequest">
            <summary>Network request class</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkRequest.GetResponse">
            <summary>get the response from the server, blocking</summary>
            <returns>a response, or null if error</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkRequest.BeginGetResponse(System.AsyncCallback)">
            <summary>get the response from the server, asynchronous</summary>
            <param name="callback">callback function</param>
            <returns>a handle</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkRequest.EndGetResponse(System.IAsyncResult)">
            <summary>fetch a request</summary>
            <param name="callback">handle of request</param>
            <returns>a response</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.NetworkRequest.Dispose">
            <summary>dispose an object</summary>
        </member>
        <member name="T:Sce.PlayStation.Core.Services.Network">
            <summary>Network class which handles scoreboard usage.</summary>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.Network.Initialize(System.String)">
            <summary>initialize scoreboard class with application data</summary>
            <param name="applicationToken">application token</param>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.Network.AuthGetTicket">
            <summary>get ticket from Network Services server, upon startup or ticket expiration</summary>
            <returns>server state</returns>
        </member>
        <member name="M:Sce.PlayStation.Core.Services.Network.CreateRequest(Sce.PlayStation.Core.Services.NetworkRequestType,System.String,System.String)">
            <summary>Creates a network request. </summary>
            <param name="type">Request type</param>
            <param name="function">Network service type</param>
            <param name="json">A valid Json string</param>
            <returns>request</returns>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.Network.ServerTicket">
            <summary>Retrieve the Network Services server ticket</summary>
        </member>
        <member name="P:Sce.PlayStation.Core.Services.Network.State">
            <summary>Returns the state of the server. If status is NetworkServerReady scoreboards can be queried.</summary>
            <returns>server status</returns>
        </member>
    </members>
</doc>
