<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sce.PlayStation.HighLevel.GameEngine2D</name>
    </assembly>
    <members>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D">
            <summary>
            2Dビューの設定とナビゲーション。
            行列のスタックとルーラーと軸の描画には GraphicsContextAlpha と DrawHelpers をお使いください。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera">
            <summary>Camera2D と Camera3D 用の共通インターフェース。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetAspectFromViewport">
            <summary>ビューポートからアスペクト比を読み、その値からカメラプロジェクションのデータを更新します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Push">
            <summary>スタック上の全ての行列をプッシュし、Projection と View を設定します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Pop">
            <summary>スタックから全ての行列をポップします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetTransform">
            <summary>Matrix4としてカメラ変換行列（並行位置行列）を返します。
            GetTransform().InverseOrthonormal() はビュー行列スタックにプッシュするものです。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.DebugDraw(System.Single)">
            <summary>デバッグ用にワールドのグリッドと、ワールド座標系を描画します。
            DebugDraw() は内部的にPush()/Pop()を呼び出さないことに注意してください。カメラのPush()/Pop()は、開発者が呼び出してください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Navigate(System.Int32)">
            <summary>デバッグ用ナビゲーションのための入力を処理します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetViewFromViewport">
            <summary>スクリーンの左下がワールドの point(0,0)、スクリーンの右上が point(スクリーンの幅, スクリーンの高さ) に一致するよう、カメラビューを設定します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>正規化されたスクリーンの座標系 (-1 -> 1)で与えられた点を、対応するワールドの位置で返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetTouchPos(System.Int32,System.Boolean)">
            <summary>ワールド座標系での引数 'nth' のタッチ位置を返します。'prev' フラグは内部的に使用します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.CalcBounds">
            <summary>スクリーン上で現在表示可能なワールドの境界を計算します。この関数は2Dのみ対応しています。(3Dに拡張予定です)。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetPixelSize">
            <summary>
            現在のビューポートのサイズに基づいて、ワールド座標における"スクリーンピクセル"のサイズを取得します。
            例えば、スプライトやフォントを1:1で描画するために必要なスケールファクターを決定するために使用することができます。
            この関数は2Dのみ対応しています。(3Dに拡張予定です)。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetTouchPlaneMatrix(Sce.PlayStation.Core.Matrix4)">
            <summary>GetTouchPos（）によって使用される、3次元平面の向きを設定します。3次元のみ対応しています。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers)">
            <summary>コンストラクタ。
            </summary>
            <param name="gl">行列スタックに必要な参照。</param>
            <param name="draw_helpers">デバッグ描画に必要な参照。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewX(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            ビューの中心と、スケールと回転を決定するXサポートベクトルを指定することにより、2Dビューを定義します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewY(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>ビューの中心と、スケールと回転を決定するYサポートベクトルを指定することにより、2Dビューを定義します。
            Yサポートベクトルは、ビューのワールド座標系で表現される、画面の中心からスクリーンの上端の中央に向かうベクトルです。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromWidthAndCenter(System.Single,Sce.PlayStation.Core.Vector2)">
             <summary>
             ビューの中心 ( スクリーンの中心であるワールド座標系の点 ) とスクリーンの幅を指定することにより、2Dビューを定義します。
             このメソッドは、SetViewX( new Vector2(width*0.5f,0.0f), center ) を行うのと同じです。
             このメソッドの呼び出しだけで、カメラを定義することができます。 SetViewFromHeightAndCenter（幅は自動的にアスペクト比から推定されます）は必要はありません。
             </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromHeightAndCenter(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>
            ビューの中心 ( スクリーンの中心であるワールド座標系の点 ) とスクリーンの幅を指定することにより、2Dビューを決定します。
            このメソッドは、SetViewY( new Vector2(0.0f,height*0.5f), center )を行うのと同じです。
            このメソッドの呼び出しだけで、カメラを定義することができます。 SetViewFromHeightAndCenter（幅は自動的にアスペクト比から推定されます）必要はありません。
            </summary>		
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromHeightAndBottomLeft(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>
            スクリーンの左下のワールド座標と、スクリーンの高さを指定することにより、2Dビューを定義します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromWidthAndBottomLeft(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>
            スクリーンの左下のワールド座標系と、スクリーンの幅を指定することにより、2Dビューを定義します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromViewport">
            <summary>
            ピクセルの座標系で、ビューポートに相当する2Dビューを作成します。
            左下が (0,0)、右上がスクリーンのサイズになります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetAspectFromViewport">
            <summary>
            アスペクト比を更新するため、現在のビューポートを読みます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.X">
            <summary>
            スクリーン中央、画面右端の中央に位置する、ワールドベクトル。
            アスペクト比が反映されています。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Y">
            <summary>
            スクリーン中央、画面上端の中央に位置する、ワールドベクトル。
            アスペクト比が反映されています。3d LookAtを使った場合、これはupベクトルの方向にもなります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.CalcBounds">
            <summary>
            スクリーン上でワールドの視界部分の境界(ワールド座標系で)を計算します。
            これは、スクリーンのカリング（例えばDrawRulersで使用されます）に使用することができます。
            回転がない場合、境界はスクリーンに正確に一致します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetTransform">
            <summary>Matrix4として、カメラ変換行列 ( 正規直交位置行列 ) を計算します。
            GetTransform.InverseOrthonormal（）はビュー行列スタックにプッシュします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.NormalizedToWorldMatrix">
            <summary>
            Matrix3として、正規化したワールド行列を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>
            正規化されたスクリーン座標系（-1 - > 1）の点として与えられた、ワールド位置を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetTouchPos(System.Int32,System.Boolean)">
            <summary>
            ワールド座標系で引数 nth のタッチ位置を返します。
            prev フラグは内部的に使用されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Navigate(System.Int32)">
            <summary>
            デバッグ用のナビゲーション : タッチインターフェースのドラッグ/ズームに使用します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Push">
            <summary>
            行列スタック上のすべての必要な行列をプッシュします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Pop">
            <summary>
            行列スタックからすべてのカメラ行列をポップします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.DebugDraw(System.Single)">
            <summary>
            座標系の矢印とともに、ルーラーの間隔 1、灰色のグリッドと黒の軸でデフォルトのグリッドを描画します。
            DebugDraw（）は内部的にプッシュ（）/ポップ（）を呼び出さないことに注意してください。カメラのPush()/Pop()は、開発者が呼び出してください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetPixelSize">
            <summary>
            現在のビューポートのサイズに基づいて、ワールド座標における"スクリーンピクセル"のサイズを取得します。
            例えば、スプライトやフォントを1:1で描画するために必要なスケールファクターを決定するために使用することができます。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Center">
            <summary>
            スクリーン中央に位置するワールド位置。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Aspect">
            <summary>
            幅/高さ のアスペクト比。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Znear">
            <summary>
            プロジェクションのnear Z値。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Zfar">
            <summary>
            プロジェクションのfar Z値。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Data">
            Pack some internal bits in a struct so we can copy easily
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Data.m_support_unit_vec">
            The support vector is the 2D world vector that maps to "from center of screen to middle of right screen edge"
            (or "to the middle of the top screen edge" if m_support_is_y is set to true). It is decomposed into
            a unit vector component 'm_support_unit_vec' and its len 'm_support_scale'.
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum">
            <summary>Camera2DとCamera3Dによって使用される視錐台 (Frustum) のオブジェクト。
            透視変換に利用します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.#ctor">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Aspect">
            <summary>幅/高さ のアスペクト比。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Znear">
            <summary>プロジェクションの near Z値。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Zfar">
            <summary>プロジェクションの far Z値。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.GetPoint(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>正規化されたスクリーン座標（左下（-1,1）と右上（1,1））の位置とz値から、ビュー空間内の対応する3D位置を返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Matrix">
            <summary>行列としてのプロジェクション。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.FovX">
            <summary>X軸に沿ったビューのフィールド。
            このプロパティを使用してビューのフィールドを設定した場合、Xはこの錐台のメインの視野方向となり、FovY値の正しさは、アスペクトの値に依存します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.FovY">
            <summary>Y軸に沿ったビューのフィールド。
            このプロパティを使用してビューのフィールドを設定した場合、Yはこの錐台のメインの視野方向となり、FovY値の正しさは、アスペクトの値に依存します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D">
            <summary>基本的な3Dカメラ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers)">
            <summary>コンストラクタ。
            </summary>
            <param name="gl">行列スタックに必要な参照。</param>
            <param name="draw_helpers">デバッグ用描画に必要な参照。</param>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Eye">
            <summary>視点位置。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Center">
            <summary>ビューの中央/ターゲットの位置。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Up">
            <summary>上方向のベクトル。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Frustum">
            <summary>透視変換の錐台。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.TouchPlaneMatrix">
            <summary>このモデル行列はNormalizedToWorld/ GetTouchPosで使用されます。レイトレースのタッチ方向に対して、2D平面を定義します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetFromCamera2D(Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D)">
            <summary>
            カメラを配置し、2D並行投影ビューに正確にあうように透視変換をセットします。全てのスプライトが Z=0 の平面に描画されているとき、デフォルトになります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetAspectFromViewport">
            <summary>現在のビューポートに基づき、アスペクト比を更新します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetTransform">
            <summary>Matrix4としてカメラ変換行列（位置行列）を計算します。
            GetTransform().InverseOrthonormal() はビュー行列スタックにプッシュするものです。
            正規直交行列を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Push">
            <summary>行列スタックに必要な全ての行列をプッシュします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Pop">
            <summary>行列スタックから全てのカメラ行列をポップします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.DebugDraw(System.Single)">
            <summary>標準的なデバッググリッドを描画します。
            DebugDraw() は内部的にPush()/Pop()を呼び出さないことに注意してください。カメラのPush()/Pop()は、開発者が呼び出してください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>Camera3D.NormalizedToWorldは有効な位置を返しません。なぜなら、それはray/planeの交差であるからです。 Camera2D.NormalizedToWorldとは違うことに、注意してください。
            返り値は、2D、タッチ平面のローカル座標内の位置座標として返されます。
            この関数は、どの平面と交差しているかを知るために、TouchPlaneMatrixプロパティを使います。そのため、TouchPlaneMatrixを前もって設定しておく必要があります。(設定にはNode.NormalizedToWorldを使用してください)
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetTouchPos(System.Int32,System.Boolean)">
            <summary>ワールド座標で引数 nthのタッチ位置を返します。'prev'フラグは内部的に使用します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.CalcBounds">
            <summary>SetFromCamera2Dによって設定された、直近の境界を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetViewFromViewport">
            <summary>ピクセルサイズ (平面 z =0) のスクリーン境界を最大にする、3Dビューを作成します。正確に3次元視錐台と一致します。視点からz=0平面への距離は、現在のFrustum.FovY値に基づいて計算されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetPixelSize">
            <summary>現在のビューポートのサイズに基づいて、ワールド座標における'スクリーンピクセル'のサイズを取得します。
            例えば、スプライトやフォントを1:1で描画するために必要なスケールファクターを決定するために使用することができます。
            SetFromCamera2Dによって設定された最新のBounds2を使用しています。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Navigate(System.Int32)">
            <summary>デバッグ用カメラのナビゲーション。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetTouchPlaneMatrix(Sce.PlayStation.Core.Matrix4)">
            <summary> GetTouchPos と NormalizedToWorldで使用される、モデル平面行列を設定します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.WrapIndex(System.Int32,System.Int32)">
            <summary>[0,n-1]の範囲でループするインデックス。負のインデックスでも動作します。(-1 なら n-1 などを返す)
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.ClampIndex(System.Int32,System.Int32)">
            <summary>[0,n-1]の範囲内でインデックスをクランプします。Clamp( i, 0, n-1 )と同じです。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.GetEmbeddedResource(System.String)">
            <summary>埋め込まれたファイルのバイナリデータを取得します。主にシェーダープログラムのために利用します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.FrameCount">
            <summary>グローバルなフレームカウンタ。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers">
            <summary>2D/3Dの基本的な描画関数を提供します。このクラスは主にデバッグシェーダーを使った ImmediateMode のオブジェクトです。
            パフォーマンスが良くないため、デバッグ以外の用途で DrawHelpers を使用することは推奨しません。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32)">
            <summary>
            </summary>
            <param name="gl">コアグラフィックスのコンテキスト。</param>
            <param name="max_vertices">この DrawHelpers オブジェクトを使って、1フレームで描画する頂点の最大数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Dispose">
            <summary>Dispose の実装。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmBegin(Sce.PlayStation.Core.Graphics.DrawMode,System.UInt32)">
            <summary>新しいイミーディエイトプリミティブを開始します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex)">
            <summary>頂点を現在のプリミティブに追加します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.Core.Vector4)">
            <summary>直近のSetColor() で設定された色を使い、現在のプリミティブに頂点を追加します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.Core.Vector2)">
            <summary>直近のSetColor() で設定された色を使い、現在のプリミティブに頂点を追加します。
            (z,w) は (0,1)でセットします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmEnd">
            <summary>
            現在のプリミティブを終了します。この関数は、実際の描画呼び出しをトリガー(引き起こし)します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ShaderPush">
            <summary>ShaderPush() は現在のMVP行列を読み、現在のシェーダーをセットします。
            DrawHelpers ではネストで処理できます。シェーダーのパラメータは内部的に更新されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ShaderPop">
            <summary>
            シェーダーをポップします。 ShaderPush()の回数は、ShaderPush()の回数に一致しなければなりません。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.SetColor(Sce.PlayStation.Core.Vector4)">
            <summary>
            次の ImmVertex の呼び出しで使われる色をセットします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawBounds2Fill(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>四角形を描画します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawBounds2(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>線で四角形を描画します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawConvexPoly2(Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2)">
            <summary>凸ポリゴンを描画します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDisk(Sce.PlayStation.Core.Vector2,System.Single,System.UInt32)">
            <summary>塗りつぶした円盤を描画します。
            </summary>
            <param name="center">中心。</param>
            <param name="radius">半径。</param>
            <param name="n">分割数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCircle(Sce.PlayStation.Core.Vector2,System.Single,System.UInt32)">
            <summary>塗りつぶした円を描画します。
            </summary>
            <param name="center">中心。</param>
            <param name="radius">半径。</param>
            <param name="n">分割数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCoordinateSystem2D(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams)">
            <summary>矢印を使用し、変換行列であらわされる座標系を描画します。
            xのベクトルは赤色の矢印で表され、yのベクトルは、緑の矢印で表されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCoordinateSystem2D">
            <summary>x軸とy軸に矢印を描画します。xの矢印は赤 (1,0,0)であり、yの矢印は緑 (0,1,0)です。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawArrow(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams)">
            <summary>
            2Dの矢印を描画します。
            いくつかの矢印を描画する必要があり、かつ、描画呼び出しの数を制限したい場合には、この関数は ImmBegin()/ ImmEnd()でラップすることができます。
            各矢印は、多くとも9頂点を消費します。
            </summary>
            <param name="start_point">矢印の開始位置。</param>
            <param name="end_point">矢印の先端。</param>
            <param name="ap">矢印の幾何情報。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawLineSegment(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>ひとつの線分を描画します。処理が重いので、多くの線を描画する場合、この関数は使用しないでください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawInfiniteLine(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>単一の線分を描画します。この関数は処理が重いため、多くの線を描画する場合、この関数の使用は避けてください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawRulers(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single,System.Single)">
            <summary>指定された矩形内に、垂直および水平の線を等間隔で描画します。
            step_x, step_y を小さくすると、より多くのラインプリミティブが生成されるため、イミーディエイト描画モードの頂点バッファが容易にあふれてしまします。そのため、引数の指定には注意してください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawAxis(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single)">
            <summary>厚みのある軸線（x = 0 と y= 0 ライン）を描画します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDefaultGrid(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>この関数は、引数'clipping_bounds'の内部に、'step'の値で規則的に垂直・水平の線を描画します。
            また、厚みのある2つの軸線を描画します。描画されるすべての線が'clipping_bounds'でクリップされます。
            ルーラーを描画するとき、ブレンドモードは変更されません。軸線を描画するとき、ブレンドはDisableになっています。
            </summary>
            <param name="clipping_bounds">クリッピングの矩形。</param>
            <param name="step">ルーラーの間隔。</param>
            <param name="rulers_color">ルーラーの色。</param>
            <param name="axis_color">軸線の色。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDefaultGrid(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single)">
            <summary>デフォルトの色/ブレンドを使ったDrawDefaultGrid()。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Disposed">
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex">
            <summary>DrawHelpers で使用される頂点 (V4F_C4F)。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.Position">
            <summary>頂点位置。2D位置は、(z,w) を (0,1)に設定します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.Color">
            <summary>色。各要素は 0,1の範囲で設定してください(クランプ処理は行われません)。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.#ctor(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector4)">
            <summary>コンストラクタ。
            </summary>
            <param name="pos">(z,w)を(0,1)の設定し、位置を3Dに拡張します。</param>
            <param name="col">色。</param>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams">
            <summary>DrawArrow に渡される矢印のパラメータ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HeadRadius">
            <summary>矢印の頭部のベースの長さ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HeadLen">
            <summary>矢印の頭部の長さ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.BodyRadius">
            <summary>矢印の本体の半径。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.Scale">
            <summary>HeadRadius、HeadLen、BodyRadiusに適用されるスケール要素。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HalfMask">
            <summary>矢印の半分を表示します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.Offset">
            <summary>矢印の終点は、垂直方向に沿ってオフセットすることができます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.#ctor(System.Single)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData">
            <summary>スクリーン用デバッグプリントのための、埋め込みフォントデータ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CharSizei">
            <summary>ピクセル単位の文字のサイズ。固定サイズのフォントです。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CharSizef">
            <summary>ピクセル単位の、Vector2での文字のサイズ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CreateTexture">
            <summary>フォントデータの Texture2D オブジェクトを作成します。作成したテクスチャは呼び出し側が破棄してください。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.NumChars">
            <summary>このフォントで利用できるアスキー文字の数。' 'から始まります。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap">
             <summary>
             Fontオブジェクトと使用予定のすべての文字を含むテキストを指定して、フォントマップは、文字を格納したTexture2Dオブジェクトと対応するUVテーブルを作成します。このデータは、GameEngine2Dのさまざまなテキスト描画関数で使用されます。
             </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Texture">
            <summary>全ての文字を含む、フォントテクスチャ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharSet">
            <summary>文字に対応するCharData (UVとサイズデータ)。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharPixelHeight">
            <summary>ピクセル単位のモズの高さ。すべての文字は同じ高さです。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.AsciiCharSet">
            <summary>アスキー文字を文字列としてセットします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.#ctor(Sce.PlayStation.Core.Imaging.Font,System.Int32)">
            <summary>アスキー文字のフォントマップを作成します。
            </summary>
            <param name="font">文字を描画するための使用するフォント。フォントマップは、このFontオブジェクトを破棄することに注意してください。</param>
            <param name="fontmap_width">テクスチャで使用される内部の幅。高さはすべての文字が収まるように自動的に調整されます。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.#ctor(Sce.PlayStation.Core.Imaging.Font,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="font">文字を描画するための使用するフォント。フォントマップは、このFontオブジェクトを破棄することに注意してください。</param>
            <param name="charset">このFontMapでテキストを描画するときに必要な全ての文字を含む文字列。</param>
            <param name="fontmap_width">テクスチャによって使用される内部的な値 (高さは自動で調整されます)。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Dispose">
            <summary>破棄します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Initialize(Sce.PlayStation.Core.Imaging.Font,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="font">文字を描画するための使用するフォント。フォントマップは、このFontオブジェクトを破棄することに注意してください。</param>
            <param name="charset">このFontMapでテキストを描画するときに必要な全ての文字を含む文字列。</param>
            <param name="fontmap_width">テクスチャによって使用される内部的な値 (高さは自動で調整されます)。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.TryGetCharData(System.Char,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData@)">
            <summary>引数 'c' の文字を描画するのに必要な CharDataを取得します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Disposed">
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData">
            <summary>単一文字のUVデータ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData.UV">
            <summary>フォントマップのテクスチャ内のUV。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData.PixelSize">
            <summary>この文字のピクセルサイズ (フォントに依存します)。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode">
            <summary>BlendMode はブレンドステート(BlendFunc+'enabled' bool)をラップし、扱いやすい名称として提供します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Enabled">
            <summary>ブレンド enabled フラグ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.BlendFunc">
            <summary>ブレンド関数。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.#ctor(System.Boolean,Sce.PlayStation.Core.Graphics.BlendFunc)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.None">
            <summary>アルファなしブレンド:dst = src
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Normal">
            <summary>普通のアルファブレンド : dst = lerp( dst, src, src.a )
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Additive">
            <summary>加算アルファブレンド : dst = dst + src
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Multiplicative">
            <summary>乗算アルファブレンド : dst = dst * src
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.PremultipliedAlpha">
            <summary>乗算済みアルファブレンド : dst = dst * (1-src.a ) + src
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha">
            <summary>行列スタックと他の関数でSce.PlayStation.Core.Graphics.GraphicsContextを強化します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.#ctor(Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ModelMatrix">
            <summary>OpenGLに似た、モデル行列スタック。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ViewMatrix">
            <summary>OpenGLに似た、ビュー行列のスタック。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ProjectionMatrix">
            <summary>OpenGLに似た、プロジェクション行列スタック。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats">
            <summary>シンプルなプロファイリングのためのDebugStats。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetMVP">
            <summary>GetMVP() は ProjectionMatrix.Get() * ViewMatrix.Get() * ModelMatrix.Get() へのショートカットです。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetAspect">
            <summary>GetAspect() はビューポートのアスペクト比 ( width/height ) を返すショートカットです。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetViewportf">
            <summary>この関数は、Bounds2 オブジェクトとして、ビューポートを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.SetDepthMask(System.Boolean)">
            <summary>writeで深度値をマスクします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.SetBlendMode(Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode)">
            <summary>ブレンドモードを設定します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.CreateTextureUnicolor(System.UInt32)">
            <summary>同じ色でピクセルを塗りつぶした、小さなテクスチャを作成します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.CreateTextureFromFont(System.String,Sce.PlayStation.Core.Imaging.Font,System.UInt32)">
            <summary>Fontオブジェクトとtextを指定し、textを表すテクスチャを作成します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Context">
            <summary>コアグラフィックスのコンテキスト。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Disposed">
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.WhiteTextureInfo">
            <summary>全てのピクセルを 0xffffffffにセットした、小さな白いテクスチャを、TextureInfoとして返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats_">
            <summary>現時点では、DebugStats は DrawArrays の呼び出し回数のみ保持します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats_.DrawArraysCount">
            <summary>GameEngine2D ライブラリで呼び出される DrawArraysの回数 (開発者自身の呼び出しは含みません)。
            DrawArraysは重い関数なので、このカウンタは役に立つプロファイル情報です。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors">
            <summary>名前の付いた色の定数。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Black">
            <summary>0,0,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Red">
            <summary>1,0,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Green">
            <summary>0,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Yellow">
            <summary>1,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Blue">
            <summary>0,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Magenta">
            <summary>1,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Cyan">
            <summary>0,1,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.White">
            <summary>1,1,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Lime">
            <summary>0.5,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.LightBlue">
            <summary>0,0.5,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Pink">
            <summary>1,0,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Orange">
            <summary>1,0.5,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.LightCyan">
            <summary>0,1,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Purple">
            <summary>0.5,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey05">
            <summary>0.05,0.05,0.05,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey10">
            <summary>0.1,0.1,0.1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey20">
            <summary>0.2,0.2,0.2,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey30">
            <summary>0.3,0.3,0.3,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey40">
            <summary>0.4,0.4,0.4,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey50">
            <summary>0.5,0.5,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey60">
            <summary>0.6,0.6,0.6,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey70">
            <summary>0.7,0.7,0.7,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey80">
            <summary>0.8,0.8,0.8,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey90">
            <summary>0.9,0.9,0.9,1</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1">
            <summary>イミーディエイトモードの頂点配列は、ImmBegin()/ImmVertex()/ImmEnd()などのOpenGLスタイルのインターフェースを使い、どのフレームでも描画できます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32,System.UInt16[],System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            <summary>
            ImmediateModeのコンストラクタです。
            インデックスがnullでない場合は、vertices_per_primitiveとindices_per_primitiveは、以下の制約に従う必要があります。
            - vertices_per_primitiveは0であってはならない
            - indices_per_primitiveは0であってはならない
            - max_verticesはvertices_per_primitiveの倍数でなければなりません
            - indices.Lengthはindices_per_primitiveの倍数でなければなりません
            - max_vertices/ vertices_per_primitiveはindices.Length/ indices_per_primitiveに等しくなければなりません
            これらの制約のいずれかが満たされていない場合、コンストラクタは警告を出します。
            ImmediateModeは、Common.OnSwap() でインクリメントされるフレームカウンタに依存していることに注意してください。
            GameEngine2D.Directorを使用する流れでは、Common.OnSwap()はDirector.Instance.PostSwap()の内部で呼ばれてるようになっています。
            ImmediateModeを "スタンドアローン"を使用する場合でも、GameEngine2Dのフレームカウンタがインクリメントされているか確認するため、毎フレームCommon.OnSwap()を呼び出す必要があります。（呼び出されないと、メモリリークが発生します)。
            </summary>
            <param name="gl">コアグラフィックスのコンテキスト。</param> 
            <param name="max_vertices">1フレームあたりの最大頂点数。</param>
            <param name="indices">インデックスの配列 (nullでも可)。静的な設定を仮定しています。</param>
            <param name="vertices_per_primitive">インデックスがnullでない場合、これは各ImmBeginが持つ予定の頂点数に設定する必要があります。インデックスがnullの場合は、0に設定されています。</param>
            <param name="indices_per_primitive">インデックスがnullでない場合、これは各プリミティブごとに描画したいインデックスの数に設定する必要があります。インデックスがnullの場合は、0に設定されています。</param>
            <param name="formats">VertexBufferに渡される頂点フォーマット。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmBegin(Sce.PlayStation.Core.Graphics.DrawMode,System.UInt32)">
            <summary>描画プリミティブの開始。
            </summary>
            <param name="mode">描画プリミティブのタイプ。</param>
            <param name="max_vertices_intended">描画予定の最大頂点数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmVertex(`0)">
            <summary>頂点を追加します。ImmBeginとImmEndの間で呼ぶ必要があります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmEnd">
            <summary>描画プリミティブを終了し、描画処理を行います。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmEndIndexing">
            <summary>ImmediateMode のコンストラクタに渡される引数'vertices_per_primitive' and 'indices_per_primitive' を使った、ImmEndの特別なバージョンです。すべてのプリミティブは同じ数の頂点を消費することを想定しています。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.Disposed">
            <summary>このオブジェクトが破棄されている場合、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmActive">
            <summary>ImmBegin()/ImmEnd()の間で呼ばれると、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.MaxVertices">
            <summary>フレームごとに追加可能な、最大(合計)頂点数を返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1">
            <summary>ImmediateModeQuads はクワッドの描画を扱うために、ImmediateModeをラップしています。
            このクラスはSpriteRenderer や他の場所で使用されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmBeginQuads(System.UInt32)">
            <summary>描画のため、nクワッドを登録する準備をします。
            </summary>
            <param name="num_quads">追加する予定のクワッドの最大数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmAddQuad(`0,`0,`0,`0)">
            <summary>
            クワッドの追加。
            v2----v3
             |    | 
            v0----v1
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmAddQuad(`0[])">
            <summary>
            クワッドの追加
            v[2]----v[3]
              |      | 
            v[0]----v[1]
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmEndQuads">
            <summary>最後のImmBeginQuads以降に追加された全てのクワッドを描画します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.Disposed">
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.MaxQuads">
            <summary>フレームごとに追加可能なクワッドの最大数(合計)を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.VertexBufferPool.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2">
            <summary>Sce.PlayStation.Core.Inputをラップしたクラス。
            例:
            if ( Input2.GamePad.GetData(0).Left.Down )  // ゲームパッドの左ボタンが押されている。
            if ( Input2.GamePad0.Left.Down )            // 上記と同じですが、GamePad.GetData(0)のエイリアス(別名) 'GamePad0' を使用しています。
            if ( Input2.GamePad0.Square.Release )       // ゲームパッドの□ボタンが離された瞬間。
            if ( Input2.Keyboard0.Left.Press )          // キーボードの左キーが押された瞬間。
            if ( Input2.Keyboard0.S.On )                // キーボードのSキーが1フレーム以上押され続けている。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch00">
            <summary>Touch.GetData(0)[0] のエイリアス(別名)。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad0">
            <summary>GamePad.GetData(0) のエイリアス。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState">
            <summary>ボタンのデータ構造体は Input.GamePad、Input.Touch、Keyboardなどのヘルパーラップで共有されます。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Down">
            <summary>このフレームでボタンが押されているなら、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Press">
            <summary>前のフレームでボタンが押されておらず、このフレームでボタンが押されているなら、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.On">
            <summary>前のフレームでもボタンが押されており、このフレームでボタンが押されている場合、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Release">
            <summary>前のフレームでボタンを押しており、このフレームで押されていない場合、trueを返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData">
            <summary>Input.TouchData をラップしたクラス。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Pos">
            <summary>グラフィックスシステムとの一貫性を保つために、この関数は正規化された画面座標でのタッチ位置を返します。 : 左下（-1,1）、右上（1,1）。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Down">
            <summary>このフレームでタッチしている場合、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Press">
            <summary>前のフレームでタッチしておらず、このフレームでタッチしている場合、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.On">
            <summary>前のフレームでタッチしており、このフレームでもタッチしている場合、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Release">
            <summary>前のフレームでタッチしており、このフレームでタッチしていない場合、trueを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchDataArray.SetData(System.Collections.Generic.List{Sce.PlayStation.Core.Input.TouchData})">
            <summary>デフォルトでは、Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2は、単に自動的に入力データを取得しますが、この動作をオーバーライドして、データを手動で設定することができます。
            Skipフラグをtrueにセットすると、すべてのタッチ・ボタンの入力は Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2内で無視されるようになります。
            いったん SetData を呼び出すと、手動/外部コントローラのふるまいを永続的に可能にします。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch">
            <summary>Input.Touch をラップしたクラス。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch.GetData(System.UInt32)">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch.MaxTouch">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData">
            <summary>Input.GamePadData をラップしたクラス。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Left">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Up">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Right">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Down">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Square">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Triangle">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Circle">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Cross">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Start">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Select">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.L">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.R">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Dpad">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.AnalogLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.AnalogRight">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.SetData(Sce.PlayStation.Core.Input.GamePadData)">
            <summary>デフォルトでは、Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2は、単に自動的に入力データを取得しますが、この動作をオーバーライドして、データを手動で設定することができます。
            Skipフラグをtrueにセットすると、すべてのタッチ・ボタンの入力は Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2内で無視されるようになります。
            いったん SetData を呼び出すと、手動/外部コントローラのふるまいを永続的に可能にします。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad">
            <summary>Input.GamePad (button bits) をラップしたクラス。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad.GetData(System.UInt32)">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math">
            <summary>数学/ベクトルライブラリ用に拡張した Math クラス。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LookAt(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>カメラのルックアット行列を計算します。ベクトル（視点、中央）を-zにマップし（OpenGLはZを下向きにみるので）、上方向をyにマップします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.TranslationRotationScale(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Matrix3 TRS 行列の高速ビルド。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Det(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            </summary>2つのベクトルの行列式を返します。
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sign(System.Single)">
            <summary>xの符号を返します。xが0.0fなら0.0fを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Perp(Sce.PlayStation.Core.Vector2)">
            <summary>pi/2で回転した値を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.SetAlpha(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>アルファ値を設定します。(数学式でインライン化することができます)
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.SafeAcos(System.Single)">
            <summary>SafeAcos xが[-1,1]の範囲内にあることをチェックし、イプシロンによってオフになるなら、それをクランプします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Angle(Sce.PlayStation.Core.Vector2)">
            <summary>(1,0)と引数 valueのなす2Dの絶対角を、-pi～piの範囲で返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rotate(Sce.PlayStation.Core.Vector2,System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>'pivot'を中心に、角度 ' angle'(ラジアン)で 'point'を回転します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Deg2Rad(System.Single)">
            <summary>度数をラジアンに変換します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rad2Deg(System.Single)">
            <summary>ラジアンを度数に変換します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Deg2Rad(Sce.PlayStation.Core.Vector2)">
            <summary>度数をラジアンに変換します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rad2Deg(Sce.PlayStation.Core.Vector2)">
            <summary>ラジアンを度数に変換します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(System.Single,System.Single,System.Single)">
            <summary>線形補間。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>線形補間。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>線形補間。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>線形補間。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LerpUnitVectors(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>2つの単位ベクトルで線形補間を行います。補間はパスの短い側で行います。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LerpAngles(System.Single,System.Single,System.Single)">
            <summary>引数の2つの角度で線形補間を行います。補間はパスの短い側で行います。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sin(System.UInt32,System.Single,System.UInt32)">
            <summary>uint型の値をとる、安全なサイン関数。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sin(System.UInt64,System.Single,System.UInt64)">
            <summary>ulong型の値をとる、安全なサイン関数。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Linear(System.Single)">
            <summary>この関数は単なる f(x)=x です。Tween関数として渡すとき、コードをより明快にするため定義されています。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowerfulScurve(System.Single,System.Single,System.Single)">
            <summary>制御可能な曲線であり、少ないコードでカーブのイン/アウト多項式を容易に行うことができます。
            </summary>
            <param name="x">Asssumed to be in 0,1.</param>
            <param name="p1">Controls the ease in exponent (if >1).</param>
            <param name="p2">Controls the ease out exponent (if >1.),(p1,p2)=(1,1) just gives f(x)=x</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseIn(System.Single,System.Single)">
            <summary>Ease in curve using Pow.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseOut(System.Single,System.Single)">
            <summary>Ease out curve using Pow.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseInOut(System.Single,System.Single)">
            <summary>
            PowEaseIn/PowEaseOut mirrored around 0.5,0.5.
            Same exponent in and out.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ExpEaseOut(System.Single,System.Single)">
            <summary>
            Ease out curve using a 1-exp(-a*x) exponential,
            but normalized so that we reach 1 when x=1.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ExpEaseIn(System.Single,System.Single)">
            <summary>Ease in curve using an exponential.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseIn(System.Single,System.Single)">
            <summary>BackEaseIn function (see  http://www.robertpenner.com)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseOut(System.Single,System.Single)">
            <summary>BackEaseOut function (see  http://www.robertpenner.com)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseInOut(System.Single,System.Single)">
            <summary>BackEaseIn/BackEaseOut mirrored around 0.5,0.5.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Impulse(System.Single,System.Single)">
            <summary>Impulse function (source Inigo Quilez).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ShockWave(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Travelling wave function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Log2(System.Int32)">
            <summary>Return the log of v in base 2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.IsPowerOf2(System.Int32)">
            <summary>'i'が2のべき乗である場合、trueを返します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.GreatestOrEqualPowerOf2(System.Int32)">
            <summary>引数 i に大きい側で最も近い、もしくは等しい2のべき乗を返します。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._00i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._10i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._01i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._11i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._000i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._100i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._010i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._110i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._001i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._101i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._011i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._111i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._00">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._10">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._01">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._11">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.UV_TransformIdentity">
            <summary>
            UV transform stored as (offset, scale) in a Vector4.
            offset=0,0 scale=1,1 means identity.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.UV_TransformFlipV">
            <summary>
            UV transform stored as (offset, scale) in a Vector4
            UV_TransformFlipV v into 1-v, and leaves u unchanged.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ClosestSegmentPoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Return the closest point to P that's on segment [A,B].</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Pi">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.TwicePi">
            <summary>2pi</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.HalfPi">
            <summary>pi/2</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator">
            <summary>System.Randomをラップし、ベクトルの乱数生成を拡張したクラス。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.Random">
            <summary>生の乱数生成器。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloat0_1">
            <summary>0～1のランダムな浮動小数点数を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloatMinus1_1">
            <summary>-1～1のランダムな浮動小数点数を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloat(System.Single,System.Single)">
            <summary>mi～maのランダムな浮動小数点を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2Minus1_1">
            <summary>-1～1のランダムな Vector2 を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>mi～maのランダムな Vector2 を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2(System.Single,System.Single)">
            <summary>mi～maのランダムな Vector2 を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector3(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>mi～maのランダムな Vector3 を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector4(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>mi～maのランダムな Vector4 を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector4(System.Single,System.Single)">
            <summary>mi～maのランダムな Vector4 を返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i">
            <summary>
            Vector2 のint版。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.#ctor(System.Int32,System.Int32)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Vector2">
            <summary>floatのVector2 型に変換して値を返します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Max(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>要素単位の最大値。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Min(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>要素単位の最小値。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Clamp(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>引数の範囲でクランプ処理を行います。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.ClampIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>
            Element wise index clamp.
            X is clamped to [0,n.X-1]
            Y is clamped to [0,n.Y-1]
            <param name="n">The 2d size "this" components must be clamped against. The components of n are assumed to be positive (values of n.X or n.Y negative or zero will result in undefined behaviour).</param>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.WrapIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>
            Element wise index wrap. 
            X wraps around [0,n.X-1]
            Y wraps around [0,n.Y-1]
            This's (X,Y) is assumed to be a 2d index in a 2d table of size (n.X,n.Y).
            If X or Y are not in the valid array range, they are wrapped around [0,n.X-1] and [0,n.Y-1] respectively (-1 becomes n-1, n becomes 0, n+1 becomes 1 etc), else their value is unchanged.
            <param name="n">The 2d size "this" components must be wrapped around. The components of n are assumed to be positive (values of n.X or n.Y negative or zero will result in undefined behaviour).</param>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>要素単位の加算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>要素単位の減算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>要素単位の乗算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Int32)">
            <summary>要素単位の乗算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>要素単位の乗算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Division(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>要素単位の除算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_UnaryNegation(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>単項マイナス演算子。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Equality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>全ての要素が等しい場合、true を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Inequality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>少なくとも1つの要素が等しくない場合、trueを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Product">
            <summary>要素の積、 X*Y を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>等価テスト。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Equals(System.Object)">
            <summary>等価テスト。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.ToString">
            <summary>このベクトルの文字列表現を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.GetHashCode">
            <summary>このベクトルのハッシュコードを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Yx">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i">
            <summary>Vector3 の int版。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Int32)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Vector3">
            <summary>floatのVector3 型に変換して値を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Max(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>要素単位の最大値。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Min(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>要素単位の最小値。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Clamp(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>要素単位のクランプ処理。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.ClampIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>
            Element wise index clamp.
            X is clamped to [0,n.X-1]
            Y is clamped to [0,n.Y-1]
            Z is clamped to [0,n.Z-1]
            <param name="n">The 3d size "this" components must be clamped against. The components of n are assumed to be positive (values of n.X, n.Y or n.Z negative or zero will result in undefined behaviour).</param>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.WrapIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>
            Element wise index wrap. 
            X wraps around [0,n.X-1]
            Y wraps around [0,n.Y-1]
            Z wraps around [0,n.Z-1]
            This's (X,Y,Z) is assumed to be a 3d index in a 3d table of size (n.X,n.Y.n.Z).
            If X, Y or Z are not in the valid array range, they are wrapped around [0,n.X-1], [0,n.Y-1], [0,n.Z-1] respectively (-1 becomes n-1, n becomes 0, n+1 becomes 1 etc), else their value is unchanged.
            <param name="n">The 2d size "this" components must be wrapped around. The components of n are assumed to be positive (values of n.X, n.Y or n.Z negative or zero will result in undefined behaviour).</param>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>要素単位の加算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>要素単位の減算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>要素単位の乗算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Division(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>要素単位の除算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Equality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>すべての要素が等しい場合、trueを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Inequality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>少なくとも1つの要素が等しくない場合、trueを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Product">
            <summary>要素の積、X * Y * Z を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>等価テスト。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Equals(System.Object)">
            <summary>等価テスト。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.ToString">
            <summary>このベクトルの文字列表現を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.GetHashCode">
            <summary>このベクトルのハッシュコードを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzz">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics">
            <summary>Bounds2, Sphere2, ConvexPoly2 の共通インターフェース。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2">
            <summary>
            An axis aligned box class in 2D.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Min">
            <summary>Minimum point (lower left).</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Max">
            <summary>Maximum point (upper right)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.IsEmpty">
            <summary>Return true if the size is (0,0).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Bounds2 constructor.
            All functions in Bounds2 assume that Min is less or equal Max. If it is not the case, the user takes responsability for it.
            SafeBounds will ensure this is the case whatever the input is, but the default constructor will just blindly
            takes anything the user passes without trying to fix it.
            </summary>
            <param name="min">The bottom left point. Min is set to that value without further checking.</param>
            <param name="max">The top right point. Max is set to that value without further checking.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>
            Bounds2 constructor. 
            Return a zero size bounds. You can then use Add to expand it. 
            </summary>
            <param name="point">Location of the Bounds2.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.SafeBounds(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Create a Bounds2 that goes through 2 points, the min and max are recalculated.
            </summary>
            <param name="min">First point.</param>
            <param name="max">Second point.</param>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Zero">
            <summary>(0,0) -> (0,0) box.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Quad0_1">
            <summary>(0,0) -> (1,1) box.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.QuadMinus1_1">
            <summary>(-1,-1) -> (1,1) box.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.CenteredSquare(System.Single)">
            <summary>
            Return a box that goes from (-h,-h) to (h,h).
            We don't check for sign.
            </summary>
            <param name="h">Half size of the square.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2)">
            <summary>Translate bounds.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2)">
            <summary>Translate bounds.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Overlaps(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>Return true if this and 'bounds' overlap.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Intersection(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>Return the Bounds2 resulting from the intersection of 2 bounds.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Scale(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Scale bounds around a given pivot.
            </summary>
            <param name="scale">Amount of scale.</param>
            <param name="center">Scale center.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Add(Sce.PlayStation.Core.Vector2)">
            <summary>Add the contribution of 'point' to this Bounds2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Add(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>Add the contribution of 'bounds' to this Bounds2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.ToString">
            <summary>Return the string representation of this Bounds2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.OutrageousYTopBottomSwap">
            <summary>
            Swap y coordinates for top and bottom, handy for hacking uvs
            in system that use 0,0 as top left. Also, this will generate
            an invalid Bounds2 and all functions in that class will break
            (intersections, add etc.)
            Functions like Point00, Point10 etc can still be used.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.OutrageousYVCoordFlip">
            <summary>
            Similar to OutrageousYTopBottomSwap, but instead of
            swapping top and bottom y, it just does y=1-y. Same
            comment as OutrageousYTopBottomSwap.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Aspect">
            <summary>The Width/Height ratio.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Center">
            <summary>The center of the bounds (Max+Min)/2.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Size">
            <summary>The Size the bounds (Max-Min).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point00">
            <summary>The bottom left point (which is also Min).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point11">
            <summary>The top right point (which is also Max).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point10">
            <summary>The bottom right point.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point01">
            <summary>The top left point.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2">
            <summary>A plane class in 2D.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.Base">
            <summary>A base point on the plane.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.UnitNormal">
            <summary>The plane normal vector, assumed to be unit length. If this is not the case, some functions will have undefined behaviour.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Plane2 constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.Project(Sce.PlayStation.Core.Vector2)">
            <summary>
            Project a point on this plane.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2">
            <summary>A sphere class in 2D.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.Center">
            <summary>Sphere center.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.Radius">
            <summary>Sphere radius.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>Sphere2 constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2">
            <summary>A convex polygon class in 2D.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Planes">
            <summary>
            The convex poly is stored as a list of planes assumed to define a 
            convex region. Plane base points are also polygon vertices.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.#ctor(Sce.PlayStation.Core.Vector2[])">
            <summary>
            ConvexPoly2 constructor.
            Assumes input points define a convex region.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.MakeBox(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.MakeRegular(System.UInt32,System.Single)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Size">
            <summary>Return the number of vertices (or faces)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetPoint(System.Int32)">
            <summary>Get a vertex position.</summary>
            <param name="index">The vertex index.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetNormal(System.Int32)">
            <summary>Get the normal vector of a face of this poly.</summary>
            <param name="index">The face index.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetPlane(System.Int32)">
            <summary>Get the plane formed by a face of this poly.</summary>
            <param name="index">The face index.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcBounds">
            <summary>Calculate the bounds of this poly.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcCenter">
            <summary>Calculate the gravity center of this poly.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcArea">
            <summary>Calculate the area of this convex poly.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Translate(Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Sphere">
            <summary>Bounding sphere, centered at center of mass.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3">
            <summary>2Dを扱うための 3x3の行列。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.X">
            <summary>1番目の列。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Y">
            <summary>2番目の列。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Z">
            <summary>3番目の列。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.#ctor(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>コンストラクタ。
            </summary>
            <param name="valx">1番目の列。</param>
            <param name="valy">2番目の列。</param>
            <param name="valz">3番目の列。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.Core.Vector3)">
            <summary>行列/ベクトルの乗算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3)">
            <summary>行列/行列の乗算。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Transpose">
            <summary>転置行列を返します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Identity">
            <summary>単位行列を返します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Zero">
            <summary>全ての要素を0にセットした行列を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Translation(Sce.PlayStation.Core.Vector2)">
            <summary>平行移動行列を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Scale(Sce.PlayStation.Core.Vector2)">
            <summary>スケール行列を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Skew(Sce.PlayStation.Core.Vector2)">
            <summary>歪(skew)行列を返します。
            </summary>
            <param name="value"> (tan(skewx),tan(skewy)) ベクトル。skewx と skewy は歪の角度です。</param>		
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Rotation(Sce.PlayStation.Core.Vector2)">
            <summary>回転行列を返します。
            </summary>
            <param name="unit_vector">(cos(angle),sin(angle)) 単位ベクトル。 回転させたい角度を指定します。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Rotation(System.Single)">
            <summary>回転行列を返します。
            </summary>
            <param name="angle">ラジアンの回転角。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.TRS(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>平行移動 * 回転 * スケール の変換行列を返します。
            </summary>
            <param name="translation">平行移動の量。</param>
            <param name="unit_vector">(cos(angle),sin(angle)) 単位ベクトル。 回転させたい角度を指定します。</param>
            <param name="scale">スケーリング。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Determinant">
            <summary>行列式を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Inverse">
            <summary>逆行列を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.InverseOrthonormal">
            <summary>行列がTxR (直交) であると仮定した、特別な逆行列。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Matrix4">
            <summary>この行列が変換行列 ( 最後の行が 0,0,1など)であると仮定して、それのMatrix4バージョンを返す。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.GetCoordSysError">
            <summary>isCoordSys（）によって返された最後のエラーを、文字列として取得します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.IsOrthonormal(System.Single)">
            <summary>行列が、有効な右手座標系で、直交する2次元座標系を表す場合、trueを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@,System.Single)">
            <summary>等価テスト。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            <summary>等価テスト。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.ToString">
            <summary>値を文字列化して返す。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack">
            <summary>OpenGLに似た、シンプルな変換行列のスタックです。直交行列を扱うための工夫がなされています。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.#ctor(System.UInt32)">
            <summary>コンストラクタ。
            </summary>
            <param name="capacity">スタックの最大の深さ。</param>		
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Push">
            <summary>現在トップにある行列をコピーして、スタックにプッシュします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Pop">
            <summary>トップの行列をポップします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Mul(Sce.PlayStation.Core.Matrix4)">
            <summary>引数の 'mat' でトップの行列を右側から乗算します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Mul1(Sce.PlayStation.Core.Matrix4)">
            <summary>直交行列 'mat' でトップの行列を右側から乗算します。もし行列が正規直交行列であることがわかっていれば、Mul()のかわりに Mul1()を使うことができます。正規直交行列で演算し続ける限り、逆計算はより速くなります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Set(Sce.PlayStation.Core.Matrix4)">
            <summary>行列スタックのトップに、現在の行列をセットします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Set1(Sce.PlayStation.Core.Matrix4)">
            <summary>正規直交行列を設定します。行列が正規直交であることが事前にわかっている場合、Set()の代わりにSet1()を使用することができます。正規直交行列で演算する限り、逆数計算はより速くなります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Get">
            <summary>現在、行列スタックのトップの行列を取得します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.GetInverse">
            <summary>キャッシュされた逆行列を必要に応じて更新し、返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.SetIdentity">
            <summary>トップの行列に単位行列をセットします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateX(System.Single)">
            <summary>トップの行列をX軸まわりで回転させます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateY(System.Single)">
            <summary>トップの行列をY軸まわりで回転させます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateZ(System.Single)">
            <summary>トップの行列をZ軸まわりで回転させます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Rotate(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>開発者が指定した軸で、トップの行列を回転させます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Scale(Sce.PlayStation.Core.Vector3)">
            <summary>トップの行列をスケールさせます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Translate(Sce.PlayStation.Core.Vector3)">
            <summary>トップの行列を平行移動させます。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Tag">
            <summary>Tag は一番上の行列の内容が変化したとき、インクリメントされる数値です。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Size">
            <summary>現在のスタックのサイズ。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Capacity">
            <summary>最大スタックサイズ。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll">
            <summary>ピッチ/ロール回転のヘルパーオブジェクト/関数。
            Pitch(x) -> roll(y)の順に回転します。
            ロールは-pi, pi、ピッチは-pi/2,pi/2です。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.FromVector(Sce.PlayStation.Core.Vector3)">
            <summary>ピッチ x とロール y を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToVector(Sce.PlayStation.Core.Vector2)">
            <summary>ロール -> ピッチで回転させた z=(0,0,1)を返します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.Data">
            <summary>x: ピッチ  y: ロール (ラジアン)
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToVector">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToMatrix">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch">
            <summary>Pitch/roll 回転のヘルパーオブジェクト/関数。
            Roll(y) -> pitch(x)の順に回転します。
            ピッチは-pi, pi、ロールは-pi/2,pi/2です。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.FromVector(Sce.PlayStation.Core.Vector3)">
            <summary>ピッチ x、ロール yを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToVector(Sce.PlayStation.Core.Vector2)">
            <summary>ロール -> ピッチで回転させる z=(0,0,1)を返します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.Data">
            <summary>x:ピッチ、y:ロール (ラジアン)。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToVector">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToMatrix">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo">
            <summary>TextureInfoは、Texture2Dオブジェクトを保持し、関連付けられたタイルのUVデータをキャッシュします。
            タイルの転送元領域はテクスチャ全体である必要はなく、UV領域内の任意の大きさのボックスで指定することができます。
            TextureInfoは、渡されるTexture2Dオブジェクトの所有権を取得し、Dispose関数で破棄します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Texture">
            <summary>テクスチャのオブジェクト。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TileSizeInUV">
            <summary>UV単位でタイルのサイズを返します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.NumTiles">
            <summary>タイルグリッドの数を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.GetCachedTiledData(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i@)">
            <summary>引数で指定されたタイルのCachedTileData（タイルのUV情報が含まれている）を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(System.String)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D)">
            <summary>コンストラクタ。
            注意: TextureInfoは、このコンストラクタに渡されるTexture2Dの所有権を取得し、Disposeでそれを破棄します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>コンストラクタ。
            注意: TextureInfoは、このコンストラクタに渡されるTexture2Dの所有権を取得し、Disposeでそれを破棄します。
            </summary>
            <param name="texture">テクスチャ。</param>
            <param name="num_tiles">xとyのタイル分割数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            <summary>コンストラクタ。
            注意: TextureInfoは、このコンストラクタに渡されるTexture2Dの所有権を取得し、Disposeでそれを破棄します。
            </summary>
            <param name="texture">テクスチャ。</param>
            <param name="num_tiles">xとyのタイル分割数。</param>
            <param name="source_area">UV領域内の転送元矩形。この矩形内を分割してタイルを構築します。左下が(0,0)になります。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Dispose">
            <summary>オブジェクトの破棄。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Initialize(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            <summary>TextureInfoコンストラクタによって呼び出される、実質的な初期化関数。
            </summary>
            <param name="texture">テクスチャ。</param>
            <param name="num_tiles">セル内のタイル数。水平方向と垂直方向の数を指定します。</param>
            <param name="source_area">UV領域内の転送元矩形。この矩形内を分割してタイルを構築します。左下が(0,0)になります。</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TextureSizef">
            <summary>ピクセル単位のテクスチャのサイズをVector2で返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TextureSizei">
            <summary>ピクセル単位のテクスチャのサイズをVector2iで返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TileSizeInPixelsf">
            <summary>ピクセル単位のタイルサイズを、Vector2で返します。すべてのタイルは同じサイズを持っています。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Disposed">
            <summary>このオブジェクトが破棄されている場合、trueを返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData">
            <summary>各タイルのキャッシュされたUV情報。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_00">
            <summary>左下のUVポイント。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_10">
            <summary>右下のUVポイント。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_01">
            <summary>左上のUVポイント。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_11">
            <summary>右上のUVポイント。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer">
            <summary>SpriteRendererは、単純なBeginSprites / AddSprite X N / EndSprite APIでのスプライトの一括描画をラップします。
            また、FontMap を使ったテキスト描画関数を提供します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.FlipU">
            <summary>描画される全てのスプライト/クワッドのU座標を水平に反転するフラグ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.FlipV">
            <summary>描画される全てのスプライト/クワッドのV座標を垂直に反転するフラグ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.Dispose">
            <summary>Dispose の実装。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextDebug(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader)">
            <summary>DrawDebugTextは、埋め込まれた小さなフォントを使って、スクリーン上に文字を表示します。
            DrawDebugTextは簡易的なフォントデータであるため、アスキー文字にしか対応していません ( ' '(32) から '~'(126)までの文字)。
            アスキー文字以外の文字は'?'で表示されます。例えば「こんにちは」は "?????" と表示されます。
            </summary>
            <param name="str">描画するテキスト。</param>
            <param name="bottom_left_start_pos">ワールド空間/ユニット内での、テキスト矩形の左下の点。</param>
            <param name="char_height">ワールド空間/ユニット内での文字の高さ。</param>
            <param name="draw">falseを指定した場合、何も描画せず、テキストによって使用される Bound2 を返します。</param>
            <param name="shader">シェーダーを指定しない場合、DefaultFontShader が使用されます。</param>
            <returns>描画されたテキストでカバーされた矩形領域。実際に描画する前に矩形領域を知りたい場合、draw=trueで呼び出してください。</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextWithFontMap(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader)">
            <summary>FontMapオブジェクトを使ったテキスト描画関数。
            </summary>
            <param name="str">描画するテキスト。</param>
            <param name="bottom_left_start_pos">ワールド空間/units内でのテキスト矩形の左下の点。</param>
            <param name="char_height">ワールド空間/units内での文字の高さ。</param>
            <param name="draw">falseを指定した場合、何も描画せず、テキストによって使用された Bound2 を返します。</param>
            <param name="fontmap">フォントマップのオブジェクト (テクスチャを保持します)。</param>
            <param name="shader">SpriteRenderer.DefaultFontShader のデフォルトシェーダー。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextWithFontMap(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap)">
            <summary>このテキスト描画関数は FontMap オブジェクトと SpriteRenderer の DefaultShader を使用します。
            </summary>
            <param name="str">描画するテキスト。</param>
            <param name="bottom_left_start_pos">ワールド空間/ユニット内での、テキスト矩形の左下。</param>
            <param name="char_height">ワールド空間/ユニット内での文字の高さ。</param>
            <param name="draw">falseを指定した場合、何も描画せず、テキストによって使用された Bound2 を返します。</param>
            <param name="fontmap">フォントマップのオブジェクト (テクスチャを保持します)。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.BeginSprites(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader,System.Int32)">
            <summary>スプライトの一括描画を開始します。
            </summary>
            <param name="texture_info">テクスチャオブジェクト。</param>
            <param name="shader">シェーダーオブジェクト。</param>
            <param name="num_sprites">描画するスプライトの最大数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.BeginSprites(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,System.Int32)">
            <summary>スプライトの一括描画を開始します。
            </summary>
            <param name="texture_info">テクスチャオブジェクト。</param>
            <param name="num_sprites">描画するスプライトの最大数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.EndSprites">
            <summary>スプライトの一括描画を終了します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            </summary>
            <param name="quad">スプライトの幾何情報。</param>
            <param name="tile_index">タイルインデックスで指定する、スプライトのUV。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            </summary>
            <param name="quad">スプライトの幾何情報。</param>
            <param name="tile_index">タイルインデックスで指定する、スプライトのUV。</param>
            <param name="mat">スプライトごとの変換行列。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@)">
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            </summary>
            <param name="quad">スプライトの幾何情報。</param>
            <param name="uv">TRSオブジェクトで指定するスプライトのUV。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            </summary>
            <param name="quad">スプライトの幾何情報。</param>
            <param name="uv">TRSオブジェクトで指定するスプライトのUV。</param>
            <param name="mat">スプライトごとの変換行列。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            ひとつのベクトルでスプライトの向きとスケールを決定します。
            </summary>
            <param name="x">スプライトの下端の長さと方向。</param>
            <param name="bottom_left_start_pos">スプライトの左下の点。</param>
            <param name="uv_bounds">UVの境界 ( UV領域内のBounds2)。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>スプライトの一括描画処理にスプライトを追加します。 BeginSprites と EndSprites の間で呼び出してください。
            このバージョンでは、開発者は Vector4 で4つの頂点を指定します。Vector4の xy は 頂点の位置であり、 zw は UV です。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader">
            <summary>SpriteRenderer によって使用されるデフォルトのシェーダー。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader">
            <summary>SpriteRenderer によって使用される、Fontのためのデフォルトのシェーダー。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.Disposed">
            <summary>オブジェクトが破棄されている場合、trueを返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader">
            <summary>開発者によって設定されるシェーダープログラムのインターフェース。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetMVP(Sce.PlayStation.Core.Matrix4@)">
            <summary>プロジェクション行列 * ビュー行列 * モデル行列。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetColor(Sce.PlayStation.Core.Vector4@)">
            <summary>グローバルカラー。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetUVTransform(Sce.PlayStation.Core.Vector4@)">
            <summary>UVの変換を設定します。Xy内のオフセット、Zwのスケール、(0,0,1,1)はUVが変更されないことを意味します。
            シェーダーコードの例：transformed_uv = UVTransform.xy + UV * UVTransform.zw
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.GetShaderProgram">
            <summary>ShaderProgram オブジェクトを取得します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader_">
            <summary>スプライトのデフォルトのシェーダー：色によって変調されたテクスチャ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader_.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader_">
            <summary>Fontのデフォルトのシェーダー。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader_.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer">
            <summary>シンプルなタイマー。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.#ctor">
            <summary>Timerのコンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Reset">
            <summary>タイマーをリセットします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Milliseconds">
            <summary>コンストラクタが呼び出された瞬間、または Reset()が呼び出された瞬間からの経過時間をミリ秒単位で返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Seconds">
            <summary>コンストラクタが呼び出された瞬間、または Reset()が呼び出された瞬間からの経過時間を秒単位で返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS">
            <summary>TRSはシーングラフの専門用語です。TRSは平行移動/回転/スケールの2D変換行列を標準的な方法で格納するのために使用されています。
            また、向きをもった境界ボックスを定義します。
            TRSはスプライトの配置/サイズとスプライトUVの両方を格納するためにも使用します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.T">
            <summary>平行移動。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.R">
            <summary>回転。単位ベクトル (cos,sin) として格納します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.S">
            <summary>スケール (またはサイズ)。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Rotate(System.Single)">
            <summary>角度を指定してオブジェクトを回転させます。
            </summary>
            <param name="angle">Rotation angle in radian.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Rotate(Sce.PlayStation.Core.Vector2)">
            <summary>角度を指定してオブジェクトを回転させます。
            </summary>
            <param name="rotation">回転を表す(cos(angle),sin(angle))の単位ベクトル。</param>
            This lets you precompute the cos,sin needed during rotation.
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Quad0_1">
            <summary>（0,0）（1,1）からなる単位クワッドをカバーするTRS。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.QuadMinus1_1">
            <summary>（-1,-1）（1,1）からなるクワッドをカバーするTRS。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>Bounds2からの変換 : a_bounds.Min は T になり、a_bounds.Size は Sになります(回転なし)。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Bounds2">
            <summary>Bounds2に変換します。回転がある場合は、エンドポイントが一致しないことに注意してください。しかし、すべてのケースで、返された境界は完全にTRSを含んでいます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Tile(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            <summary>タイル数とタイルのインデックスを指定し、引数 source_area からサブ領域を取得します。
            一般的にsource_areaはQuad0_1（単位クワッド、全体のテクスチャを意味する）になります。
            タイルのテクスチャ内で、指定されたタイルのUV情報を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Centering(Sce.PlayStation.Core.Vector2)">
            <summary>入力で与えられる、正規化された点が（0,0）になるようにTRSを変換します。TRS.Localで事前に定義され、正規化された点です。
            </summary>
            <param name="normalized_pos">新しい中心になる、正規化された位置。たとえば、実際のサイズ、位置、TRSの向きに関係なく、( 0.5, 0.5 ) はTRSの中心を表しています。 ( 0, 0 )は左下の点、( 1, 1 )は右上の点です。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.ToString">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.X">
            <summary>左下から右下に向かう、サポートXベクトル。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Y">
            <summary>左下から左上に向かう、サポートYベクトル。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point00">
            <summary>ロカール座標での左下の点 (基準点), (0,0)。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point10">
            <summary>ロカール座標での右下の点 (1,0)。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point01">
            <summary>ロカール座標での左上の点 (0,1)。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point11">
            <summary>ロカール座標での右上の点 (1,1)。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Center">
            <summary>このTRSによって定義された向きを持ったボックスの中心を返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.RotationNormalize">
            <summary>RotationNormalize は Rotation に似ています。しかし RotationNormalize は誤差の蓄積を防ぐために、単位ベクトルを正規化します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Angle">
            <summary>このプロパティは角度で回転を設定/取得します。これは重い処理であり、通常角度の不連続性の問題をもたらします。角度は常に格納され、-pi,piの範囲で値を返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local">
            <summary>エイリアス。一般的にCenteringに渡すために使用します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.MiddleLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopCenter">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.Center">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomCenter">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopRight">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.MiddleRight">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomRight">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>
            </summary>
            Hermite spline evaluation given 2 scalar and 2 gradients. Parameter u is in [0,1].
            <param name="v">
            v.x = value at 0
            v.y = value at 1
            v.z = gradient at 0
            v.w = gradient at 1
            </param>
            <param name="u">Curve parameter in [0,1].</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>
            Hermite spline evaluation, given 2 points in xy and their tangents
            (p2's x value must be superior to p0's x value).
            </summary>
            <param name="x">The curve parameter.</param>
            <param name="p0">Left point.</param>
            <param name="p1">Right point.</param>
            <param name="t0">Tangent at p0.</param>
            <param name="t1">Tangent at p2.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            </summary>
            Hermite spline evaluation, given 4 points in xy.
            <param name="x">Eval parameter.</param>
            <param name="p0">Start point.</param>
            <param name="p2">End point.</param>
            <param name="p01">Vector p0,p01 defines the tangent at p0 (length matters).</param>
            <param name="p21">Vector p2,p21 defines the tangent at p2 (lenght matters).</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Cubic bezier, Vector2 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>Cubic bezier, Vector3 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Cubic bezier, Vector4 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Catmull-Rom, Vector2 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>Catmull-Rom, Vector3 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Catmull-Rom, Vector4 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRomAndDerivative(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Catmull-Rom curve evaluation for 4 Vector2 control points.
            Return a Vector4 with position in xy and tangent in zw. Just apply Math.Perp to the tangent to get the normal vector.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BezierAuto(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>
            Piecewise cubic bezier curve.
            </summary>
            <param name="t">The curve parameter.</param>
            <param name="p0">Control point 0.</param>
            <param name="p1">Control point 1.</param>
            <param name="p2">Control point 2.</param>
            <param name="p3">Control point 3.</param>
            <param name="r">Tangent control.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            B-Spline curve evaluation for 4 Vector2 control points.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>
            B-Spline curve evaluation for 4 Vector4 control points.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BsplineAndDerivative(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            B-Spline curve evaluation for 4 Vector2 control points.
            Return a Vector4 with position in xy and tangent in zw. Just apply Math.Perp to the tangent to get the normal vector.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Catmull-Rom curve evaluation for n Vector2 control points (position only).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRomAndDerivative(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Catmull-Rom curve evaluation (with derivative) for n Vector2 control points (position only).
            Return position in xy, tangent in zw. Just apply Math.Perp to the tangent to get the normal.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Bspline curve evaluation for n Vector2 control points (position only).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BsplineAndDerivative(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Bspline curve evaluation (with derivative) for n Vector2 control points.
            Return position in xy, tangent in zw. Just apply Math.Perp to the tangent to get the normal.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase">
            <summary>全てのアクションの基底クラス。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Tag">
            <summary>このアクションを検索するために使用するタグ値。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Run">
            <summary>アクションをキック (実行) します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Stop">
            <summary>アクションを停止します (いくつかのアクションは自動で停止します)。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Update(System.Single)">
            <summary>毎フレーム呼び出される、このアクションのUpdate関数。</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.IsRunning">
            <summary>このアクションがアクティブの場合、IsRunning は true になります。</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Target">
            <summary>このアクションによって影響を受けるノード。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration">
            <summary>有限の期間を持つアクションの基底クラス。
            抽象クラス。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration.Duration">
            <summary>秒単位でのアクションの期間。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration.Run">
            <summary>アクションをキックします。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc">
            <summary>指定した関数を呼び出す、ワンショットアクション。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.Func">
            <summary>このアクションが呼び出す関数。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.#ctor(System.Action)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.Update(System.Single)">
            <summary>Update関数。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime">
            <summary>指定した期間ののち終了する、待機アクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.#ctor">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.#ctor(System.Single)">
            <summary>コンストラクタ。</summary>
            <param name="duration">秒単位での待機時間。</param>		
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.Run">
            <summary>このアクションをキックします。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.Update(System.Single)">
            <summary>Update関数。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1">
            <summary>汎用的な補間アクションの基底クラス。set/get 関数をセットします。
            抽象クラス。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.TargetValue">
            <summary>ターゲットの値。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.IsRelative">
            <summary>trueの場合、ターゲットの値はオフセットです。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Tween">
            <summary>
            Tween/補間の関数。基本的に xが0から1になるとき、f(x)が0から1になる f(x)です。
            DTween を設定可能な関数の例です。
            (t) => Math.Linear(t);
            (t) => Math.ExpEaseIn(t,1.0f);
            (t) => Math.ExpEaseOut(t,1.0f);
            (t) => Math.PowEaseIn(t,4.0f);
            (t) => Math.PowEaseOut(t,4.0f);
            (t) => Math.PowEaseInOut(t,4.0f);
            (t) => Math.BackEaseIn(t,1.0f);
            (t) => Math.BackEaseOut(t,1.0f);
            (t) => Math.BackEaseInOut(t,1.0f);
            (t) => Math.PowerfulScurve(t,3.7f,3.7f);
            (t) => Math.Impulse(t,10.0f);
            (t) => FMath.Sin(t*Math.Pi*0.5f); // for sin curve tween
            tweenの詳細については、cocos2dのドキュメントを参考にしてください。
            http://www.robertpenner.com/easing/easing_demo.html
            http://www.robertpenner.com/easing/penner_chapter7_tweening.pdf
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Set">
            <summary>tweenを実行しているとき、現在の値をセットする関数。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Get">
            <summary>tweenを実行しているとき、現在の値を取得する関数。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.#ctor">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric{`0}.DGet,Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric{`0}.DSet)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Run">
            <summary>アクションをキックします。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Update(System.Single)">
            <summary>Update関数。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.DSet">
            <summary>set関数のデリゲート。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.DGet">
            <summary>get関数のデリゲート。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2">
            <summary>ActionTweenGenericVector2 はスタート値からターゲット値に移行する、シンプルなwiseブレンドを行います。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector4">
            <summary>ActionTweenGenericVector4 はスタート値からターゲット値に移行する、シンプルなwiseブレンドを行います。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2Scale">
            <summary>ActionTweenGenericVector2Scale は ActionTweenGenericVector2 に似ていますが、
            スケール値 (乗法) で実行します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2Rotation">
            <summary>ActionTweenGenericVector2Rotation は単位ベクトルを補間します。単位ベクトルは回転で補間します。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.MoveBy">
            <summary>オフセットの値を現在の位置に徐々に加算していくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.MoveBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.MoveTo">
            <summary>指定した目標に徐々に移動するアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.MoveTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ScaleBy">
            <summary>現在のスケールに徐々に追加のスケールを追加していくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ScaleBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ScaleTo">
            <summary>指定した値へスケールを徐々にセットしていくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ScaleTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SkewBy">
            <summary>現在のスキュー値に徐々にオフセット値を加算していくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SkewBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SkewTo">
            <summary>指定した値へ徐々にスキューをセットしていくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SkewTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RotateBy">
            <summary>現在の回転値に徐々にオフセット値を加算していくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RotateBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RotateTo">
            <summary>指定した値へ徐々に回転値をセットしていくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RotateTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TintBy">
            <summary>徐々に色を加算していくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TintBy.#ctor(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TintTo">
            <summary>指定した値に徐々に色をセットしていくアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TintTo.#ctor(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Sequence">
            <summary>順番に、他の一連のアクションを実行するためのアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.#ctor">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Add(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            <summary>引数の action をアクションシーケンスに追加します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Run">
            <summary>アクションをキックします。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Stop">
            <summary>アクションを停止します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Update(System.Single)">
            <summary>Update 関数。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever">
            <summary>他のアクションを永続的に繰り返すアクション。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.InnerAction">
            <summary>繰り返しのアクション。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Run">
            <summary>アクションをキックします。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Stop">
            <summary>アクションを停止します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Update(System.Single)">
            <summary>Update 関数。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Repeat">
            <summary>アクションを回数指定で繰り返すアクション。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.InnerAction">
            <summary>繰り返すアクション。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Times">
            <summary>繰り返す回数。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase,System.Int32)">
            <summary>コンストラクタ。
            </summary>
            <param name="inner_action">繰り返すアクション。</param>
            <param name="times">繰り返す回数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Run">
            <summary>このアクションをキックします。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Stop">
            <summary>このアクションを停止します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Update(System.Single)">
            <summary>Update 関数。</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager">
            <summary>ActionManager は Node のアクションを管理するシングルトンオブジェクトです。
            メインの Update ループは Director.Update() で呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.AddAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase,Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>ActionManager にアクションを追加します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAllActions">
            <summary>全てのアクションを削除します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAllActionsFromTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>引数 'target' のノードを含む、全てのアクションを削除します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            <summary>ひとつのアクションを削除します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveActionByTag(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>引数 tag からアクションを見つけ、削除します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.GetActionByTag(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            <summary>引数 tag からアクションを取得します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.NumRunningActions(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>引数'target'のノードを含む、アクションの数をカウントします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.NumRunningActions">
            <summary>実行中のアクションの総数をカウントします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.Dump">
            <summary>デバッグ情報を出力します。(将来変更される可能性があります)
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.Instance">
            <summary>ActionManager のシングルトン。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags">
            <summary>フラグのビットは Director.Instance.DebugFlags によって使用されます。
            デフォルトでは、全てオフです。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawTransform">
            <summary>それぞれのノードの変換行列を赤い矢印+緑の矢印として描画します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawPivot">
            <summary>すべてのノードの中心軸を表示します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawContentLocalBounds">
            <summary>GetlContentLocalBounds で定義されるノードの、コンテントローカル境界を表示します。
            コンテントローカル境界は親によって変換されることを注意してください。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawContentWorldBounds">
            <summary>GetlContentLocalBounds で定義されるノードの、コンテントワールド境界を表示します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawGrid">
            <summary>軸を黒、ルーラーを灰色で、デバッグワールドグリッドを描画します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.Navigate">
            <summary>デバッグカメラナビゲーションを使用可にします(カメラ2Dのみ動作します)。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Director">
            <summary>Director はシーンスタックを管理し、Scheduler と ActionManager の update ループを呼び出すシングルトンです。
            開発者自身が独自にメインループを実装する場合、開発者はUpdate / Render / PostSwap 関数をメインループの中で呼び出さなければなりません。
            また Director は、グラフィックスコンテキスト (GL) 、SpriteRenderer オブジェクト ( 主に内部的に利用されますが、開発者が直接使うこともできます )、 デバッグ情報を描画する DrawHelpers を保持します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.GL">
            <summary>グラフィックスコンテキスト + 行列スタック。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.SpriteRenderer">
            <summary>メインの SpriteRenderer オブジェクト。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.DrawHelpers">
            <summary>デバッグ描画のための描画ヘルパー。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.DebugFlags">
            <summary>ログ、デバッグ描画、カメラナビゲーションなどを有効にするデバッグフラグ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Initialize(System.UInt32,System.UInt32,Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>GameEngine2D を初期化します。
            </summary>
            <param name="sprites_capacity">SpriteRenderer のコンストラクタに渡されるスプライトの最大数。</param>
            <param name="draw_helpers_capacity">DrawHelpers で使用する頂点の最大数。</param>
            <param name="context">コアグラフィックスコンテキスト。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Terminate">
            <summary>GameEngine2D の終了処理。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.#ctor(System.UInt32,System.UInt32,Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>Director コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Dispose">
            <summary>Dispose の実装。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.ReplaceScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>現在のシーンを他のシーンに置き換えます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PushScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>新しいシーンをシーンスタックにプッシュします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PopScene">
            <summary>シーンスタック (前のシーン) のトップのシーンをポップします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Pause">
            <summary>一時停止します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Resume">
            <summary>
            </summary>再開します。
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Dump">
            <summary>デバッグ情報を出力します(内容は将来変更される場合があります)。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Update">
            <summary>メインのステップ関数です。1フレームに1度呼び出す必要があります。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Render">
            <summary>メインの描画関数です。1フレームに1度呼び出す必要があります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PostSwap">
            <summary>スワップコールバック関数。SwapBuffers() の後に呼び出す必要があります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.RunWithScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene,System.Boolean)">
            <summary>システムにどの Scene オブジェクトをスタートさせるのか伝えるために、開発者はこの関数を1度呼び出さなければなりません。
            </summary>
            <param name="scene">実行するシーン。</param>
            <param name="manual_loop">trueをセットすると、メインループを開始しません ( 開発者はそれを実装する必要があります)。</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.DirectorTime">
            <summary>Update が呼ばれるたびにインクリメントされるタイマー。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.Instance">
            <summary>Director のシングルトン。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.CurrentScene">
            <summary>現在実行している Scene オブジェクトを取得します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Label">
            <summary>テキストのプリミティブを描画します。2つのタイプのフォントデータをサポートしています: 
            - SpriteRenderer に埋め込まれたデバッグフォント。
            - FontMap オブジェクトを使ったもの。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node">
            <summary>ノードは全てのシーングラフノードの基底クラスです。標準的な2D変換行列、子のリスト、親へのハンドラを持ちます。ノードは多くとも1つの親をもつことができます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotate(System.Single)">
            <summary>
            引数 'angle' でオブジェクトを回転します。
            この関数は単に Rotation / Angle プロパティに影響を与えることに注意してください。( Pivot や Positionに関わらず、角度をインクリメントします。それらのすべては GetTransform() で結合されます。)
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotate(Sce.PlayStation.Core.Vector2)">
            <summary>単位ベクトル 'rotation' として渡される角度でオブジェクトを回転します。
            これで、回転中に必要な cos,sinを事前に計算できます。
            この関数は Rotation/Angle プロパティに影響を与えることに注意してください。( Pivot や Positionに関わらず、角度をインクリメントします。それらのすべては GetTransform() で結合されます。)
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.VertexZ">
            <summary>VectorZ は描画中、Z座標としての値のセットです。デフォルトでは、ortho ビューは Z範囲[-1, 1]を示し、任意で Camera.Znear と Camera.Zfar をセットします。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Visible">
            <summary>Visible が false の場合、このノードとその子は描画されません。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera">
            <summary>シーン内には通常ひとつのカメラしか配置されていないことの対応策として、 Node.Camera を使うことができます。
            Node.Camera が設定されている場合、このノードまでの全ての変換行列は無視され、Node.Camera は、このノードを描画するたびに、プッシュ/ポップされます。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Name">
            <summary>開発者用の識別子。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.#ctor">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PushTransform">
            <summary>ノードとその子を描画する前にこの関数が呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PopTransform">
            <summary>ノードとその子が描画されたあとにこの関数が呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnEnter">
            <summary>シーンが Director.Instance によって開始されたとき、この関数が呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnExit">
            <summary>シーンを終了したり、子が RemoveChild() や RemoveAllChildren() で明示的に削除されたとき、この関数が呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RegisterDisposeOnExitRecursive">
            <summary>すべてのサブツリー(このノードを含む)を再帰し、すべての破棄可能なオブジェクトに Dispose() 関数を登録します。
            実行しているオブジェクトが Dispose() してないことを最初に確認し、Cleanupを呼び出します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RegisterDisposeOnExit(System.IDisposable)">
            <summary>このノードの OnExit()関数内に、Dispose() の呼び出しを登録します。
            例えば、いくつかのオブジェクト(TextureInfo, FontMap, など)で Dispose() を行いたいときや、 Scene ノードを終了するときです。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.insert_child(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            	<summary>
            	</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.AddChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            <summary>子に描画プロパティを追加します。
            </summary>
            <param name="child">追加する子ノード。</param>
            <param name="order">追加するノードの描画プロパティ。描画順序は数値順に行われます。
            負の数のプロパティはこの子が親より前に描画されることを意味します。
            正の数のプロパティは親より後に描画されます。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.AddChild(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>現在の順序を使って、このノードに子を追加します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RemoveChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Boolean)">
            <summary>このノードから子を削除します。
            </summary>
            <param name="child">削除する子。</param>
            <param name="do_cleanup">削除するノードで Cleanup を呼び出す。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RemoveAllChildren(System.Boolean)">
            <summary>この関数は、全ての子に対して、RemoveChild( dispose_flags )を呼び出すのと、等価です。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ReorderChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            <summary>Children リスト内での、子の描画順序を変更します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Reorder(System.Int32)">
            <summary>このノードの描画順序の値を変更します。描画順序の詳細は AddChild を参考にしてください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Traverse(Sce.PlayStation.HighLevel.GameEngine2D.Node.DVisitor,System.Int32)">
            <summary>このノードの引数 'visitor'関数を呼び出し、かつこのノードの全ての子を再帰的に呼び出します。
            visitor が false を返した場合、巡回を中断します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DrawHierarchy">
            <summary>この関数は、 Director によってのみ呼び出されます。しかし、PushTransform, Draw, PopTransform は上書きすることができます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Draw">
            <summary>PushTransform / PopTransform 内の描画を実行します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Update(System.Single)">
            <summary>Update 関数。 Director は1フレームあたりと経過時間あたりで、この関数を何度呼び出すか決定します。
            現時点では、Update 関数は、フレーム経過時間をそのまま使って、一度呼び出されています。
            </summary>
            <param name="dt">1秒あたりの経過時間。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawContentLocalBounds">
            <summary>ノードのローカル空間内に、ローカルコンテントの境界と中心軸を描画します。
            普通は、この関数を上書きする必要はありません。
            GetlContentLocalBounds()を上書きし、例えば DebugFlags.DrawContentLocalBounds が設定されたとき、この関数はそれを表示します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawTransformScale">
            <summary>矢印を描画する DebugDrawTransform によって使用されるスケール係数。
            デフォルトではこの値は1.0fで、矢印の単位の長さは、スクリーン上で長さ1にあたります。
            スクリーン上で表示されるゲームの世界では大きすぎるので、長さ1の矢印は、1ピクセル以下であるかもしれず、それらが描画されていても見ることができないかもしれません。
            その場合、DebugDrawTransform でそれらをスケールすることができます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawTransform">
            <summary>親ノードのローカル空間内での、ローカル座標系を描画します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RunAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            <summary>このノードのアクションを開始します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopAllActions">
            <summary>このノードの全てのアクションを停止します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            <summary>このノードのアクションを停止します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopActionByTag(System.Int32)">
            <summary>tag の値で、このノード内で実行している最初のアクションを検索し、停止/削除します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetActionByTag(System.Int32,System.Int32)">
            <summary>このノード内で、実行している 'tag' の 'ith' アクションを返します。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.NumRunningActions">
            <summary>このノード内で、実行しているアクションの数を取得します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Cleanup">
            <summary>このノード内の、全てのアクションとスケジュールされた関数を再帰的に停止します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ScheduleUpdate(System.Int32)">
            <summary>スケジューラにこのノードのUpdate関数を登録します。update関数は全てのフレームで呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.UnscheduleUpdate">
            <summary>スケジューラからUpdate関数を削除します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Schedule(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Int32)">
            <summary>引数のノード関数 'func' をスケジュールします。関数は全てのフレームで呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ScheduleInterval(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Single,System.Int32)">
            <summary>引数のノード関数 'func' を、引数 'interval'の間隔で呼び出されるようにスケジュールします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Unschedule(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc)">
            <summary>引数のノード関数 'func'をアンスケジュールします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.UnscheduleAll">
            <summary>このノードに関連する全ての関数をアンスケジュールします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ResumeSchedulerAndActions">
            <summary>SchedulerPaused と ActionsPaused に true をセットします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PauseSchedulerAndActions">
            <summary>SchedulerPaused と ActionsPaused に false をセットします、。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTransform">
            <summary>親空間で表現される、このノードの変換行列を返します。
            ノードの変換行列は、位置、スケール、歪み、回転/角度/ RotationNormalize、ピボットプロパティでアクセスされるデータを用いて形成されます。変換行列は次のものと等価です:
            	  Matrix3.Translation( Position )
            	* Matrix3.Translation( Pivot )
            	* Matrix3.Rotation( Rotation )
            	* Matrix3.Scale( Scale )
            	* Matrix3.Skew( Skew )
            	* Matrix3.Translation( -Pivot )
            変換行列で返されるのは、純粋な2D変換であることに注意してください。
            VertexZ は PushTransform 関数で別々に適用されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTransformInverse">
            <summary>このノードの変換行列の逆行列を取得します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetWorldTransform">
            <summary>ワールド/親 シーン空間で表される、このノードの変換行列を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.CalcWorldTransformInverse">
            <summary>このノードのワールド変換行列の逆行列を取得します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.LocalToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>LocalToWorld は ( GetWorldTransform() * local_point.Xy1 ).Xy と同じものを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.WorldToLocal(Sce.PlayStation.Core.Vector2)">
            <summary>( CalcWorldTransformInverse() * world_point.Xy1 ).Xy と同じものを返します。
            ノードのローカル空間はその幾何情報を定義した空間です。
            すなわち、1レベル下の GetWorldTransform() 。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            <summary>ノード空間内(再帰なし)で、このノードのみのコンテント/幾何情報の境界を取得します。
            任意のコンテントを持たないノードは単に false を返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetContentWorldBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            <summary>ワールド空間(再帰なし)で、このノードのみのコンテントの境界を取得します。
            任意のコンテントを持たないノードは単に false を返します。その場合、境界は扱えません。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.IsWorldPointInsideContentLocalBounds(Sce.PlayStation.Core.Vector2)">
            <summary>引数'world_position'が、向きをもったコンテントの境界ボックス内にある場合、trueを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.FindParentPlane(Sce.PlayStation.Core.Matrix4@)">
            <summary>Plane3D ノードが見つかるまで、親の階層構造に従い、
            Plane3D の平面行列に 'mat' をセットします。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>Director.Instance.CurrentScene.Camera.NormalizedToWorld に似ていますが、シーングラフ内の祖先に Plane3D が存在したときのケースを扱います。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTouchPos(System.Int32,System.Boolean)">
            <summary>Like Director.Instance.CurrentScene.Camera.GetTouchPos に似ていますが、シーングラフ内の祖先に Plane3D が存在したときのケースを扱います。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Position">
            <summary>変換行列の構築に関しての詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotation">
            <summary>Rotation は (cos,sin)の単位ベクトルとして直接格納されます。
            変換行列の構築に関しての詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.RotationNormalize">
            <summary>RotationNormalize は Rotation に似ていますが、正規化を行います。
            これにより、蓄積される計算誤差で単位ベクトルがドリフトするのを防ぎます。
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Angle">
            <summary>このプロパティを使うと、回転を角度として set/getすることができます。
            この処理は重く、角度の不連続の問題を引き起こします。角度は常に格納され、かつ -pi,piの範囲で値を返します。
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Scale">
            <summary>
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Skew">
            <summary>
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Pivot">
            <summary>
            Pivot はスケールや回転に使用される中心軸です。そして Node のローカル '正規化' 空間として表現されます。
            例えば、スケールに関わりなく、(0.5, 0.5)は常にオブジェクトの中心です。
            変換行列の構築の詳細は、GetTransform() を参考にしてください。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Parent">
            <summary>シーングラフ内の親ノードです。ひとつのノードは、多くともひとつの親ノードの子になります。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Children">
            <summary>子ノードのリスト。
            </summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.GameEngine2D.Node.AdHocDraw">
            <summary>セットされた場合、baseの描画関数内でAdHocDrawが呼び出されます。
            描画関数の定義のためにクラスを派生させずに、シンプルなシーンをセットアップするために使用されます。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera2D">
            <summary>Camera2D としてのカメラを取得するためのショートカット。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera3D">
            <summary>Camera3D としてのカメラを取得するためのショートカット。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.IsRunning">
            <summary>このノードが OnEnter()/OnExit() 呼び出しの合間である時、このプロパティは true になります。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Order">
            <summary>ReorderChild() または AddChild() でセットされた描画順序の値。
            </summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnExitEvents">
            <summary>OnExit が呼び出された時、実行するイベントのリスト。
            実行されたあと、リストはクリアされます。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.ActionsPaused">
            <summary>このノードに関連する全てのアクションを、このフラグのon/offで一時停止させることができます。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.SchedulerPaused">
            <summary>このノードに関連するスケジュールされた全ての関数を、このフラグのon/offで一時停止させることができます。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DDraw">
            <summary>AdHocDraw で使用されるデリゲート型。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DOnExitEvent">
            <summary>OnExit() イベントのデリゲート。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DVisitor">
            <summary>巡回メソッドに渡す関数の型。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Text">
            <summary>表示するテキスト。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Color">
            <summary>テキストの色。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.BlendMode">
            <summary>テキストのブレンドモード。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.HeightScale">
            <summary>描画中、文字のピクセル単位の高さに適用されるスケール係数。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.FontMap">
            <summary>この Label を表示するのに使用されるフォントマップ(文字のセットに一致する必要があります)。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Shader">
            <summary>開発者は、任意のシェーダーをセットすることができます。
            Label クラスは開発者がセットしたシェーダーを 破棄しないので注意してください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.#ctor">
            <summary>コンストラクタ。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.HighLevel.GameEngine2D.Label.#ctor(System.String,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap)" -->
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.Draw">
            <summary>描画関数。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            <summary>ローカル空間での、テキストを囲む Bounds2 オブジェクトを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.GetlContentLocalBounds">
            <summary>ローカル空間での、テキストを囲む Bounds2 オブジェクトを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Label.FontHeight">
            <summary>
            </summary>ピクセル単位でのフォントの文字の高さ。
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Label.CharWorldHeight">
            <summary>ワールド座標系 = FontHeight * HeightScale での文字の高さ。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D">
            <summary>Plane3D ノードは、シーングラフ内で、ある程度まで3Dの方向性を許可します。
            それは、タッチ座標を扱う方法をいくぶんか複雑にします。なのでシーン階層に Plane3D を含んでいる場合、直接 Director.Instance.CurrentScene.Camera.GetTouchPos() を使う代わりに、Plane3D 空間(すべてサブノード)で点を得るのに Node.GetTouchPos() を使うことを確認してください。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.ModelMatrix" -->
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.#ctor">
            <summary>コンストラクタ。デフォルトはz=0 平面(単位行列)。
            詳細は  ModelMatrix のコメントを参照してください。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.#ctor(Sce.PlayStation.Core.Matrix4)">
            <summary>コンストラクタ。
            </summary>
            <param name="modelmatrix">平面にセットする ModelMatrix の値。
            詳細は ModelMatrix のコメントを参照してください。
            </param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.FindParentPlane(Sce.PlayStation.Core.Matrix4@)">
            <summary>注意: FindParentPlane は最初に見つかった Plane3D で停止します。
            ツリーの枝で、複数の Plane3D ノードを持っていないという前提です。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Scene">
            <summary>Scene クラスはシーングラフのルートノードタイプです。
            シーンスタックを操作するため Director シングルトンを使い、現在のシーンは Director.Instance.CurrentScene でアクセスします。
            2つのシーンが画面遷移のためブレンディングされるときを除き、アクティブになるシーンはひとつだけです。
            また、シーンはメインカメラを保持しています。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.NoClear">
            <summary>通常、シーンは内部的な描画関数内でスクリーンをクリアします。
            開発者はこの NoClear を trueに設定することで、自動クリアを抑制することができます。
            自動クリアを無効にした場合、いくつかの TransitionScene の効果が正常に動作しないことに注意してください。
            ( いくつかの画面遷移は、2つの遷移するシーンを、ブレンドのためオフスクリーンで描画する必要があるためです。)
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.DrawGridStep">
            <summary>DebugFlags.DrawGrid が Director.Instance.DebugFlags に設定されているときに描画される、デバッググリッドのセルサイズ。
            値が -1.0f（デフォルト）である場合、デバッググリッドセルのサイズが、 DrawGridAutoStepMaxCells での分割数以上を表示しないよう、自動的に調整されます。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.DrawGridAutoStepMaxCells">
            <summary>DrawGridStepが-1に設定されている場合、デバッググリッドのセルサイズは自動的に計算されます。
            ズームアウトすると、DrawGridAutoStepMaxCellsの分割よりも多くならないように、2のべき乗でセルサイズが増加します。
            警告：あまりにも多くこの値を増やすと、非常に多くの線が描画されることにつながり、 DrawHelpers のイミーディエイトモードで使用する頂点配列をオーバーフローしてしまう可能性があります。
            自動的に計算されたステップサイズが 2 ^ 15より大きくなった場合、デバッググリッドの描画を停止します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.#ctor">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.OnEnter">
            <summary>シーンが Director によって開始された時、この関数が呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.OnExit">
            <summary>シーンの OnExit はデフォルトで Cleanup() 呼び出します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.IsTransitionScene">
            <summary>シーンが TransitionScene タイプである場合、trueを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.draw_content_world_bounds">
            Render all nodes's content bounding boxes in world space. This is mostly
            to debug GetContentWorldBounds. Note that this  function ignores Plane3D 
            at the moment, so if your scene has any Plane3D, the debug primitive 
            drawn will look confusing.
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Scene.SceneTime">
            <summary>シーンの開始時から経過した時間の総計。秒単位。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc">
            <summary>デリゲート型の関数です。Scheduler は Node.Updateのシグニチャに一致するように追加してください。
            関数名の検索と削除を行うため、匿名の関数は使用できません。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler">
            <summary>Scheduler は、開発者が登録する update 関数に関連した Node を管理するシングルトンです。
            スケジュールされた関数は毎フレーム呼び出されます。または、開発者は特別な間隔で呼び出すこともできます。
            Scheduler の update ループは Director.Update() の内部で呼び出されます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Schedule(Sce.PlayStation.HighLevel.GameEngine2D.Node,Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Single,System.Boolean,System.Int32)">
            <summary>スケジューラに Node 関数を登録します。
            </summary>
            <param name="target">スケジュール関数を登録する対象ノード。</param>
            <param name="func">スケジュール関数。</param>
            <param name="interval">関数が呼び出される期間 (秒単位)。0なら毎フレーム呼び出されます。</param>
            <param name="paused">スケジューラを一時停止します。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Unschedule(Sce.PlayStation.HighLevel.GameEngine2D.Node,Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc)">
            <summary>スケジューラから関数を削除します。
            </summary>
            <param name="target">削除する関数をもった対象ノード。</param>
            <param name="func">削除する関数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleAll(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>スケジューラから指定されたノードに関連する全ての関数を削除します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleAll">
            <summary>スケジューラから全ての関数を削除します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.ScheduleUpdateForTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32,System.Boolean)">
            <summary>ノードの Update 関数を毎フレーム呼び出すようにスケジュールします。
            </summary>
            <param name="target">対象ノード。</param>
            <param name="priority">スケジューラ内の Update 関数の優先順位。</param>
            <param name="paused">一時停止状態にします。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleUpdateForTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>スケジューラから Node の Update 関数を削除します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Dump">
            <summary>デバッグ情報を出力します。(将来変更される可能性があります)
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Instance">
            <summary>スケジューラのシングルトン。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase">
            <summary>単一のスプライトノードの規定クラス。抽象クラスです。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Quad">
            <summary>ノードのローカル空間内のスプライト幾何情報。TRS は矩形の向きを定義します。</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.FlipU">
            <summary>trueなら、スプライトのUVが水平方向に反転します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.FlipV">
            <summary>trueなら、スプライトのUVが垂直方向に反転します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Color">
            <summary>スプライトの色。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.BlendMode">
            <summary>ブレンドモード。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.TextureInfo">
            <summary>このプロパティは、スプライトが別個 ( つまり SpriteList でない) に描画されるときのみ、使用されます。
            スプライトが SpriteList で使用されている場合、後の SpriteList の TextureInfo が使用されます。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Shader">
            <summary>シェーダー。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CalcSizeInPixels">
            <summary>ピクセル単位でこのスプライトのサイズを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.#ctor">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Draw">
            <summary>描画関数 ( 処理が重い、別個の描画 )。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            <summary>ローカルの境界は、このスプライトのクワッドを含む最小の Bounds2 です。回転がない場合、クワッドそれ自体 ( スプライトの矩形) と同じです。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.GetlContentLocalBounds">
            <summary>ローカルの境界は、このスプライトのクワッドを含む最小の Bounds2 です。回転がない場合、クワッドそれ自体 ( スプライトの矩形) と同じです。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.MakeFullScreen">
            <summary>スクリーン全体を覆うようにスプライトのクワッドを延ばします。 CurrentScene.Camera を使用しているため、シーンを set/started している必要があります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CenterSprite">
            <summary>スプライトの中心が Node の中心になるように、スプライトの幾何情報を変更します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CenterSprite(Sce.PlayStation.Core.Vector2)">
            <summary>スプライトの幾何情報の中心を変更します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV">
            <summary>SpriteUVは、手動で UV を設定するスプライトです。
            UV は TRS オブジェクトとして格納されます。
            SpriteUVを別個で描画すると、処理が重くなるので注意してください。可能な限り、SpriteList の子として利用してください。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.UV">
            <summary>TRS として UV を指定します。UV領域内で矩形の向きを定義できます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.#ctor">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.CalcSizeInPixels">
            <summary>UVとテクスチャの寸法に基づいて、ピクセル単位で対応するサイズを返します。 
            例えば、bob.Quad.S = bob.CalcSizeInPixels(). といった処理が行えます。
            UV が Quad0_1 ( 0,1 単位クワッド ) の場合、ピクセル単位のテクスチャサイズを返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile">
            <summary>SpriteTile は、TextureInfo 内のタイルインデックス (1D または 2D) を指定する形式のスプライトです。
            別個で描画すると、処理が重くなるので注意してください。可能な限り、SpriteList の子として利用してください。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.TileIndex2D">
            <summary>TileIndex2D はこのスプライトに使われる UV を定義します。
            2次元でタイルのインデックスを指定します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor">
            <summary>コンストラクタ。
            TileIndex2D はデフォルトで (0,0)にセットされます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>コンストラクタ。
            TileIndex2D はデフォルトで (0,0)にセットされます。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>コンストラクタ。
            TileIndex2D はデフォルトで (0,0)にセットされます。
            </summary>
            <param name="texture_info">タイルのテクスチャオブジェクト。</param>
            <param name="index">2次元のタイルインデックス。(0,0) は左下のタイルです。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,System.Int32)">
            <summary>コンストラクタ。
            </summary>
            <param name="texture_info">タイルのテクスチャオブジェクト。</param>
            <param name="index">1次元のタイルインデックス。インデックスは左下のタイルから始まります(2Dでは (0,0)にあたる)。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.CalcSizeInPixels">
            <summary>UVとテクスチャのサイズに基づき、ピクセル単位で相当するサイズを返します。
            例えば、bob.Quad.S = bob.CalcSizeInPixels()のように使います。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.TileIndex1D">
            <summary>TileIndex2D の代わりに、アニメーションの用途などで1次元のインデックスを使うこともできます。
            その場合には、set/get の計算がTextureInfoに依存してしまうので、TextureInfoが正しく設定されている必要があります。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList">
            <summary>描画呼び出しやステートのセットアップの呼び出し回数を削減するため、スプライトを一括して描画します。
            SpriteUV や SpriteTile オブジェクトを AddChild() で SpriteList の子として追加するだけで、一括描画を可能にします。
            ただし、スプライトの TextureInfo, BlendMode, Color のプロパティは無視されます。それらのプロパティは親の SpriteList に依存します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.EnableLocalTransform">
            <summary>EnableLocalTransform フラグがtrueの場合、子のスプライトのローカル変換行列が使われます。
            その場合、頂点は CPU 上で変換します。
            CPU処理の節約のため、ローカル変換行列を無視するために、この挙動を OFF にすることができます。
            その場合、スプライトの位置はクワッドに依存します。
            EnableLocalTransform=false の場合、Position, Scale, Skew, Pivot は無視されます。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.Color">
            <summary>Children リスト内の全てのスプライトで使用される色。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.BlendMode">
            <summary>Children リスト内の全てのスプライトで使用されるブレンドモード。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.TextureInfo">
            <summary>Children リスト内の全てのスプライトで使用される TextureInfo オブジェクト。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.Shader">
            <summary>Children リスト内の全てのスプライトで使用されるシェーダー。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>コンストラクタ。
            TextureInfo はコンストラクタで必ず指定しなければなりません。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile">
            <summary>RawSpriteTileList で使用される構造体。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.Quad">
            <summary>スプライトの幾何情報 (位置、回転、スケールで矩形を定義します)。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.TileIndex2D">
            <summary>タイルインデックス。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.FlipU">
            <summary>trueの場合、スプライトのUVは水平方向に反転します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.FlipV">
            <summary>trueの場合、スプライトのUVは垂直方向に反転します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Boolean,System.Boolean)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList">
            <summary>描画呼び出しや、ステートのセットアップの回数を減らすため、スプライトを一括して描画します。
            SpriteListとは違い、Node オブジェクトのリストを保持する代わりに、より軽いRawSpriteTileのリストを保持します。
            これは Node として利用可能な SpriteRenderer のラップです。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Sprites">
            <summary>描画可能な RawSpriteTile オブジェクトのリスト。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Color">
            <summary>Children リスト内の全てのスプライトで使用される色。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.BlendMode">
            <summary>Children リスト内の全てのスプライトで使用されるブレンドモード。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.TextureInfo">
            <summary>Children リスト内の全てのスプライトで使用される TextureInfoオブジェクト。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Shader">
            <summary>Children リスト内の全てのスプライトで使用されるシェーダー。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>コンストラクタ。
            TextureInfo はコンストラクタで必ず指定しなければなりません。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Draw">
            <summary>描画関数。スプライトリスト内で全てのスプライトを描画します。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.CalcSizeInPixels" -->
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene">
            <summary>画面遷移ノードのための基底クラス。これらのノードは2つのシーンを視覚的に遷移させます。
            遷移中は、両方のシーンを Updateし、描画します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.PreviousScene">
            <summary>遷移前のシーン。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.NextScene">
            <summary>遷移先のシーン。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.Duration">
            <summary>秒単位での遷移間隔。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.KeepRendering">
            <summary>trueの場合、遷移中、両方のシーンを更新します (処理は重くなります)。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.IsTransitionScene">
            <summary>TransitionSceneから派生する全てのシーンで、trueを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.OnEnter">
            <summary>
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.FadeCompletion">
            <summary>
            </summary>フェイドの完了度合い。[0,1]の範囲。
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase">
            <summary>フェイドの画面遷移を行う基底クラス。
            両方のシーンをオフスクリーンで描画する必要があります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>コンストラクタ。</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.Terminate">
            <summary>静的なリソースを破棄します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.OnEnter">
            <summary>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.Draw">
            <summary>描画関数。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DTween">
            <summary>デリゲート型。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade">
            <summary>TransitionSolidFade は、次のシーンをフェイドする前に、現在のシーンを黒にフェイドします。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.Tween">
            <summary>DTween
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.Draw">
            <summary>描画関数。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade">
            <summary>TransitionCrossFade は 2つのシーンをクロスフェードさせるために、ブレンドを使います。
            フェイドのコントロールに DTween を使うことができます。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.Tween">
            <summary>DTween</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.Draw">
            <summary>描画関数。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade">
            <summary>TransitionDirectionalFade は2つのシーンをクロスフェードさせるのに、変換ブレンドマスクを使います。
            クロスフェードのラインは、開発者が指定した方向に沿って動作し、古いシーンが新しいシーンに置き換わります。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Width">
            <summary>遷移ゾーンの幅(正規化された値。おおむね 0,1の範囲。)
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Direction">
            <summary>移動方向。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Tween">
            <summary>DTween
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Terminate">
            <summary>静的リソースの破棄。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Draw">
            <summary>描画関数。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.SpriteShaderDirFade.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem">
            <summary>シンプルなパーティクルシステムエフェクト。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.TextureInfo">
            <summary>このパーティクルシステムのテクスチャ情報。全てのパーティクルは同じイメージを使用します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Color">
            <summary>パーティクルシステムのためのグローバルな乗算色。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.BlendMode">
            <summary>パーティクルによって使用されるブレンドモード。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Emit">
            <summary>パラメータは、パーティクルの放出とパラメータの初期化の管理に使用します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Simulation">
            <summary>シミュレーションのコントロールに使われるパラメータ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.RenderTransform">
            <summary>パーティクルシステムを描画するためのモデルビュー行列
            </summary>RenderTransform は ローカルの幾何情報を描画するため、基底クラスの Node.GetTransform() を上書きします。
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.m_default_shader">
            particle system's default shader (texture * color).
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Shader">
            <summary>開発者がセットすることのできる外部シェーダー。
            Label クラスは開発者がセットしたシェーダーを破棄しません。(ParticleSystem.DefaultShaderは除く)
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.#ctor(System.Int32)">
            <summary>コンストラクタ。
            </summary>
            <param name="max_particles">パーティクルシステムのパーティクルの最大数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Terminate">
            <summary>静的リソースの破棄。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.CreateParticle(System.Boolean)">
            <summary>Emit パラメータを使って自動で作成されるパーティクル。
            必要に応じて作成でき、開発者がパーティクルを初期化できます。
            </summary>
            <param name="skip_auto_init">
            falseなら、作成されたパーティクルを Emit パラメータを使って初期化します。パーティクルは毎フレーム、ランダムに作成されます。
            ( 開始時にランダムの分散を使用した場合)。
            </param>
            <returns>作成されたパーティクルのハンドラ。</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Update(System.Single)">
            <summary>Update関数。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Draw">
            <summary>描画関数。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.MaxParticles">
            <summary>システムが取り扱うパーティクルの数。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticlesCount">
            <summary>生存しているパーティクルの数。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IsFull">
            <summary>アクティブなパーティクルが最大数に達すると、trueを返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.DefaultShader">
            <summary>パーティクルシステムのデフォルトシェーダー ( texture * color )。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Disposed">
            <summary>このオブジェクトが破棄されていれば、trueを返します。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticleShaderDefault">
            <summary>デフォルトのシェーダー。テクスチャの色は変調されます。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader">
            <summary>ParticleSystem のシェーダーインターフェース。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.SetMVP(Sce.PlayStation.Core.Matrix4@)">
            <summary>Projection * View * Model 行列の設定。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.SetColor(Sce.PlayStation.Core.Vector4@)">
            <summary>グローバルカラーの設定。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.GetShaderProgram">
            <summary>シェーダーの ShaderProgram オブジェクトを返します。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticleShaderDefault.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle">
            <summary>CreateParticle で返される、パーティクルオブジェクト。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Position">
            <summary>位置。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Velocity">
            <summary>速度。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Age">
            <summary>年齢 (Age)。 ( Age >= LifeSpan でパーティクルは死亡します)。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.LifeSpan">
            <summary>寿命。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.LifeSpanRcp">
            <summary>寿命 (LifeSpan) の逆数。自動の初期化を使わない場合、この値に1.0f/LifeSpanをセットすることを確認してください。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Angle">
            <summary>回転角。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.AngularVelocity">
            <summary>角速度。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ScaleStart">
            <summary>Age=0.0時のスケール。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ScaleDelta">
            <summary>ScaleDelta は ( scale_end - ScaleStart ) / LifeSpan で初期化する必要があります。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ColorStart">
            <summary>Age=0.0時の色。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ColorDelta">
            <summary>ColorDelta は ( color_end - ColorStart ) / LifeSpan で初期化する必要があります。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ToString">
            <summary>このパーティクルの文字列表現を返します。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Scale">
            <summary>スケール。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Color">
            <summary>色。
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Dead">
            <summary>パーティクルが生きているかチェックします。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams">
            <summary>このクラスは、パーティクルの初期化に必要な全てのパラメータを再グループ化します。
            ランダムの範囲を与えるため、多くの値は分散しています(-Var の接尾辞)。
            分散が "相対"値（-RelVarの接尾辞）である場合、0,1の間の値が期待されています。
            例: 0.2f は、作成時に対応する値は -+20%でランダム化されることを意味します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Transform">
            <summary>生成される位置・速度・角度はこの行列によって変換されます。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.TransformForVelocityEstimate">
            <summary>速度と角速度の推定に使用する変換行列。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ForwardMomentum">
            <summary>作成したパーティクルに追加する速度のコントロール。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularMomentun">
            <summary>作成したパーティクルに追加する角速度のコントロール。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.WaitTime">
            <summary>次のパーティクルが生成されるまで待機する時間。秒単位。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.WaitTimeRelVar">
            <summary>待機時間の分散 (相対)。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.LifeSpan">
            <summary>作成されたパーティクルの寿命。秒単位。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.LifeSpanRelVar">
            <summary>寿命の長さの分散(相対)。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Position">
            <summary>作成されたパーティクルの初期位置 ( InLocalSpaceも参考にしてください )。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.PositionVar">
            <summary>位置の分散。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Velocity">
            <summary>作成したパーティクルの初期速度 ( InLocalSpaceも参考にしてください )。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.VelocityVar">
            <summary>速度の分散。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularVelocity">
            <summary>作成したパーティクルの初期角速度。ラジアン単位 ( InLocalSpaceも参考にしてください )。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularVelocityVar">
            <summary>AngularVelocityの分散。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Angle">
            <summary>作成したパーティクルの初期回転角度。ラジアン単位 ( InLocalSpaceも参考にしてください )。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngleVar">
            <summary>角度の分散。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorStart">
            <summary>作成したパーティクルの初期色。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorStartVar">
            <summary>初期色の分散。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorEnd">
            <summary>寿命に達したときのパーティクルの色。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorEndVar">
            <summary>ColorEndの分散。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleStart">
            <summary>作成したパーティクルの初期サイズ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleStartRelVar">
            <summary>ScaleStartの分散。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleEnd">
            <summary>寿命に達したときの粒子のサイズ。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleEndRelVar">
            <summary>ScaleEndの分散。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.#ctor">
            <summary>コンストラクタ。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ToString(System.String)">
            <summary>EmitterParams の文字列表現を返します。
            </summary>
            <param name="prefix">それぞれの行の最初に追加される接頭辞の文字列。</param> 
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams">
            <summary>SimulationParams は、Update と Draw で必要とされる全てのパラメータを、再グループ化します。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Friction">
            <summary>全てのパーティクルに適用される摩擦。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.GravityDirection">
            <summary>重力の方向 (単位ベクトル)。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Gravity">
            <summary>重力量。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.WindDirection">
            <summary>風の方向。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Wind">
            <summary>風量。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.BrownianScale">
            <summary>各パーティクルに追加するブラウン運動の量です。
            各パーティクルに対し、毎フレーム、異なったランダム方向を風に追加します。
            ガス/塵のエフェクトを追加することができます。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Fade">
            <summary>Fade の値は、0,1の範囲の値です。この値は、パーティクルがフェイドイン/フェイドアウトする速さ(つまり死亡する時期)をコントロールします。
            パーティクルの色のアルファ値は、対称フェイドカーブで乗算します。
            Fade はフェイドスタートとフェイドエンドの長さです。
            例えば、Fade が0.25であれば、粒子はその年齢の25％で完全に見えるようになります。
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Particles">
            <summary>ひとつの ParticleSystem を シーングラフノードにラップしたパーティクルクラス。
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Particles.ParticleSystem">
            <summary>この Particles によって使用される、実質的な ParticleSystem オブジェクト。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.#ctor(System.Int32)">
            <summary>コンストラクタ。コンストラクタが ScheduleUpdate() を呼び出すことに注意してください。
            </summary>
            <param name="max_particles">このパーティクルシステムの最大パーティクル数。</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Update(System.Single)">
            <summary>Update関数。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Draw">
            <summary>描画関数。
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Dispose">
            <summary>Disposeの実装。
            </summary>
        </member>
    </members>
</doc>
