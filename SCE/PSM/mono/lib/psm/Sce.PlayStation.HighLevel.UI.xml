<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sce.PlayStation.HighLevel.UI</name>
    </assembly>
    <members>
        <member name="T:Sce.PlayStation.HighLevel.UI.AnimationImageBox">
            <summary>Animation display widgets by image switching</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Widget">
            <summary>Base class of widget</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.Dispose">
            <summary>Frees the unmanaged resources held by this widget and child widgets.</summary>
            <remarks>Recursively frees this widget and all widgets in and below its tree as well as all UIElements that belong to the RootUIElement tree of each.
            Once Dispose() has been called for a widget, it cannot be reused.
            If widgets/UIElements that do not belong to a tree and other objects that require Dispose have been created with widget derivative classes, DisposeSelf() must be overridden and Dispose must be called for them.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.Dispose(System.Boolean)">
            <summary>Frees the unmanaged resources held by this widget and child widgets.</summary>
            <remarks>Deletes itself from a parent widget and recursively calls DisposeSelf() for child widgets.
            When implementing Dispose with a derivative class, override DisposeSelf().</remarks>
            <param name="disposing">true when called from Dispose()</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.DisposeSelf">
            <summary>Frees the unmanaged resources held by this widget</summary>
            <remarks>This method is recursively called from Dispose() for the child widgets.
            If widgets/UIElements that do not belong to a tree and other objects that require Dispose have been created with widget derivative classes, this method must be overridden and Dispose must be called for them.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.SetPosition(System.Single,System.Single)">
            <summary>Sets the position in the parent coordinate system.</summary>
            <param name="x">X coordinate in the parent coordinate system</param>
            <param name="y">Y coordinate in the parent coordinate system</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.SetSize(System.Single,System.Single)">
            <summary>Sets the size.</summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.AddChildFirst(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the beginning.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the beginning if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.AddChildLast(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the end.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the end if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.InsertChildBefore(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately in front of the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="nextChild">Child widget immediately after the inserted child widget</param>
            <remarks>Moves it immediately in front of the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.InsertChildAfter(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately after the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="prevChild">Child widget immediately in front of the inserted child widget</param>
            <remarks>Moves it immediately after the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.RemoveChild(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Deletes the specified child widget.</summary>
            <param name="child">Child widget to be deleted</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.OnKeyEvent(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Key event handler</summary>
            <param name="keyEvent">Key event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.OnPreviewKeyEvent(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Advance key event handler</summary>
            <param name="keyEvent">Key event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.SearchNextTreeNodeFocus(System.Boolean)">
            <summary>Searches for the next item that has focus in the order of the widget tree</summary>
            <remarks>Searches from the start when the end of the tree is reached</remarks>
            <param name="reverse">true: Search in reverse order</param>
            <returns>Next widget</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.SetFocus(System.Boolean)">
            <summary>Places focus on self</summary>
            <param name="active">true: Enables focus false: Keeps the status</param>
            <remarks>Sets the focus regardless of the Focusable, Visible, and Enabled properties and whether it is within the display range.
            If an affiliated scene is not the target focus scene, focus does not become active even when active is set to true.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.belongTo(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Obtains whether it is a descendant of the specified widget</summary>
            <remarks>If self is specified, then false</remarks>
            <param name="w">Widget to be the parent</param>
            <returns>true: Affiliated</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.SearchNextFocus(Sce.PlayStation.HighLevel.UI.FourWayDirection)">
            <summary>Searches for the widget in focus next</summary>
            <param name="direction">Direction of directional buttons</param>
            <returns>If not found, null.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.SearchNextFocusFromChild(Sce.PlayStation.HighLevel.UI.FourWayDirection,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Searches for the widget in focus next from among own child widgets (including descendants)</summary>
            <remarks>Self is excluded from the search target.</remarks>
            <param name="direction">Direction of directional buttons</param>
            <param name="currentFocusWidget">Widget currently in focus</param>
            <returns>If not found, null.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.OnMotionEvent(Sce.PlayStation.HighLevel.UI.MotionEvent)">
            <summary>Motion event handler</summary>
            <param name="motionEvent">Motion event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.OnResetState">
            <summary>Status reset handler</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.HitTest(Sce.PlayStation.Core.Vector2)">
            <summary>Obtains whether this widget hits with the specified coordinates</summary>
            <param name="screenPoint">Position in the screen coordinate system</param>
            <returns>If hit, then true. If not hit, then false.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.Render">
            <summary>Renders a scene graph.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.ResetState(System.Boolean)">
            <summary>Resets the status of all widgets for under self.</summary>
            <param name="includeSelf">If self is reset, then true. If self is not reset, then false.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.ConvertScreenToLocal(Sce.PlayStation.Core.Vector2)">
            <summary>Converts the specified coordinates from the screen coordinate system to the local coordinate system.</summary>
            <returns>Coordinates converted to the local coordinate system</returns>
            <param name="screenPoint">Screen coordinate system coordinates</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.ConvertScreenToLocal(System.Single,System.Single)">
            <summary>Converts the specified coordinates from the screen coordinate system to the local coordinate system.</summary>
            <returns>Coordinates converted to the local coordinate system</returns>
            <param name="screenX">Screen coordinate system coordinate X</param>
            <param name="screenY">Screen coordinate system coordinate Y</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.ConvertLocalToScreen(Sce.PlayStation.Core.Vector2)">
            <summary>Converts the specified coordinates from the local coordinate system to the screen coordinate system.</summary>
            <returns>Coordinates converted to the screen coordinate system</returns>
            <param name="localPoint">Local coordinate system coordinates</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.ConvertLocalToScreen(System.Single,System.Single)">
            <summary>Converts the specified coordinates from the local coordinate system to the screen coordinate system.</summary>
            <returns>Coordinates converted to the screen coordinate system</returns>
            <param name="localX">Local coordinate system coordinate X</param>
            <param name="localY">Local coordinate system coordinate Y</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.ConvertLocalToOtherWidget(Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Converts the specified coordinates from the local coordinate system of itself to the local coordinate system of another widget.</summary>
            <returns>Coordinates converted to the targetWidget local coordinate system</returns>
            <param name="targetWidget">Conversion destination widget</param>
            <param name="localPoint">Self local coordinate system coordinates</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.ConvertLocalToOtherWidget(System.Single,System.Single,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Converts the specified coordinates from the local coordinate system of itself to the local coordinate system of another widget.</summary>
            <returns>Coordinates converted to the targetWidget local coordinate system</returns>
            <param name="targetWidget">Conversion destination widget</param>
            <param name="x">Self local coordinate system coordinate X</param>
            <param name="y">Self local coordinate system coordinate Y</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.SetupClipArea(System.Boolean)">
            <summary>Constructs the final clip area.</summary>
            <returns>If a display area exists, then true. If a display area does not exist, then false.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.SetupFinalAlpha">
            <summary>Calculates the final alpha value.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.RenderToTexture(Sce.PlayStation.Core.Graphics.Texture2D)">
            <summary>Renders to the texture.</summary>
            <param name="texture">2D texture</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.RenderToTexture(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.Core.Matrix4)">
            <summary>Renders to the texture.</summary>
            <param name="texture">2D texture</param>
            <param name="transform">Conversion matrix</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.RenderToFrameBuffer(Sce.PlayStation.Core.Graphics.FrameBuffer)">
            <summary>Renders to the frame buffer.</summary>
            <param name="frameBuffer">FrameBuffer</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.RenderToFrameBuffer(Sce.PlayStation.Core.Graphics.FrameBuffer,Sce.PlayStation.Core.Matrix4)">
            <summary>Renders to the frame buffer.</summary>
            <param name="frameBuffer">FrameBuffer</param>
            <param name="transform">Conversion matrix</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.AddGestureDetector(Sce.PlayStation.HighLevel.UI.GestureDetector)">
            <summary>Adds a gesture detection mechanism.</summary>
            <param name="gestureDetector">Gesture detection mechanism</param>
            <exception cref="T:System.ArgumentNullException">GestureDetector is null</exception>
            <returns>Whether addition was possible or not</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.RemoveGestureDetector(Sce.PlayStation.HighLevel.UI.GestureDetector)">
            <summary>Deletes the gesture detection mechanism.</summary>
            <param name="gestureDetector">Gesture detection mechanism</param>
            <exception cref="T:System.ArgumentNullException">GestureDetector is null</exception>
            <returns>Whether deletion was possible or not</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.ToString">
            <summary>Returns a character string</summary>
            <returns>Character string of "Name: model name" (when Name property is set)</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.OnFocusChanged(Sce.PlayStation.HighLevel.UI.FocusChangedEventArgs)">
            <summary>Called when this widget obtains or loses focus</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Widget.OnPressStateChanged(Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs)">
            <summary>Called when the press status changes</summary>
            <param name="e">Event argument</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Disposed">
            <summary>Obtains whether Dispose is already performed</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Name">
            <summary>Obtains and sets the name of the widget.</summary>
            <remarks>This property can be used arbitrarily with applications.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.RootUIElement">
            <summary>Obtains the root of the element tree.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.X">
            <summary>Obtains and sets the X coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Y">
            <summary>Obtains and sets the Y coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Transform3D">
            <summary>Obtains and sets the transformation matrix to the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Alpha">
            <summary>Obtains and sets the transparency. (0 - 1)</summary>
            <remarks>Multiplies the transparency by all child widgets and displays it.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.PivotType">
            <summary>Obtains and sets the origin of the widget.</summary>
            <remarks>The point that serves as the center when moving, rotating, and scaling.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.ZSort">
            <summary>Obtains and sets whether to Z sort.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.ZSortOffset">
            <summary>Obtains and sets the Z-sort offset.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Anchors">
            <summary>Obtains and sets the area to fix when resizing the parent.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Visible">
            <summary>Obtains and sets whether to display.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.TouchResponse">
            <summary>Obtains and sets whether to respond to the touch event including the child widget.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Clip">
            <summary>Obtains and sets whether to clip the child element (Widget, UIElement).</summary>
            <remarks>Calculates the clip area as a 2D coordinate.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.HookChildTouchEvent">
            <summary>Obtains and sets whether to hook the touch event of the child widget.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.LinkedTree">
            <summary>Obtains the widget tree.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Parent">
            <summary>Obtains the parent widget.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Children">
            <summary>Obtains the child widget.</summary>
            <remarks>Returns the enumerator that repetitively handles the collection.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Widget.TouchEventReceived">
            <summary>Handler called when a touch event is received</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Widget.KeyEventReceived">
            <summary>Handler called when a key event is received</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Widget.PreviewKeyEventReceived">
            <summary>Handler called when an advance key event is received</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Widget.MotionEventReceived">
            <summary>Handler called when a motion event is received</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.LocalKeyReceiverWidget">
            @internal
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Focused">
            <summary>Obtains whether the focus is currently placed on self</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.ParentScene">
            <summary>Affiliated scene</summary>
            <remarks>If it does not belong to the scene, then null</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.LocalToWorld">
            <summary>Obtains the matrix to be converted from the local coordinate system to the world coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.PriorityHit">
            <summary>Obtains and sets whether to prioritize and respond to a touch.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Focusable">
            <summary>Obtains and sets whether to set the focus</summary>
            <remarks>If the child widget is true, the child widget may have focus even when the parent widget is false.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.FocusCustomSettings">
            <summary>Obtains and sets the focus setting information</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Widget.FocusChanged">
            <summary>Event called when this widget obtains or loses focus</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.FocusStyle">
            <summary>Obtains and sets the focus display style</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Pressable">
            <summary>Obtains and sets whether it can be pressed by a touch or key</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.PressState">
            <summary>Obtains and sets the status for whether or not this widget is pressed</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.TouchLeaveBehavior">
            <summary>Obtains and sets the behavior of the press status when the touch is moved from the inside of the area to the outside</summary>
            <remarks>This value is enabled only when the Pressable property is true.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Widget.Enabled">
            <summary>Obtains and sets whether to enable the feature</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationImageBox.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationImageBox.Start">
            <summary>Starts the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationImageBox.Stop">
            <summary>Stops the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationImageBox.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationImageBox.Render">
            <summary>Renders a scene graph.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.AnimationImageBox.FrameWidth">
            <summary>Obtains and sets the image width per frame.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.AnimationImageBox.FrameHeight">
            <summary>Obtains and sets the image height per frame.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.AnimationImageBox.FrameCount">
            <summary>Obtains and sets the total number of frames.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.AnimationImageBox.FrameInterval">
            <summary>Obtains and sets the frame refresh interval. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.AnimationImageBox.Image">
            <summary>Obtains and sets the image.</summary>
            <remarks>Sorts and specifies images in the frame order "from left to right" and "from top to bottom". When sorting in two dimensions, priority is given to the horizontal direction.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect">
            <summary>Effect in which the widget falls from above, hops a little, and then stops</summary>
            <remarks>Effect in which the menu screen is similar to "Little Big Planet"</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Effect">
            <summary>Base class of animation applying to widget or element</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.Start">
            <summary>Starts the effect.</summary>
            <remarks>Nothing is performed when being started (Playing==true) and when paused (Paused==true).</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.Update(System.Single)">
            <summary>Updates the effect.</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.Stop">
            <summary>Stops the effect</summary>
            <remarks>Nothing is performed when the effect is stopped.
            If it is paused, it will be stopped.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.Pause">
            <summary>Pauses the effect</summary>
            <remarks>Nothing is performed when the effect is being played (Playing==true).</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.Resume">
            <summary>Resumes the effect</summary>
            <remarks>Nothing is performed when the effect is paused (Paused==true).</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.OnStart">
            <summary>Start processing</summary>
            <remarks>Implements the start processing with the derived class.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
            <remarks>Implements the update processing with the derived class.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.OnStop">
            <summary>Stop processing</summary>
            <remarks>Implements the stop processing with the derived class.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.OnPause">
            <summary>Pause processing</summary>
            <remarks>Implements the pause processing with the derived class.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.OnResume">
            <summary>Resume processing</summary>
            <remarks>Implements the resume processing with the derived class.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Effect.OnRepeat">
            <summary>Repeat processing</summary>
            <remarks>Implements the repeat processing with the derived class.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Effect.TotalElapsedTime">
            <summary>Obtains the time elapsed from the start of the effect. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Effect.Playing">
            <summary>Obtains whether the effect is operating.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Effect.Paused">
            <summary>Obtains whether the effect is paused.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Effect.Repeating">
            <summary>Obtains and sets whether the effect will be repeatedly played back.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Effect.Widget">
            <summary>Obtains and sets the effect-target widget.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Effect.EffectStopped">
            <summary>Handler called when the effect is stopped</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.Single)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
            <param name="elasticity">Elasticity (0 - 1)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,System.Single)">
            <summary>Create an instance and start the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <param name="elasticity">Elasticity (0 - 1)</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.Elasticity">
            <summary>Obtains and sets the elasticity. (0 - 1)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.TargetX">
            <summary>Obtains and sets the X coordinate of the drop position in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.BunjeeJumpEffect.TargetY">
            <summary>Obtains and sets the Y coordinate of the drop position in the parent coordinate system.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.BusyIndicator">
            <summary>A widget used to display the progress status</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BusyIndicator.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BusyIndicator.#ctor(System.Boolean)">
            <summary>Constructor</summary>
            <param name="autoStart">Whether to start the animation immediately after initialization. Default value is False.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BusyIndicator.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BusyIndicator.Start">
            <summary>Starts the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.BusyIndicator.Stop">
            <summary>Stops the animation.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.BusyIndicator.Width">
            <summary>Obtains the width.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.BusyIndicator.Height">
            <summary>Obtains the height.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ButtonStyle">
            <summary>Button type</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ButtonStyle.Default">
            <summary>Default</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ButtonStyle.Custom">
            <summary>Customize</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Button">
            <summary>Button widget</summary>
            <remarks>An icon image and a single line of text can be set. The shape can be customized.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Button.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Button.OnPressStateChanged(Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs)">
            <summary>Called when the press status changes</summary>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Button.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Button.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.Text">
            <summary>Obtains and sets the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.Style">
            <summary>Obtains and sets the button type.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.IconImage">
            <summary>Obtains and sets the icon image.</summary>
            <remarks>Displays the set character string when null is set.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.TextFont">
            <summary>Obtains and sets the font of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.TextTrimming">
            <summary>Obtains and sets the cropping method of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.TextColor">
            <summary>Obtains and sets the color of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.TextShadow">
            <summary>Obtains and sets the shadow of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.HorizontalAlignment">
            <summary>Obtains and sets the horizontal alignment for character strings or icon images.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.VerticalAlignment">
            <summary>Obtains and sets the vertical alignment for character strings or icon images.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.CustomImage">
            <summary>Obtains and sets custom images.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Button.ButtonAction">
            <summary>Handler called when a button action is fired</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Button.BackgroundFilterColor">
            <summary>Obtains and sets the color that multiplies in the background image.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TextShadowSettings">
            <summary>Setting information of shadow of character string</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TextShadowSettings.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextShadowSettings.Color">
            <summary>Obtains and sets the color of the shadow of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextShadowSettings.HorizontalOffset">
            <summary>Obtains and sets the horizontal offset position of the shadow of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextShadowSettings.VerticalOffset">
            <summary>Obtains and sets the vertical offset position of the shadow of the character string.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.CustomButtonImageSettings">
            <summary>Setting information of button custom image</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CustomButtonImageSettings.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomButtonImageSettings.BackgroundNormalImage">
            <summary>Obtains and sets the custom image to always be displayed in the background.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomButtonImageSettings.BackgroundPressedImage">
            <summary>Obtains and sets the custom image displayed in the background when pressed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomButtonImageSettings.BackgroundDisabledImage">
            <summary>Obtains and sets the custom image displayed in the background when disabled.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomButtonImageSettings.BackgroundNinePatchMargin">
            <summary>Obtains and sets the 9-patch information of the custom image displayed in the background.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.CheckBoxStyle">
            <summary>Check box type</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.CheckBoxStyle.CheckBox">
            <summary>Check box</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.CheckBoxStyle.RadioButton">
            <summary>Radio button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.CheckBoxStyle.Custom">
            <summary>Customize</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.CheckBox">
            <summary>Check box widget</summary>
            <remarks>The shape can be customized.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CheckBox.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CheckBox.OnPressStateChanged(Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs)">
            <summary>Called when the press status changes</summary>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CheckBox.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CheckBox.Render">
            <summary>Renders a scene graph.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CheckBox.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CheckBox.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CheckBox.Checked">
            <summary>Obtains and sets the check status.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CheckBox.Style">
            <summary>Obtains and sets the check box type.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.CheckBox.CheckedChanged">
            <summary>Handler called when the check status changes</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CheckBox.CustomCheckBoxImage">
            <summary>Obtains and sets custom images.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.CustomCheckBoxImageSettings">
            <summary>Setting information of custom image</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CustomCheckBoxImageSettings.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomCheckBoxImageSettings.NormalUncheckedImage">
            <summary>Obtains and sets the unchecked custom image to always be displayed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomCheckBoxImageSettings.NormalCheckedImage">
            <summary>Obtains and sets the checked custom image to always be displayed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomCheckBoxImageSettings.PressedUncheckedImage">
            <summary>Obtains and sets the unchecked custom image when pressed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomCheckBoxImageSettings.PressedCheckedImage">
            <summary>Obtains and sets the checked custom image when pressed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomCheckBoxImageSettings.DisabledUncheckedImage">
            <summary>Obtains and sets the unchecked custom image when disabled.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CustomCheckBoxImageSettings.DisabledCheckedImage">
            <summary>Obtains and sets the checked custom image when disabled.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ContainerWidget">
            <summary>Widget which has the container feature</summary>
            <remarks>A child widget can be added and the parent-child relationship of the widget can be formed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ContainerWidget.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ContainerWidget.AddChildFirst(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the beginning.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the beginning if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ContainerWidget.AddChildLast(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the end.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the end if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ContainerWidget.InsertChildBefore(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately in front of the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="nextChild">Child widget immediately after the inserted child widget</param>
            <remarks>Moves it immediately in front of the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ContainerWidget.InsertChildAfter(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately after the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="prevChild">Child widget immediately in front of the inserted child widget</param>
            <remarks>Moves it immediately after the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ContainerWidget.RemoveChild(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Deletes the specified child widget.</summary>
            <param name="child">Widget to be deleted</param>
            <remarks>Nothing will be performed if a widget that does not exist is specified.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ContainerWidget.Children">
            <summary>Obtains the child widget.</summary>
            <remarks>Returns the enumerator that repetitively handles the collection.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ContainerWidget.EnabledChildrenAnchors">
            <summary>Sets and obtains the value for whether to resize the child widget according to Anchors</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ContainerWidget.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ContainerWidget.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.CrossFadeTransitionInterpolator">
            <summary>Interpolation function</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.CrossFadeTransitionInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.CrossFadeTransitionInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.CrossFadeTransitionInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.CrossFadeTransition">
            <summary>Cross-fade transition</summary>
            <remarks>On the old scene, a new scene changes from transparent to opaque.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Transition">
            <summary>Base class of animation to be applied to scene</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.Start">
            <summary>Starts the transition.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.Stop">
            <summary>Stops the transition.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.Update(System.Single)">
            <summary>Updates the transition.</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.OnStart">
            <summary>Start processing</summary>
            <remarks>Implements the start processing with the derived class.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of transition update</returns>
            <remarks>Implements the update processing with the derived class.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.OnStop">
            <summary>Stop processing</summary>
            <remarks>Implements the stop processing with the derived class.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.GetCurrentSceneRenderedImage">
            <summary>Generates ImageAsset used for offscreen rendering of CurrentScene.</summary>
            <returns>Offscreen rendered ImageAsset</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Transition.GetNextSceneRenderedImage">
            <summary>Generates ImageAsset used for offscreen rendering of NextScene.</summary>
            <returns>Offscreen rendered ImageAsset</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Transition.TotalElapsedTime">
            <summary>Obtains the time elapsed from the start of the transition. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Transition.DrawOrder">
            <summary>Obtains and sets the rendering order during a transition.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Transition.TransitionStopped">
            <summary>Handler called when a transition ends</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Transition.NextScene">
            <summary>Obtains the next scene to be displayed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Transition.TransitionUIElement">
            <summary>Obtains the root of the element tree that can only be used during a transition.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.#ctor(System.Single,Sce.PlayStation.HighLevel.UI.CrossFadeTransitionInterpolator)">
            <summary>Constructor</summary>
            <param name="time">Duration (ms)</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of transition update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.Time">
            <summary>Obtains and sets the duration. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.CustomNextSceneInterpolator">
            <summary>Sets a NextScene custom interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.CustomCurrentSceneInterpolator">
            <summary>Sets a CurrentScene custom interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.NextSceneFront">
            <summary>Obtains and sets whether to display NextScene at the front.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.CrossFadeTransition.Texturize">
            <summary>Obtains and sets whether to create a texture during the transition.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DialogBackgroundStyle">
            <summary>Dialog background type</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DialogBackgroundStyle.Default">
            <summary>Default</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DialogBackgroundStyle.Custom">
            <summary>Customize</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Dialog">
            <summary>Modal Dialog</summary>
            <remarks>Any part can be listed.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Dialog.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Dialog.#ctor(Sce.PlayStation.HighLevel.UI.Effect,Sce.PlayStation.HighLevel.UI.Effect)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Dialog.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Dialog.Show">
            <summary>Displays the dialog box.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Dialog.Show(Sce.PlayStation.HighLevel.UI.Effect)">
            <summary>Displays the dialog box.</summary>
            <param name="effect">Effect when the dialog is displayed</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Dialog.Hide">
            <summary>Hides the dialog box.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Dialog.Hide(Sce.PlayStation.HighLevel.UI.Effect)">
            <summary>Hides the dialog box.</summary>
            <param name="effect">Effect when the dialog is displayed</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Dialog.Render">
            <summary>Renders a scene graph.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.ShowEffect">
            <summary>Obtains and sets the effect when displaying a dialog. When there is null, the effect is not used.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.HideEffect">
            <summary>Obtains and sets the effect when hiding a dialog. When there is null, the effect is not used.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.BackgroundStyle">
            <summary>Obtains and sets the background type of the dialog.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.CustomBackgroundImage">
            <summary>Obtains and sets the background image of the dialog.</summary>
            <remarks>This is enabled only when BackgroundStyle is Custom. When null is set, the background image is not displayed.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.CustomBackgroundNinePatchMargin">
            <summary>Obtains and sets 9PatchMargin of the background image of the dialog.</summary>
            <remarks>This is enabled only when BackgroundStyle is Custom and CustomBackgroundImage is set.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.CustomBackgroundColor">
            <summary>Obtains and sets the background color of the dialog.</summary>
            <remarks>This is enabled only when BackgroundStyle is Custom.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.BackgroundFilterColor">
            <summary>Obtains and sets the color that multiplies in the background image.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Dialog.Showing">
            <summary>Event issued when a dialog is displayed</summary>
            <remarks>This is issued before an Effect is started when a ShowEffect is set.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Dialog.Shown">
            <summary>Event issued when a dialog is displayed</summary>
            <remarks>This is issued at the time an Effect is terminated when a ShowEffect is set.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Dialog.Hiding">
            <summary>Event issued when a dialog disappears</summary>
            <remarks>This is issued before an Effect is started when a HideEffect is set.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Dialog.Hidden">
            <summary>Event issued when a dialog has disappeared</summary>
            <remarks>This is issued at the time an Effect is terminated when a HideEffect is set.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.HideOnTouchOutside">
            <summary>Whether to close a dialog when the outside of the dialog is touched</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.DefaultFocusWidget">
            <summary>Widget in focus first</summary>
            <remarks>When there is null, the default widget is used.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Dialog.Result">
            <summary>Obtains and sets the dialog result</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DialogEventArgs">
            <summary>Dialog event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DialogEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.DialogResult)">
            <summary>Constructor</summary>
            <param name="result">Dialog result</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DialogEventArgs.CancelHide">
            <summary>Sets whether to cancel Hide processing</summary>
            <remarks>When this property is set to true at Hiding events, the dialog closing process can be canceled.
            This property is ignored at Hidden events.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DialogEventArgs.Result">
            <summary>Dialog result</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DialogResult">
            <summary>Dialog result</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DialogResult.Ok">
            <summary>OK</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DialogResult.Cancel">
            <summary>Cancel</summary>
            <remarks>This value is set when the dialog is closed by touching the Back button or the area outside the dialog, except when explicitly set.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Scene">
            <summary>Screen</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Scene.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Scene.OnUpdate(System.Single)">
            <summary>Update processing handler of each frame</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Scene.OnShowing">
            <summary>Event handler called when the screen is displayed</summary>
            <remarks>This is called before a set Transition is started. When an Override occurs, the basic class method must be called within the method.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Scene.OnShown">
            <summary>Event handler issued when the screen is displayed</summary>
            <remarks>This is called when a set Transition is terminated. When an Override occurs, the basic class method must be called within the method.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Scene.ResetFocus(System.Boolean,System.Boolean)">
            @internal
            <summary>Resets focus when screen is switched, for example</summary>
            <param name="setFocusActive">true: force Focus to be Active, false: do no change FocusActive</param>
            <param name="useDefaultFocusWidget">true: set focus to DefaultFocusWidget if DefaultFocusWidget is set</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Scene.OnHiding">
            <summary>Event handler called when the screen is being turned off</summary>
            <remarks>This is called before a set Transition is started. When an Override occurs, the basic class method must be called within the method.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Scene.OnHidden">
            <summary>Event handler called when the screen has been turned off</summary>
            <remarks>This is called when a set Transition is terminated. When an Override occurs, the basic class method must be called within the method.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.Title">
            <summary>Obtains and sets the scene title.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.RootWidget">
            <summary>Obtains the root of the widget tree.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.Transition">
            <summary>Obtains and sets the transition.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.ShowNavigationBar">
            <summary>Obtains and sets whether to display the navigation bar.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.Visible">
            <summary>Obtains and sets whether to display.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.DesignWidth">
            <summary>Obtains and sets the initial width of the scene for the layout.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.DesignHeight">
            <summary>Obtains and sets the initial height of the scene for the layout.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Scene.Updated">
            <summary>Event when updating each frame</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.FocusActive">
            <summary>Obtains whether this scene is active</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Scene.Showing">
            <summary>Event issued when the screen is displayed</summary>
            <remarks>This is issued before a set Transition is started.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Scene.Shown">
            <summary>Event issued when the screen is displayed</summary>
            <remarks>This is issued when a set Transition is terminated.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Scene.Hiding">
            <summary>Event issued when the screen is being turned off</summary>
            <remarks>This is issued before a set Transition is started.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Scene.Hidden">
            <summary>Event issued when the screen is turned off</summary>
            <remarks>This is issued when a set Transition is terminated.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.FocusWidget">
            <summary>Obtains the widget that currently has focus in this scene</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Scene.DefaultFocusWidget">
            <summary>Widget in focus first</summary>
            <remarks>When there is null, the default widget is used.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DelayedExecutor">
            <summary>Effect processed after a certain time has elapsed</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DelayedExecutor.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DelayedExecutor.#ctor(System.Single,System.Action)">
            <summary>Constructor</summary>
            <param name="time">Delay time (ms)</param>
            <param name="action">Running process</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DelayedExecutor.CreateAndStart(System.Single,System.Action)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="time">Delay time (ms)</param>
            <param name="action">Running process</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DelayedExecutor.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DelayedExecutor.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DelayedExecutor.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DelayedExecutor.Time">
            <summary>Obtains and sets the delay time. (ms)</summary>
            <remarks>The process is executed at the first frame after the set time has elapsed. When 0, it is executed at the next frame.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DelayedExecutor.Action">
            <summary>Obtains and sets the delegate of the running process.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DoubleTapGestureDetector">
            <summary>Double-tap detector</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.GestureDetector">
            <summary>Base class of gesture detection mechanism</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GestureDetector.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GestureDetector.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Distributes a touch event.</summary>
            <param name="touchEvents">Touch event</param>
            <returns>Response to touch event distribution</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GestureDetector.OnResetState">
            <summary>Resets the state of gesture detection.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GestureDetector.State">
            <summary>Obtains the state of GestureDetector.</summary>
            <remarks>It is possible to obtain GestureDetectorResponse returned with the previous OnTouchEvent. When OnResetState is called, None is set.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GestureDetector.TargetWidget">
            <summary>Obtains the widget applicable for detecting gesture</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DoubleTapGestureDetector.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DoubleTapGestureDetector.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Distributes a touch event.</summary>
            <param name="touchEvents">Touch event</param>
            <returns>Response to touch event distribution</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DoubleTapGestureDetector.OnResetState">
            <summary>Resets the state of gesture analysis.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DoubleTapGestureDetector.MaxDistance">
            <summary>Obtains and sets the maximum allowable distance from the first down position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DoubleTapGestureDetector.MaxPressDuration">
            <summary>Obtains and sets the maximum time until down changes to up. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DoubleTapGestureDetector.MaxNextPressDuration">
            <summary>Obtains and sets the maximum time until up changes to down. (ms)</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.DoubleTapGestureDetector.DoubleTapDetected">
            <summary>Double-tap event handler</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DoubleTapEventArgs">
            <summary>Double-tap event argument</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.GestureEventArgs">
            <summary>Base class of gesture event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GestureEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GestureEventArgs.Source">
            <summary>Event source widget</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DoubleTapEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Constructor</summary>
            <param name="source">Event source widget</param>
            <param name="worldPosition">Position in the world (screen) coordinate system</param>
            <param name="localPosition">Position in the local coordinate system</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DoubleTapEventArgs.WorldPosition">
            <summary>Obtains the position in the world (screen) coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DoubleTapEventArgs.LocalPosition">
            <summary>Obtains the position in the local coordinate system.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DragGestureDetector">
            <summary>Drag detector</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DragGestureDetector.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DragGestureDetector.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Distributes a touch event.</summary>
            <param name="touchEvents">Touch event</param>
            <returns>Response to touch event distribution</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DragGestureDetector.OnResetState">
            <summary>Resets the state of gesture analysis.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DragGestureDetector.MaxDistance">
            <summary>Obtains and sets the maximum travel distance.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DragGestureDetector.Direction">
            <summary>Obtains and sets the determination direction of the drag gesture</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.DragGestureDetector.DragDetected">
            <summary>Drag event handler</summary>
            <remarks>The initial DragDetected event is issued from the next frame of the DragStartDetected event.
            When dragging is started, each frame is issued regardless of travel distance until ended either by touching up or the gesture detector.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.DragGestureDetector.DragStartDetected">
            <summary>Drag start event handler</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.DragGestureDetector.DragEndDetected">
            <summary>Drag end event handler</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DragDirection">
            <summary>DragGesture evaluation direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DragDirection.All">
            <summary>Determines all directions</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DragDirection.Vertical">
            <summary>Determines only the vertical direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DragDirection.Horizontal">
            <summary>Determines only the horizontal direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DragDirection.LimitedVertical">
            <summary>Determines only the vertical direction, and ends determination at the point where moved to the horizontal direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.DragDirection.LimitedHorizontal">
            <summary>Determines only the horizontal direction, and ends determination at the point where moved to the vertical direction</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DragEventArgs">
            <summary>Drag event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DragEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Constructor</summary>
            <param name="source">Event source widget</param>
            <param name="worldPosition">Position in the world (screen) coordinate system</param>
            <param name="localPosition">Position in the local coordinate system</param>
            <param name="distance">Travel distance</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DragEventArgs.WorldPosition">
            <summary>Obtains the position in the world (screen) coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DragEventArgs.LocalPosition">
            <summary>Obtains the position in the local coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DragEventArgs.Distance">
            <summary>Obtains the travel distance (vector) from the previous event</summary>
            <remarks>This value is the travel distance in the horizontal and vertical directions and is not related to the DragGestureDetector.DetectDirection value.
            At DragStartDetected events, it is the distance from the touch-down position, and at DragDetected events, it is the distance from the touch position one frame earlier.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PopupList">
            <summary>Widget for selecting one option from among multiple options</summary>
            <remarks>Displays a list in the modal dialog</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupList.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupList.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupList.OnPressStateChanged(Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs)">
            <summary>Called when the press status changes</summary>
            <param name="e">Event argument</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.ListTitle">
            <summary>Obtains and sets the list title.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.Font">
            <summary>Obtains and sets the font of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.TextColor">
            <summary>Obtains and sets the color of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.TextShadow">
            <summary>Obtains and sets the information of the shadow of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.TextTrimming">
            <summary>Obtains and sets the cropping method of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.ListItemFont">
            <summary>Obtains and sets the list item font.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.ListItemTextColor">
            <summary>Obtains and sets the list item text color.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.ListTitleFont">
            <summary>Obtains and sets the list title font.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.ListTitleTextColor">
            <summary>Obtains and sets the list title text color.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.SelectedIndex">
            <summary>Index of selected ListItem</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupList.ListItems">
            <summary>Obtains and sets the character string of a list item.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.PopupList.SelectionChanged">
            <summary>Event called when selected item changes</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.PopupList.ListItemsChanged">
            <summary>Event called when the content of the ListItems properties is updated</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ListPanelItem">
            <summary>Container widget for list item</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Panel">
            <summary>Widget which has the container feature</summary>
            <remarks>Background color can be set</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Panel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Panel.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Panel.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Panel.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Panel.BackgroundColor">
            <summary>Obtains and sets the background color.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Panel.Clip">
            <summary>Obtains and sets whether to clip the child widget.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanelItem.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanelItem.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanelItem.OnPressStateChanged(Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs)">
            <summary>Called when the press status changes</summary>
            <param name="e">Event argument</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanelItem.Width">
            <summary>Obtains and sets the width.</summary>
            <remarks>Values can be changed only from the ListPanel class.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanelItem.Height">
            <summary>Obtains and sets the height.</summary>
            <remarks>Values can be changed only from a concrete class or callback.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanelItem.Index">
            <summary>Obtains the index for all lists.</summary>
            <remarks>Default value is -1</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanelItem.IndexInSection">
            <summary>Obtains the index within a section.</summary>
            <remarks>Uses only with ListPanel. Default value is -1</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanelItem.SectionIndex">
            <summary>Obtains the index of a section.</summary>
            <remarks>Uses only with ListPanel. Default value is -1</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupList.PopupListPanelItem.OnPressStateChanged(Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs)">
            <summary>Called when the press status changes</summary>
            <param name="e">Event argument</param>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PopupListItemCollection">
            <summary>Collection for ListItems of PopupList</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Constructor</summary>
            <param name="items">Initial value</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds multiple items to the end</summary>
            <param name="items">Added item list</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Inserts multiple items in a specified index position.</summary>
            <param name="index">Index of position to insert.</param>
            <param name="items">List of inserted items</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.IndexOf(System.String)">
            <summary>Obtains the index of a specified item.</summary>
            <param name="item">Text to be searched</param>
            <returns>If the text to search exists, the index of that text. Otherwise, -1.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.Insert(System.Int32,System.String)">
            <summary>Inserts the item in a specified index position.</summary>
            <param name="index">Index of position to insert.</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.RemoveAt(System.Int32)">
            <summary>Deletes the item in a specified index.</summary>
            <param name="index">Index of item to be deleted</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.GetEnumerator">
            <summary>Returns the enumerator that repetitively handles the collection.</summary>
            <returns>IEnumerator object that can be used to repetitively handle a collection</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns the enumerator that repetitively handles the collection.</summary>
            <returns>IEnumerator object that can be used to repetitively handle a collection</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.Add(System.String)">
            <summary>Item</summary>
            <param name="item">Item</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.Clear">
            <summary>Deletes all items.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.Contains(System.String)">
            <summary>Deletes all items.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.CopyTo(System.String[],System.Int32)">
            <summary>Copies an item to an array.</summary>
            <param name="array">String array where an item will be copied</param>
            <param name="arrayIndex">Index of an array that is the start position for copying</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.Remove(System.String)">
            <summary>Deletes a specific item found first.</summary>
            <param name="item">Item to be deleted</param>
            <returns>If the section to be deleted exists, then true. Otherwise, false.</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.Item(System.Int32)">
            <summary>Obtains and sets the item in a specified index.</summary>
            <param name="index">Index of item</param>
            <returns>Item in a specified index</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.Count">
            <summary>Obtains the number of items.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupListItemCollection.IsReadOnly">
            <summary>Obtains whether to be read-only.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PopupSelectionChangedEventArgs">
            <summary>Event argument called when item selected in PopupList changes</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupSelectionChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Event when item selected in PopupList changes</summary>
            <param name="oldIndex">Index of item previously selected</param>
            <param name="newIndex">Index of item currently selected</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupSelectionChangedEventArgs.OldIndex">
            <summary>Index of item previously selected</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PopupSelectionChangedEventArgs.NewIndex">
            <summary>Index of item currently selected</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PopupListItemsChangedEventArgs">
            <summary>Event argument for ListItemsChanged of PopupList</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PopupListItemsChangedEventArgs.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.EditableText">
            <summary>Editable text widget</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.EditableText.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.EditableText.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.EditableText.OnPressStateChanged(Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs)">
            <summary>Called when the press status changes</summary>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.EditableText.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.EditableText.Render">
            <summary>Renders a scene graph.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.Text">
            <summary>Obtains and sets the character string.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.EditableText.TextChanged">
            <summary>Event issued when Text property is changed</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.Font">
            <summary>Obtains and sets the font of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.TextColor">
            <summary>Obtains and sets the color of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.DefaultText">
            <summary>Obtains and sets the default character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.DefaultFont">
            <summary>Obtains and sets the font of the default character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.DefaultTextColor">
            <summary>Obtains and sets the color of the default character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.TextShadow">
            <summary>Obtains and sets the shadow of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.HorizontalAlignment">
            <summary>Obtains and sets the horizontal alignment for character strings or icon images.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.VerticalAlignment">
            <summary>Obtains and sets the vertical alignment for character strings or icon images.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.LineBreak">
            <summary>Obtains and sets the break method of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.TextTrimming">
            <summary>Obtains and sets the cropping method of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.LineGap">
            <summary>Obtains and sets the row spacing.</summary>
            <remarks>Default value is 0</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.EditableText.TextInputMode">
            <summary>Obtains and sets the operation mode for text input.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TextChangedEventArgs">
            <summary>Event argument when the text has changed</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TextChangedEventArgs.#ctor(System.String,System.String)">
            <summary>Constructor</summary>
            <param name="oldText">Text before change</param>
            <param name="newText">Text after change</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextChangedEventArgs.NewText">
            <summary>Text after change</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextChangedEventArgs.OldText">
            <summary>Text before change</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FourWayDirection">
            <summary>Four directions up, down, left, and right</summary>
            <remarks>Used for the travel direction of the effect.</remarks>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FourWayDirection.Up">
            <summary>Up</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FourWayDirection.Down">
            <summary>Down</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FourWayDirection.Left">
            <summary>Left</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FourWayDirection.Right">
            <summary>Right</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.EffectUpdateResponse">
            <summary>Response of effect update</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.EffectUpdateResponse.Continue">
            <summary>Continues updating the effect.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.EffectUpdateResponse.Finish">
            <summary>Stops updating the effect.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FadeInEffectInterpolator">
            <summary>Interpolation function for FadeInEffect</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FadeInEffectInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FadeInEffectInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FadeInEffectInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FadeInEffect">
            <summary>Fade-in effect</summary>
            <remarks>Changes from transparent to opaque (set alpha value).</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeInEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeInEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.Single,Sce.PlayStation.HighLevel.UI.FadeInEffectInterpolator)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeInEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,System.Single,Sce.PlayStation.HighLevel.UI.FadeInEffectInterpolator)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="interpolator">Interpolation function</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeInEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeInEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeInEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FadeInEffect.Time">
            <summary>Obtains and sets the duration. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FadeInEffect.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FadeInEffect.CustomInterpolator">
            <summary>Sets a custom interpolation function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FadeOutEffectInterpolator">
            <summary>Interpolation function for FadeOutEffect</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FadeOutEffectInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FadeOutEffectInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FadeOutEffectInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FadeOutEffect">
            <summary>Fade-out effect</summary>
            <remarks>Changes from opaque (set alpha value) to transparent.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeOutEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeOutEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.Single,Sce.PlayStation.HighLevel.UI.FadeOutEffectInterpolator)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeOutEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,System.Single,Sce.PlayStation.HighLevel.UI.FadeOutEffectInterpolator)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeOutEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeOutEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FadeOutEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FadeOutEffect.Time">
            <summary>Obtains and sets the duration. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FadeOutEffect.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FadeOutEffect.CustomInterpolator">
            <summary>Sets a custom interpolation function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FlickDirection">
            <summary>Flick direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FlickDirection.All">
            <summary>All directions</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FlickDirection.Vertical">
            <summary>Vertical</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FlickDirection.Horizontal">
            <summary>Horizontal</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FlickDirection.Virtical">
            @internal
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FlickGestureDetector">
            <summary>Flick detector</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlickGestureDetector.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlickGestureDetector.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Distributes a touch event.</summary>
            <param name="touchEvents">Touch event</param>
            <returns>Response to touch event distribution</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlickGestureDetector.OnResetState">
            <summary>Resets the state of gesture analysis.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlickGestureDetector.MinSpeed">
            <summary>Obtains and sets the minimum speed for determining a flick. (pixels/second)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlickGestureDetector.MaxSpeed">
            <summary>Obtains and sets the maximum flick speed value. (pixels/second)</summary>
            <remarks>This value is set to the flick speed when the absolute value of the flick speed is greater than this value at the time a FlickDetected event occurs.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlickGestureDetector.Direction">
            <summary>Obtains and sets the flick direction to be detected.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.FlickGestureDetector.FlickDetected">
            <summary>Flick event handler</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FlickEventArgs">
            <summary>Flick event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlickEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Constructor</summary>
            <param name="source">Event source widget</param>
            <param name="worldPosition">Position in the world (screen) coordinate system</param>
            <param name="localPosition">Position in the local coordinate system</param>
            <param name="flickSpeed">Flick speed</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlickEventArgs.WorldPosition">
            <summary>Obtains the position in the world (screen) coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlickEventArgs.LocalPosition">
            <summary>Obtains the position in the local coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlickEventArgs.Speed">
            <summary>Obtains the flick speed. (pixels/second)</summary>
            <remarks>This value is the speed vector in the horizontal and vertical directions and is not related to the FlickGestureDetector.Direction value.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FlipBoardEffectInterpolator">
            <summary>Type of interpolation function for FlipBoardEffect</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FlipBoardEffectInterpolator.Default">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FlipBoardEffectInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FlipBoardEffect">
            <summary>Effect that folds in the middle</summary>
            <remarks>A new widget appears in the back. Airport bulletin board-like expression</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Constructor</summary>
            <param name="currentWidget">Widget being displayed</param>
            <param name="nextWidget">Next widget to be displayed</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="currentWidget">Widget being displayed</param>
            <param name="nextWidget">Next widget to be displayed</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.NextWidget">
            <summary>Obtains and sets the next widget to be displayed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.CustomInterpolator">
            <summary>Obtains and sets a custom interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlipBoardEffect.Time">
            <summary>Obtains and sets the animation time. (ms)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FlipBoardTransitionInterpolator">
            <summary>Type of interpolation function for FlipBoardTransition</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FlipBoardTransitionInterpolator.Default">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FlipBoardTransitionInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FlipBoardTransition">
            <summary>Transition that folds in the middle</summary>
            <remarks>A new scene appears in the back. Airport bulletin board-like expression</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardTransition.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardTransition.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardTransition.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of transition update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FlipBoardTransition.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlipBoardTransition.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlipBoardTransition.CustomInterpolator">
            <summary>Sets a custom interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FlipBoardTransition.Time">
            <summary>Obtains and sets the animation time. (ms)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.GestureDetectorResponse">
            <summary>Response to touch event distribution of GestureDetector</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.GestureDetectorResponse.None">
            <summary>Initial state</summary>
            <remarks>This value is set with System, so it is not used with the OnTouchEvent return value. When this is used with the OnTouchEvent return value, it is treated the same as FailedAndStop.</remarks>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.GestureDetectorResponse.UndetectedAndContinue">
            <summary>Gesture not detected. Distribution of the touch event is continued.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.GestureDetectorResponse.DetectedAndContinue">
            <summary>Gesture already detected. Distribution of the touch event is continued.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.GestureDetectorResponse.DetectedAndStop">
            <summary>Gesture already detected. Distribution of the touch event is ended.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.GestureDetectorResponse.FailedAndStop">
            <summary>Gesture detection failed. Distribution of the touch event is ended.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.GridListScrollOrientation">
            <summary>Scroll direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.GridListScrollOrientation.Horizontal">
            <summary>Horizontal</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.GridListScrollOrientation.Vertical">
            <summary>Vertical</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.GridListPanel">
            <summary>List widget with multiple rows and columns</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.#ctor(Sce.PlayStation.HighLevel.UI.GridListScrollOrientation)">
            <summary>Constructor</summary>
            <param name="scrollOrientation">Scroll direction</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.StartItemRequest">
            <summary>Starts the request of an item.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.GetListItem(System.Int32)">
            <summary>Obtains the specified index item.</summary>
            <param name="index">Item index</param>
            <returns>Item (null may be returned)</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.ScrollTo(System.Int32,System.Single,System.Boolean)">
            <summary>Scrolls to the specified item position.</summary>
            <param name="itemIndex">Item index</param>
            <param name="pixelOffset">Item deviation (pixels)</param>
            <param name="withAnimation">Whether to execute the animation</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.ScrollTo(System.Int32,System.Boolean)">
            <summary>Scrolls to the specified item position.</summary>
            <param name="itemIndex">Item index</param>
            <param name="withAnimation">Whether to execute the animation</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.OnPreviewKeyEvent(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Advance key event handler</summary>
            <param name="keyEvent">Key event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.OnResetState">
            <summary>Status reset handler</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.SetListItemCreator(Sce.PlayStation.HighLevel.UI.ListItemCreator)">
            <summary>Registers the method of creating items.</summary>
            <param name="creator">Method of creating items</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.GridListPanel.SetListItemUpdater(Sce.PlayStation.HighLevel.UI.ListItemUpdater)">
            <summary>Registers the method of updating items.</summary>
            <param name="updater">Method of updating items</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ScrollOrientation">
            <summary>Obtains the scroll direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.BackgroundColor">
            <summary>Obtains and sets the background color.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ItemWidth">
            <summary>Obtains and sets the width of an item.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The total of the item width and item column spacing is larger than the list width.</exception>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ItemHeight">
            <summary>Obtains and sets the height of an item.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The total of the item height and item row spacing is larger than the list height.</exception>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ItemVerticalGap">
            <summary>Obtains and sets the height of an item.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The total of the item row spacing and item height is larger than the list height.</exception>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ItemHorizontalGap">
            <summary>Obtains and sets the column spacing of an item.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The total of the item column spacing and item width is larger than the list width.</exception>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ScrollBarVisibility">
            <summary>Obtains and sets the scroll bar view.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.SnapScroll">
            <summary>Obtains and sets whether to stop for each item.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ItemIndex">
            <summary>Obtains the index of the top left item in the display area.</summary>
            <remarks>The item includes the row and column spacing.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ItemPixelOffset">
            <summary>Obtains the deviation of the top left item in the display area. (pixels)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.GridListPanel.ItemCount">
            <summary>Obtains and sets the total number of items.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.GridListPanel.SelectItemChanged">
            <summary>Event called when item is selected</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.GridListPanel.Scrolling">
            <summary>Handler called during scrolling</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ImageAsset">
            <summary>Image asset class</summary>
            <remarks>Class concealing texture loading.
            Asynchronous loading of image files and caching is supported.
            When ImageAsset has been created from an image file, the texture is cached.
            If an ImageAsset with the same filename is created from this cache, the unmanaged resources of the texture will be shared.
            Note that the cache will not be freed with just Dispose or garbage collection.
            For ImageAssets that are no longer used, after calling UnloadFromCache, call all Disposes for the ImageAssets of the same image files.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(System.String,System.Boolean)">
            <summary>Creates a new instance from a specified image file</summary>
            <remarks>Once loaded, it will be cached. For those that are no longer used, call UnloadFromCache.</remarks>
            <param name="filename">Image filename</param>
            <param name="asyncLoad">Whether or not asynchronous loading is performed</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(System.String)">
            <summary>Creates a new instance from a specified image file</summary>
            <remarks>Performs synchronous loading. Once loaded, it will be cached. For those that are no longer used, call UnloadFromCache.</remarks>
            <param name="filename">Image filename</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(Sce.PlayStation.HighLevel.UI.SystemImageAsset)">
            <summary>Creates a new instance for a specified system image asset</summary>
            <remarks>Image assets used for standard widgets, etc. Performs asynchronous loading.</remarks>
            <param name="name">System image asset</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(Sce.PlayStation.Core.Graphics.Texture2D)">
            <summary>Creates a new instance from a specified existing texture</summary>
            <remarks>Will not be cached. To hold the ShallowClone of a texture in ImageAsset, use Dispose on the instance for the texture specified in the argument as required.</remarks>
            <param name="texture">Textures</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(Sce.PlayStation.Core.Imaging.Image,Sce.PlayStation.Core.Graphics.PixelFormat)">
            <summary>Creates a new instance from a specified existing image</summary>
            <remarks>Will not be cached. Use Dispose on the instance for the image specified in the argument as required.</remarks>
            <param name="image">Existing image</param>
            <param name="format">Pixel format of specified existing image</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(Sce.PlayStation.Core.Imaging.Image)">
            <summary>Creates a new instance from a specified existing image</summary>
            <remarks>Will not be cached. Use Dispose on the instance for the image specified in the argument as required.</remarks>
            <param name="image">Existing image</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>Creates a new instance from a specified image file</summary>
            <remarks>Once loaded, it will be cached. For those that are no longer used, call UnloadFromCache.</remarks>
            <param name="filename">Image filename</param>
            <param name="asyncLoad">Whether or not asynchronous loading is performed</param>
            <param name="scaledPixelDensity">Whether or not to scale according to the pixel density</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,System.Boolean)">
            <summary>Creates a new instance from a specified existing texture</summary>
            <remarks>Will not be cached. To hold the ShallowClone of a texture in ImageAsset, use Dispose on the instance for the texture specified in the argument as required.</remarks>
            <param name="texture">Textures</param>
            <param name="scaledPixelDensity">Whether or not to scale according to the pixel density</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(Sce.PlayStation.Core.Imaging.Image,Sce.PlayStation.Core.Graphics.PixelFormat,System.Boolean)">
            <summary>Creates a new instance from a specified existing image</summary>
            <remarks>Will not be cached. Use Dispose on the instance for the image specified in the argument as required.</remarks>
            <param name="image">Existing image</param>
            <param name="format">Pixel format of specified existing image</param>
            <param name="scaledPixelDensity">Whether or not to scale according to the pixel density</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.#ctor(Sce.PlayStation.Core.Imaging.Image,System.Boolean)">
            <summary>Creates a new instance from a specified existing image</summary>
            <remarks>Will not be cached. Use Dispose on the instance for the image specified in the argument as required.</remarks>
            <param name="image">Existing image</param>
            <param name="scaledPixelDensity">Whether or not to scale according to the pixel density</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.CloneTexture">
            <summary>Obtains texture duplicates</summary>
            <remarks>Returns the ShallowClone of the texture. If texture loading is not yet completed during asynchronous loading, null is returned.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.WaitForLoad">
            <summary>Waits until the file is loaded</summary>
            <remarks>Returns quickly if loaded synchronously or if already loaded.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.Dispose">
            <summary>Frees used resources</summary>
            <remarks>Calls Dispose for a texture held by this instance.
            When ImageAsset is loaded from an image file, the cached texture is not freed.
            For complete release, UnloadFromCache must be called.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.UnloadFromCache">
            <summary>Deletes the ImageAsset cache loaded from an image file</summary>
            <remarks>Frees a cached texture.
            Only textures in a cache are freed, so it is possible to continue using this instance.
            To free unmanaged resources of the target texture without waiting for garbage collection, Dispose must be called.</remarks>
            <returns>false: Did not exist in the cache</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.WaitForLoadAll">
            <summary>Waits until the asynchronous loading of all images completes.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageAsset.UnloadFromCache(System.String)">
            <summary>Deletes the ImageAsset cache loaded from a file</summary>
            <param name="filename">Filename</param>
            <returns>false: Did not exist in the cache</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageAsset.Ready">
            <summary>Obtains whether image asset loading is completed</summary>
            <remarks>"true" returns if a non-image file is loaded or if loaded synchronously.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageAsset.Width">
            <summary>Obtains the width of an image asset</summary>
            <remarks>If loading is not yet completed during asynchronous loading, 0 is returned</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageAsset.Height">
            <summary>Obtains the height of an image asset</summary>
            <remarks>If loading is not yet completed during asynchronous loading, 0 is returned.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageAsset.FilePath">
            <summary>Obtains the image file path</summary>
            <remarks>Returns null when a file is not created.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.AssetManager">
            @internal
            <summary>Asset management class</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AssetManager.LoadSystemAsset">
            <summary>Reads all system assets.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AssetManager.LoadTexture(System.String,System.Boolean)">
            <summary>Loads asynchronously and caches the textures.</summary>
            <param name="isAsync"></param>
            <param name="filename">Filename</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AssetManager.LoadTextureFromAssembly(System.String,System.Boolean)">
            <summary>Caches the textures asynchronously loaded from files embedded in the assembly.</summary>
            <param name="isAsync"></param>
            <param name="filename">Filename</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AssetManager.GetTexture(System.String)">
            <summary>Obtains the texture.</summary>
            <param name="filename">Filename</param>
            <returns>Returns null if not loaded.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AssetManager.GetImageSize(System.String)">
            <summary>Obtains the texture.</summary>
            <param name="filename">Filename</param>
            <returns>Returns null if not loaded.</returns>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SystemImageAsset">
            <summary>System image asset</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ButtonBackgroundNormal">
            <summary>Button normally displayed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ButtonBackgroundPressed">
            <summary>Button displayed when pressed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ButtonBackgroundDisabled">
            <summary>Button displayed when disabled</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.CheckBoxCheckedNormal">
            <summary>Check box normally displayed (checked)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.CheckBoxUncheckedNormal">
            <summary>Check box normally displayed (unchecked)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.CheckBoxCheckedPressed">
            <summary>Check box displayed when button is pressed (checked)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.CheckBoxUncheckedPressed">
            <summary>Check box displayed when button is pressed (unchecked)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.CheckBoxCheckedDisabled">
            <summary>Check box displayed when disabled (checked)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.CheckBoxUncheckedDisabled">
            <summary>Check box displayed when disabled (unchecked)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.RadioButtonCheckedNormal">
            <summary>Radio button normally displayed (selected)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.RadioButtonUncheckedNormal">
            <summary>Radio button normally displayed (unselected)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.RadioButtonCheckedPressed">
            <summary>Radio button displayed when button is pressed (selected)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.RadioButtonUncheckedPressed">
            <summary>Radio button displayed when button is pressed (unselected)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.RadioButtonCheckedDisabled">
            <summary>Radio button displayed when disabled (selected)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.RadioButtonUncheckedDisabled">
            <summary>Radio button displayed when disabled (unselected)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderHorizontalBaseNormal">
            <summary>Slider base when enabled (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderHorizontalBaseDisabled">
            <summary>Slider base when disabled (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderHorizontalBarNormal">
            <summary>Slider bar when enabled (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderHorizontalBarDisabled">
            <summary>Slider bar when disabled (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderHorizontalHandleNormal">
            <summary>Slider handle normally displayed (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderHorizontalHandlePressed">
            <summary>Slider handle displayed when button is pressed (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderHorizontalHandleDisabled">
            <summary>Slider handle displayed when disabled (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderVerticalBaseNormal">
            <summary>Slider base when enabled (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderVerticalBaseDisabled">
            <summary>Slider base when disabled (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderVerticalBarNormal">
            <summary>Slider bar when enabled (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderVerticalBarDisabled">
            <summary>Slider bar when disabled (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderVerticalHandleNormal">
            <summary>Slider handle normally displayed (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderVerticalHandlePressed">
            <summary>Slider handle displayed when button is pressed (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SliderVerticalHandleDisabled">
            <summary>Slider handle displayed when disabled (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ProgressBarBase">
            <summary>Progress bar base</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ProgressBarNormal">
            <summary>Standard progress bar</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ProgressBarAccelerator">
            <summary>Progress bar with animation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ScrollBarHorizontalBackground">
            <summary>Scroll bar background (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ScrollBarHorizontalBar">
            <summary>Scroll bar (horizontal)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ScrollBarVerticalBackground">
            <summary>Scroll bar background (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ScrollBarVerticalBar">
            <summary>Scroll bar (vertical)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.EditableTextBackgroundNormal">
            <summary>Edit text background when enabled</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.EditableTextBackgroundDisabled">
            <summary>Edit text background when disabled</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.BusyIndicator">
            <summary>Busy indicator</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.DialogBackground">
            <summary>Dialog background</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.PagePanelNormal">
            <summary>Page of page panel when not displayed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.PagePanelActive">
            <summary>Page of page panel when displayed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ListPanelSeparatorTop">
            <summary>List item separator (top edge)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ListPanelSeparatorBottom">
            <summary>List item separator (bottom edge)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.ListPanelSectionSeparator">
            <summary>Section</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.MessageDialogBackground">
            <summary>Message dialog background</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.MessageDialogSeparator">
            <summary>Message dialog separator</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SpinBoxBase">
            <summary>Background of spin box</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.SpinBoxCenter">
            <summary>Center of spin box</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.PopupListBackgroundNormal">
            <summary>Background of normal pop-up list</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.PopupListBackgroundPressed">
            <summary>Background of pop-up list when pressed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.PopupListBackgroundDisabled">
            <summary>Background of pop-up list when disabled</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.PopupListItemFocus">
            <summary>Focus of the item in the pop-up list</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.BackButtonBackgroundNormal">
            <summary>Back button normally displayed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.BackButtonBackgroundDisabled">
            <summary>Back button displayed when disabled</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.BackButtonBackgroundPressed">
            <summary>Back button displayed when pressed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.NavigationBarBackground">
            <summary>Background of navigation bar</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.FocusRoundedCorner">
            <summary>Focus of the rectangle with rounded corners</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.FocusRectangle">
            <summary>Focus of the rectangle</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.FocusCircle">
            <summary>Focus of the circle</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SystemImageAsset.FocusListItem">
            <summary>Focus of the list item</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ImageScaleType">
            <summary>Image scale</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ImageScaleType.Center">
            <summary>Displays the image in the center without scaling.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ImageScaleType.Stretch">
            <summary>Ignore the aspect ratio and fill the screen.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ImageScaleType.AspectInside">
            <summary>Scale with a fixed aspect ratio until the interior edge.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ImageScaleType.AspectOutside">
            <summary>Scale with a fixed aspect ratio until the exterior edge.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ImageScaleType.NinePatch">
            <summary>Performs scaling using 9-patch.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ImageBox">
            <summary>A widget that displays an image</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageBox.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ImageBox.Render">
            <summary>Renders a scene graph.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageBox.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageBox.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageBox.Image">
            <summary>Obtains and sets the image.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageBox.NinePatchMargin">
            <summary>Obtains and sets the 9-patch information of the image.</summary>
            <remarks>Enabled only when ImageScaleType is NinePatch.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageBox.ImageScaleType">
            <summary>Obtains and sets the scale of the image.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageBox.CropArea">
            <summary>Obtains and sets the clip area of the image.</summary>
            <remarks>No clipping is performed if everything is 0. The clipped image is scaled when set at the same time as ImageScaleType.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ImageBox.BlendMode">
            <summary>Obtains and sets the blend mode.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.JumpFlipEffectAxis">
            <summary>JumpFlipEffect rotation axis</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.JumpFlipEffectAxis.X">
            <summary>X-axis</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.JumpFlipEffectAxis.Y">
            <summary>Y-axis</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.JumpFlipEffect">
            <summary>Effect that jumps forward, flips, and then changes</summary>
            <remarks>The front is the old widget and the back is the new widget. Each has the same size. It can also fall to a new position while jumping and flipping.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Constructor</summary>
            <param name="currentWidget">Widget being displayed</param>
            <param name="nextWidget">Next widget to be displayed</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="currentWidget">Widget being displayed</param>
            <param name="nextWidget">Next widget to be displayed</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.NextWidget">
            <summary>Obtains and sets the next widget to be displayed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.Revolution">
            <summary>Obtains and sets the number of rotations. (Half rotation = 1)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.JumpHeight">
            <summary>Obtains and sets the height of the jump.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.Time">
            <summary>Obtains and sets the effect time.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.JumpDelay">
            <summary>Obtains and sets the time until rotation starts.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.ToDegreeDelay">
            <summary>Obtains and sets the angle when rotation starts.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipEffect.RotationAxis">
            <summary>Obtains and sets the rotation axis.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.JumpFlipTransitionSpeed">
            <summary>Rotation speed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.JumpFlipTransitionSpeed.Fast">
            <summary>High speed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.JumpFlipTransitionSpeed.Slow">
            <summary>Low speed</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.JumpFlipTransitionRotateDirection">
            <summary>JumpFlip rotation direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.JumpFlipTransitionRotateDirection.ClockWise">
            <summary>Clock-wise</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.JumpFlipTransitionRotateDirection.CounterClockWise">
            <summary>Counter clock-wise</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.JumpFlipTransition">
            <summary>Transition that jumps forward, flips, and then changes</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipTransition.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipTransition.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipTransition.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of transition update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.JumpFlipTransition.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipTransition.Speed">
            <summary>Obtains and sets the rotation speed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.JumpFlipTransition.RotateDirection">
            <summary>Obtains and sets the rotation direction.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.KeyEventType">
            <summary>Type of key event</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyEventType.Up">
            <summary>Released</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyEventType.Down">
            <summary>Pressed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyEventType.LongPress">
            <summary>Long press</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyEventType.Repeat">
            <summary>Continuous press</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyEventType.EachFrameRepeat">
            <summary>Repeat for each frame</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyEventType.Cancel">
            <summary>Cancel</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.KeyType">
            <summary>Type of key</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Left">
            <summary>Left directional key</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Up">
            <summary>Up directional key</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Right">
            <summary>Right directional key</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Down">
            <summary>Down directional key</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Enter">
            <summary>Enter button</summary>
            <remarks>Circle or cross button</remarks>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Back">
            <summary>Back button</summary>
            <remarks>Circle or cross button</remarks>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Square">
            <summary>Square button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Triangle">
            <summary>Triangle button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Start">
            <summary>Start button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Select">
            <summary>Select button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.L">
            <summary>L button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.R">
            <summary>R button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Circle">
            @internal
            <summary>Circle button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.KeyType.Cross">
            @internal
            <summary>Cross button</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.KeyEvent">
            <summary>Key event information</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.KeyEvent.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.KeyEvent.#ctor(Sce.PlayStation.HighLevel.UI.KeyType,Sce.PlayStation.HighLevel.UI.KeyEventType,System.TimeSpan,System.TimeSpan)">
            <summary>Constructor</summary>
            <param name="keyType">Type of key</param>
            <param name="keyEventType">Type of key event</param>
            <param name="time">Time event occurred</param>
            <param name="downTime">Time key was pressed</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.KeyEvent.#ctor(Sce.PlayStation.HighLevel.UI.KeyType,Sce.PlayStation.HighLevel.UI.KeyEventType,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>Constructor</summary>
            <param name="keyType">Type of key</param>
            <param name="keyEventType">Type of key event</param>
            <param name="time">Time event occurred</param>
            <param name="downTime">Time key was pressed</param>
            <param name="enabledEachFrame"></param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEvent.KeyEventType">
            <summary>Obtains and sets the type of key event.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEvent.KeyType">
            <summary>Obtains and sets the type of key.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEvent.Time">
            <summary>Obtains and sets the time an event occurred.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEvent.DownTime">
            <summary>Obtains and sets the time a key was pressed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEvent.Forward">
            <summary>Obtains and sets whether to forward the event. Default value is False.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEvent.Handled">
            <summary>Obtains and sets whether an event has been processed</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEvent.EnabledEachFrameRepeat">
            <summary>Obtains and sets whether to enable a key repeat event for each frame</summary>
            <remarks>When this value is set to true, KeyEventType is such that, from the next frame, the EachFrameRepeat event is distributed for each frame.
            This value is enabled only for the current KeyType, and the value is retained while the key is pressed, but it is reset to false when the key is released.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.KeyEventArgs">
            <summary>Key event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.KeyEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEventArgs.Time">
            <summary>Obtains and sets the time an event occurred.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEventArgs.DownTime">
            <summary>Obtains and sets the time a key was pressed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEventArgs.KeyType">
            <summary>Obtains and sets the type of key.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEventArgs.KeyEventType">
            <summary>Obtains and sets the type of key event.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEventArgs.Forward">
            <summary>Obtains and sets whether to forward a key event included in a key event argument. Default value is False.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEventArgs.Handled">
            <summary>Obtains and sets whether an event has been processed</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.KeyEventArgs.EnabledEachFrameRepeat">
            <summary>Obtains and sets whether to enable a key repeat event for each frame</summary>
            <remarks>When this value is set to true, KeyEventType is such that, from the next frame, the EachFrameRepeat event is distributed for each frame.
            This value is enabled only for the current KeyType, and the value is retained while the key is pressed, but it is reset to false when the key is released.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.HorizontalAlignment">
            <summary>Horizontal alignment</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.HorizontalAlignment.Left">
            <summary>Align left</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.HorizontalAlignment.Center">
            <summary>Center</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.HorizontalAlignment.Right">
            <summary>Align right</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.VerticalAlignment">
            <summary>Vertical alignment</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.VerticalAlignment.Top">
            <summary>Align top</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.VerticalAlignment.Middle">
            <summary>Center</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.VerticalAlignment.Bottom">
            <summary>Align bottom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TextTrimming">
            <summary>Cropping method of character string</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextTrimming.None">
            <summary>No cropping (cut text in the middle)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextTrimming.Character">
            <summary>Crop by individual characters</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextTrimming.Word">
            <summary>Crop by individual words</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextTrimming.EllipsisCharacter">
            <summary>Crop by individual characters and insert ellipsis (...)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextTrimming.EllipsisWord">
            <summary>Crop by individual words and insert ellipsis (...)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LineBreak">
            <summary>Break method of character string</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.LineBreak.Character">
            <summary>By individual characters</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.LineBreak.Word">
            <summary>By individual words</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.LineBreak.Hyphenation">
            <summary>Break by individual characters and insert a hyphen.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.LineBreak.AtCode">
            <summary>Break with a line feed character.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Label">
            <summary>A widget that displays a character string</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Label.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Label.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Label.Render">
            <summary>Renders a scene graph.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.Text">
            <summary>Obtains and sets the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.Font">
            <summary>Obtains and sets the font of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.TextColor">
            <summary>Obtains and sets the color of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.TextShadow">
            <summary>Obtains and sets the information of the shadow of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.BackgroundColor">
            <summary>Obtains and sets the background color.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.HorizontalAlignment">
            <summary>Obtains and sets the horizontal alignment.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.VerticalAlignment">
            <summary>Obtains and sets the vertical alignment.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.LineBreak">
            <summary>Obtains and sets the break method of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.TextTrimming">
            <summary>Obtains and sets the cropping method of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.LineGap">
            <summary>Obtains and sets the row spacing.</summary>
            <remarks>Default value is 0</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Label.TextHeight">
            <summary>Test height</summary>
            <remarks>Height (pixels) of the multiple-line text rendered with current settings. The rendered text will be wrapped around at the current width, LineBreak.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LinkedTree`1">
            @internal
            <summary>Tree that enables scanning of the entire tree as a list</summary>
            <remarks>Enables processing of all elements that do not rely on recursive processing that never performs new inside</remarks>
            <typeparam name="T">Element type</typeparam>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LinkedTree`1.#ctor(`0)">
            <summary>Constructor</summary>
            <param name="value">Linked value</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LinkedTree`1.AddChildFirst(Sce.PlayStation.HighLevel.UI.LinkedTree{`0})">
            <summary>Adds a child element to the beginning.</summary>
            <param name="child">Element to be added</param>
            <remarks>Moves it to the beginning if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LinkedTree`1.AddChildLast(Sce.PlayStation.HighLevel.UI.LinkedTree{`0})">
            <summary>Adds a child element to the end.</summary>
            <param name="child">Element to be added</param>
            <remarks>Moves it to the end if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LinkedTree`1.InsertChildBefore(Sce.PlayStation.HighLevel.UI.LinkedTree{`0})">
            <summary>Adds itself as an element immediately before the specified child element.</summary>
            <param name="tree">Child element to come immediately after</param>
            <remarks>Moves it immediately in front of the specified child element if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LinkedTree`1.InsertChildAfter(Sce.PlayStation.HighLevel.UI.LinkedTree{`0})">
            <summary>Adds itself as an element immediately after the specified child element.</summary>
            <param name="tree">Child element to come immediately before</param>
            <remarks>Moves it immediately after the specified child element if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LinkedTree`1.RemoveChild">
            <summary>Deletes itself from the parent.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LinkedTree`1.Clear">
            <summary>Deletes all child elements.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.Value">
            <summary>Obtains the linked value.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.Parent">
            <summary>Obtains the parent.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.PreviousAsList">
            <summary>Obtains the element before the entire tree was treated as a list.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.NextAsList">
            <summary>Obtains the element after the entire tree was treated as a list.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.PreviousSibling">
            <summary>Obtains the previous brother.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.NextSibling">
            <summary>Obtains the next brother.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.FirstChild">
            <summary>Obtains the start child.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.LastChild">
            <summary>Obtains the end child.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LinkedTree`1.LastDescendant">
            <summary>Obtains the end element of one's own descendant.</summary>
            <remarks>This is used as the termination condition of list processing.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ListPanel">
            <summary>List widget with multiple rows</summary>
            <remarks>A grouping feature and index feature are available. Item details can be customized.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.OnResetState">
            <summary>Status reset handler</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.OnPreviewKeyEvent(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Advance key event handler</summary>
            <param name="keyEvent">Key event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.SetListItemCreator(Sce.PlayStation.HighLevel.UI.ListItemCreator)">
            <summary>Registers the method of creating items.</summary>
            <param name="creator">Method of creating items</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.SetListItemUpdater(Sce.PlayStation.HighLevel.UI.ListItemUpdater)">
            <summary>Registers the method of updating items.</summary>
            <param name="updater">Method of updating items</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.Move(System.Single)">
            <summary>Moves a specified distance. Moves up when a negative number is specified, and moves down when a positive number is specified.</summary>
            <param name="moveDistance">Travel distance (pixels)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.UpdateItems">
            <summary>Updates all currently displayed items.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.GetListItem(System.Int32)">
            <summary>Obtains the specified index item</summary>
            <remarks>If an index outside the display range is specified, null is returned.</remarks>
            <param name="index">Item index for all lists</param>
            <returns>Item</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanel.GetListItem(System.Int32,System.Int32)">
            <summary>Obtains the specified index item</summary>
            <remarks>If an index outside the display range is specified, null is returned.</remarks>
            <param name="sectionIndex">Index of section</param>
            <param name="indexInSection">Item index within section</param>
            <returns>Item</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.BackgroundColor">
            <summary>Obtains and sets the background color.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.Sections">
            <summary>Obtains and sets the collection of a section.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.AllItemCount">
            <summary>Obtains the total number of items.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.ShowSection">
            <summary>Obtains and sets whether to display a section.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.ShowEmptySection">
            <summary>Obtains and sets whether to display empty sections.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.ShowItemBorder">
            <summary>Obtains and sets whether to display the border images of an item.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.ScrollBarVisibility">
            <summary>Obtains and sets the scroll bar view.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.SectionFont">
            <summary>Obtains and sets the section font.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.SectionTextColor">
            <summary>Obtains and sets the section text color.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanel.SectionBackgroundColor">
            <summary>Obtains and sets the section background color.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.ListPanel.SelectItemChanged">
            <summary>Event called when item is selected</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ListItemCreator">
            <summary>Delegate the method of creating items</summary>
            <returns>Item</returns>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ListItemUpdater">
            <summary>Delegate the method of updating items</summary>
            <param name="item">Item</param>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ListSection">
            <summary>Container part for list section</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSection.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSection.#ctor(System.String,System.Int32)">
            <summary>Constructor</summary>
            <param name="title">Section title</param>
            <param name="itemCount">Number of items registered to a section</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListSection.Title">
            <summary>Obtains and sets the section title.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListSection.ItemCount">
            <summary>Obtains and sets the number of items registered to a section.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.ListSection.ItemChanged">
            <summary>Event when the item registered to a section changes</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ListSectionCollection">
            <summary>Collection of sections</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.IndexOf(Sce.PlayStation.HighLevel.UI.ListSection)">
            <summary>Obtains the index of a specified section.</summary>
            <param name="section">Section to search for</param>
            <returns>If the section to search for exists, the index of that section. Otherwise, -1.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.Insert(System.Int32,Sce.PlayStation.HighLevel.UI.ListSection)">
            <summary>Inserts the section in a specified index position.</summary>
            <param name="index">Index of position to insert.</param>
            <param name="section">Section to insert</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.RemoveAt(System.Int32)">
            <summary>Deletes the section in a specified index.</summary>
            <param name="index">Index of section to be deleted</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.Add(Sce.PlayStation.HighLevel.UI.ListSection)">
            <summary>Adds a section.</summary>
            <param name="section">Section to be added</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.Clear">
            <summary>Deletes all sections.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.Contains(Sce.PlayStation.HighLevel.UI.ListSection)">
            <summary>Determines whether a specific section is stored.</summary>
            <param name="section">Section to search for</param>
            <returns>If the section to search for exists, then true; otherwise, false.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.CopyTo(Sce.PlayStation.HighLevel.UI.ListSection[],System.Int32)">
            <summary>Copies a section to an array.</summary>
            <param name="array">1D array where a section will be copied</param>
            <param name="arrayIndex">Index of an array that is the start position for copying</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.Remove(Sce.PlayStation.HighLevel.UI.ListSection)">
            <summary>Deletes a specific section found first.</summary>
            <param name="section">Section to be deleted</param>
            <returns>If the section to be deleted exists, then true. Otherwise, false.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.System#Collections#Generic#IEnumerable{Sce#PlayStation#HighLevel#UI#ListSection}#GetEnumerator">
            <summary>Returns the enumerator that repetitively handles the collection.</summary>
            <returns>IEnumerator object that can be used to repetitively handle a collection</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListSectionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns the enumerator that repetitively handles the collection.</summary>
            <returns>IEnumerator object that can be used to repetitively handle a collection</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListSectionCollection.AllItemCount">
            <summary>Obtains the total number of items registered to a section.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListSectionCollection.Item(System.Int32)">
            <summary>Obtains and sets the section in a specified index.</summary>
            <param name="index">Index of section to be obtained</param>
            <returns>Section in a specified index</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListSectionCollection.Count">
            <summary>Obtains the number of sections.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListSectionCollection.IsReadOnly">
            <summary>Obtains whether to be read-only.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.ListSectionCollection.ItemsChanged">
            <summary>Handler called when the content has changed</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LiveFlipPanel">
            <summary>A container widget that rotates depending on an event</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.Start">
            <summary>Starts the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.Stop">
            <summary>Stops the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.Stop(System.Boolean)">
            <summary>Stops the animation.</summary>
            <param name="withAnimate">Whether to execute the animation</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.OnResetState">
            <summary>Status reset handler</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.FlipCount">
            <summary>Obtains and sets the number of rotations. (Half rotation = 1)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.TouchEnabled">
            <summary>Obtains and sets whether to enable touch operations (drag, flick).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.FrontPanel">
            <summary>Obtains and sets the front panel.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveFlipPanel.BackPanel">
            <summary>Obtains and sets the back panel.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LiveJumpPanel">
            <summary>A container widget that jumps a child widget to the foreground of the screen.</summary>
            <remarks>Making them jump in order from the widget close to a specified position is possible.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveJumpPanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveJumpPanel.Jump">
            <summary>Starts the jump.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveJumpPanel.Jump(System.Single,System.Single)">
            <summary>Starts the jump.</summary>
            <param name="x">X coordinate in the local coordinate system</param>
            <param name="y">Y coordinate in the local coordinate system</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveJumpPanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveJumpPanel.JumpHeight">
            <summary>Obtains and sets the height of the jump.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveJumpPanel.JumpDelayTime">
            <summary>Obtains and sets the delay time until each child widget jumps. (ms/pixel)</summary>
            <remarks>It is possible to specify the delay in ms per pixel for the distance from the jump center to the child widget.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveJumpPanel.JumpTime">
            <summary>Obtains and sets the time until each child widget jumps and the first one lands. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveJumpPanel.TiltAngle">
            <summary>Obtains and sets the maximum tilting angle of the child widget. (Radian)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LiveListPanel">
            <summary>List widgets scrolled by irregular position of items.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveListPanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveListPanel.StartItemRequest">
            <summary>Starts the request of an item.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveListPanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveListPanel.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveListPanel.OnResetState">
            <summary>Status reset handler</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveListPanel.SetListItemCreator(Sce.PlayStation.HighLevel.UI.ListItemCreator)">
            <summary>Registers the method of creating items.</summary>
            <param name="creator">Method of creating items</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveListPanel.SetListItemUpdater(Sce.PlayStation.HighLevel.UI.ListItemUpdater)">
            <summary>Registers the method of updating items.</summary>
            <param name="updater">Method of updating items</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveListPanel.OnPreviewKeyEvent(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Advance key event handler</summary>
            <param name="keyEvent">Key event</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.BackgroundColor">
            <summary>Obtains and sets the background color.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemHeight">
            <summary>Obtains and sets the height of an item.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemWidth">
            <summary>Obtains and sets the height of an item.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemCount">
            <summary>Obtains and sets the total number of items.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemVerticalGap">
            <summary>Obtains and sets the height of an item.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ScrollBarVisibility">
            <summary>Obtains and sets the scroll bar view.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemTiltAngle">
            <summary>Maximum tilt of an item (radian).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemSlideInTime">
            <summary>Time required for an item to enter from the side (ms).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemSlideInHeight">
            <summary>Height of Z when an item enters from the side.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemSlideInTiltAngle">
            <summary>Angle of the Y axis when an item enters from the side.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveListPanel.ItemSlideInOffset">
            <summary>Horizontal offset when an item enters from the side.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LiveScrollPanel">
            <summary>A container widget scrolled while the shape is distorted</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.AddChildFirst(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the beginning.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the beginning if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.AddChildLast(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the end.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the end if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.InsertChildBefore(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately in front of the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="nextChild">Child widget immediately after the inserted child widget</param>
            <remarks>Moves it immediately in front of the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.InsertChildAfter(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately after the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="prevChild">Child widget immediately in front of the inserted child widget</param>
            <remarks>Moves it immediately after the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.RemoveChild(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Deletes the specified child widget.</summary>
            <param name="child">Child widget to be deleted</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.OnResetState">
            <summary>Resets the state.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <remarks>If elapsedTime is 10 seconds or more, the update processing is skipped.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.Elasticity">
            <summary>Obtains and sets the distortion elasticity.</summary>
            <remarks>The vibration increases as the value above 0 increases. Default value is 1.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.PanelX">
            <summary>Obtains and sets the X coordinate of the panel in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.PanelY">
            <summary>Obtains and sets the Y coordinate of the panel in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.PanelWidth">
            <summary>Obtains and sets the width of the panel.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.PanelHeight">
            <summary>Obtains and sets the height of the panel.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.MaxTextureWidth">
            <summary>Obtains and sets the maximum value of the texture width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.MaxTextureHeight">
            <summary>Obtains and sets the maximum value of the texture height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.PanelColor">
            <summary>Obtains and sets the color of the panel.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.HorizontalScroll">
            <summary>Obtains and sets whether to perform horizontal scrolling.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.VerticalScroll">
            <summary>Obtains and sets whether to perform vertical scrolling.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveScrollPanel.Children">
            <summary>Obtains the child widget.</summary>
            <remarks>Returns the enumerator that repetitively handles the collection.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LiveSphere">
            <summary>Spherical widget</summary>
            <remarks>It is possible to rotate by flicking.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSphere.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSphere.SetSize(System.Single,System.Single)">
            <summary>Sets the size.</summary>
            <remarks>The sphere diameter is a value of the smaller Width or Height, and is displayed in the center.</remarks>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSphere.Start">
            <summary>Rotates.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSphere.Stop">
            <summary>Stops the rotation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSphere.Stop(System.Boolean)">
            <summary>Stops the rotation.</summary>
            <param name="withAnimate">Flag determining whether to perform a snap animation when stopped</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSphere.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSphere.OnResetState">
            <summary>Status reset handler</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSphere.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.TurnCount">
            <summary>Obtains and sets the number of rotations. (Half rotation = 1)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.ZAxis">
            <summary>Obtains and sets the angle (radian) of the Z-axis rotation.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.YAxis">
            <summary>Obtains and sets the angle (radian) of the Y-axis rotation.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.TouchEnabled">
            <summary>Obtains and sets whether to enable touch operations (drag, flick).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.ToggleEnabled">
            <summary>Obtains and sets whether to enable the toggle operation.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.Width">
            <summary>Obtains and sets the width.</summary>
            <remarks>The sphere diameter is a value of the smaller Width or Height, and is displayed in the center.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.Height">
            <summary>Obtains and sets the height.</summary>
            <remarks>The sphere diameter is a value of the smaller Width or Height, and is displayed in the center.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.Image">
            <summary>Obtains and sets the image.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSphere.FrontFace">
            <summary>Obtains whether the front of the sphere is displayed.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.LiveSphere.ButtonAction">
            <summary>Handler called when a button action is fired</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LongPressGestureDetector">
            <summary>Long press detector</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LongPressGestureDetector.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LongPressGestureDetector.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Distributes a touch event.</summary>
            <param name="touchEvents">Touch event</param>
            <returns>Response to touch event distribution</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LongPressGestureDetector.OnResetState">
            <summary>Resets the state of gesture analysis.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LongPressGestureDetector.MaxDistance">
            <summary>Obtains and sets the maximum allowable distance from the first down position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LongPressGestureDetector.MinPressDuration">
            <summary>Obtains and sets the minimum time until a long press is detected. (ms)</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.LongPressGestureDetector.LongPressDetected">
            <summary>Long press event handler</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LongPressEventArgs">
            <summary>Long press event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LongPressEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>Constructor</summary>
            <param name="source">Event source widget</param>
            <param name="worldPosition">Position in the world (screen) coordinate system</param>
            <param name="localPosition">Position in the local coordinate system</param>
            <param name="elapsedTime">Elapsed time</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LongPressEventArgs.WorldPosition">
            <summary>Obtains the position in the world (screen) coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LongPressEventArgs.LocalPosition">
            <summary>Obtains the position in the local coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LongPressEventArgs.ElapsedTime">
            <summary>Obtains and sets the elapsed time. (ms)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MessageDialogStyle">
            <summary>Types of message dialogs</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MessageDialogStyle.Ok">
            <summary>Message dialog of the OK button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MessageDialogStyle.OkCancel">
            <summary>Message dialog of the OK/Cancel button</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MessageDialogResult">
            <summary>Types of message dialog buttons</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MessageDialogResult.Ok">
            <summary>OK button</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MessageDialogResult.Cancel">
            <summary>Cancel button</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MessageDialog">
            <summary>Specialized modal dialog for displaying warning messages</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MessageDialog.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MessageDialog.#ctor(Sce.PlayStation.HighLevel.UI.MessageDialogStyle,System.String,System.String)">
            <summary>Constructor</summary>
            <param name="style">Types of message dialogs</param>
            <param name="title">Title character string</param>
            <param name="message">Message character string</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MessageDialog.CreateAndShow(Sce.PlayStation.HighLevel.UI.MessageDialogStyle,System.String,System.String)">
            <summary>Creates and displays a MessageDialog instance.</summary>
            <param name="style">Types of message dialogs</param>
            <param name="title">Title character string</param>
            <param name="message">Message character string</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MessageDialog.Render">
            <summary>Renders a scene graph.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MessageDialog.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MessageDialog.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MessageDialog.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MessageDialog.Message">
            <summary>Obtains and sets the message.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MessageDialog.Title">
            <summary>Obtains and sets the title.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MessageDialog.ShowTitle">
            <summary>Obtains and sets whether to display the title.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MessageDialog.Style">
            <summary>Obtains and sets the type of message dialog.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.MessageDialog.ButtonPressed">
            <summary>Handler called when the message dialog button is pressed</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MessageDialogButtonEventArgs">
            <summary>Event argument of message dialog</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MessageDialogButtonEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.MessageDialogResult)">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MessageDialogButtonEventArgs.Result">
            <summary>Obtains the type of button of the message dialog.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MoveEffectInterpolator">
            <summary>Interpolation function for MoveEffect</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MoveEffectInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MoveEffectInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MoveEffectInterpolator.Overshoot">
            <summary>Overshoot</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MoveEffectInterpolator.Elastic">
            <summary>Oscillation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MoveEffectInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MoveEffect">
            <summary>Effect that moves from the current position to a specified location</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MoveEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MoveEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.Single,System.Single,System.Single,Sce.PlayStation.HighLevel.UI.MoveEffectInterpolator)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="x">X coordinate of destination in the parent coordinate system</param>
            <param name="y">Y coordinate of destination in the parent coordinate system</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MoveEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,System.Single,System.Single,System.Single,Sce.PlayStation.HighLevel.UI.MoveEffectInterpolator)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="x">X coordinate of destination in the parent coordinate system</param>
            <param name="y">Y coordinate of destination in the parent coordinate system</param>
            <param name="interpolator">Interpolation function</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MoveEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MoveEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MoveEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MoveEffect.Time">
            <summary>Obtains and sets the duration. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MoveEffect.X">
            <summary>Obtains and sets the X coordinate of the destination in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MoveEffect.Y">
            <summary>Obtains and sets the Y coordinate of the destination in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MoveEffect.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MoveEffect.CustomInterpolator">
            <summary>Obtains and sets a custom interpolation function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.NinePatchMargin">
            <summary>Structure for storing 9-patch information</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.NinePatchMargin.Zero">
            <summary>Instance when the value of each member is 0</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.NinePatchMargin.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Constructor</summary>
            <param name="left">Left margin</param>
            <param name="top">Top margin</param>
            <param name="right">Right margin</param>
            <param name="bottom">Bottom margin</param>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.NinePatchMargin.Left">
            <summary>Left margin</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.NinePatchMargin.Top">
            <summary>Top margin</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.NinePatchMargin.Right">
            <summary>Right margin</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.NinePatchMargin.Bottom">
            <summary>Bottom margin</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PagePanel">
            <summary>A container widget that scrolls by page</summary>
            <remarks>Made up of multiple panels.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.AddPage">
            <summary>Adds an end page.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.AddPage(Sce.PlayStation.HighLevel.UI.Panel)">
            <summary>Adds an end page.</summary>
            <param name="panel">Panel object to be added</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.InsertPage(System.Int32,Sce.PlayStation.HighLevel.UI.Panel)">
            <summary>Inserts a panel at the position of the specified page number.</summary>
            <param name="index">Position for inserting a page (0 - )</param>
            <param name="panel">Panel object of page to be inserted</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or greater than PageCount</exception>
            <exception cref="T:System.ArgumentNullException">Panel is null</exception>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.InsertPage(System.Int32)">
            <summary>Inserts a page at the position of the specified page number.</summary>
            <param name="index">Position for inserting a page (0 - )</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or greater than PageCount</exception>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.RemovePage(Sce.PlayStation.HighLevel.UI.Panel)">
            <summary>Deletes the specified page</summary>
            <param name="panel">Page to be deleted</param>
            <returns>If panel is deleted correctly, then true. Otherwise, false. If panel cannot be found, returns false.</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.RemovePageAt(System.Int32)">
            <summary>Deletes the page of the specified page number.</summary>
            <param name="index">Page number to be deleted (0 - )</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or equal to or greater than PageCount</exception>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.GetPage(System.Int32)">
            <summary>Obtains the panel of a specified page.</summary>
            <param name="index">Index of page to be obtained</param>
            <returns>Panel</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.ScrollTo(System.Int32,System.Boolean)">
            <summary>Scrolls to the specified page position.</summary>
            <param name="index">Index of page</param>
            <param name="withAnimation">Whether to execute the animation</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.OnResetState">
            <summary>Status reset handler</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.OnPageIndexChanged">
            <summary>Called when the page number changes and a new page is completely displayed</summary>
            <remarks>Called when the animation is completed, such as when flicking continuously</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PagePanel.OnPreviewKeyEvent(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Advance key event handler</summary>
            <param name="keyEvent">Key event</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PagePanel.PageCount">
            <summary>Obtains the number of pages.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PagePanel.CurrentPageIndex">
            <summary>Obtains and sets the current page number.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PagePanel.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PagePanel.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PagePanel.Focusable">
            <summary>Obtains and sets whether to set the focus</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PinchGestureDetector">
            <summary>Pinch detector</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PinchGestureDetector.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PinchGestureDetector.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Distributes a touch event.</summary>
            <param name="touchEvents">Touch event</param>
            <returns>Response to touch event distribution</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PinchGestureDetector.OnResetState">
            <summary>Resets the state of gesture analysis.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PinchGestureDetector.MinPinchDistance">
            <summary>Obtains and sets the minimum pinch distance.</summary>
            <remarks>Detects the pinch when the relative distance of two becomes equal to or greater than MinPinchDirection after two are moved down.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.PinchGestureDetector.PinchDetected">
            <summary>Pinch event handler</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.PinchGestureDetector.PinchStartDetected">
            <summary>Pinch start event handler</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.PinchGestureDetector.PinchEndDetected">
            <summary>Pinch end event handler</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PinchEventArgs">
            <summary>Pinch event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PinchEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.Single,System.Single,System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Constructor</summary>
            <param name="source">Event source widget</param>
            <param name="distance">Pinch distance</param>
            <param name="scale">Pinch scale</param>
            <param name="angle">Pinch angle</param>
            <param name="worldCenter">Center position in the world (screen) coordinate system of a pinch</param>
            <param name="localCenter">Center position in the local coordinate system of a pinch</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PinchEventArgs.Distance">
            <summary>Obtains the distance between the pinching fingers.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PinchEventArgs.Scale">
            <summary>Obtains the pinch scale.</summary>
            <remarks>Value based on the distance between the fingers at the time a pinch starts</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PinchEventArgs.Angle">
            <summary>Obtains the pinch angle.</summary>
            <remarks>Value based on the angle of the fingers at the time a pinch starts</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PinchEventArgs.WorldCenterPosition">
            <summary>Obtains the position in the world (screen) coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PinchEventArgs.LocalCenterPosition">
            <summary>Obtains the center position of a pinch gesture in the local coordinate system.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ProgressBarStyle">
            <summary>Type of progress bar</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ProgressBarStyle.Normal">
            <summary>Standard</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ProgressBarStyle.Animation">
            <summary>With animation</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ProgressBar">
            <summary>A widget used to display the progress level</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ProgressBar.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ProgressBar.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ProgressBar.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ProgressBar.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ProgressBar.Height">
            <summary>Obtains the height.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ProgressBar.Progress">
            <summary>Obtains and sets the level of progress.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ProgressBar.Style">
            <summary>Obtains and sets the type of progress bar.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PushTransitionInterpolator">
            <summary>Interpolation function</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PushTransitionInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PushTransitionInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PushTransitionInterpolator.Overshoot">
            <summary>Overshoot</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PushTransitionInterpolator.Elastic">
            <summary>Oscillation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PushTransitionInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PushTransition">
            <summary>Transition in which the new scene pushes out the old scene</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PushTransition.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PushTransition.#ctor(System.Single,Sce.PlayStation.HighLevel.UI.FourWayDirection,Sce.PlayStation.HighLevel.UI.PushTransitionInterpolator)">
            <summary>Constructor</summary>
            <param name="time">Duration (ms)</param>
            <param name="direction">Transition travel direction</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PushTransition.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PushTransition.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PushTransition.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PushTransition.Time">
            <summary>Obtains and sets the duration. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PushTransition.MoveDirection">
            <summary>Obtains and sets the transition travel direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PushTransition.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PushTransition.CustomInterpolator">
            <summary>Obtains and sets a custom interpolation function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.RootUIElement">
            <summary>Root of the element tree</summary>
            <remarks>Each widget has one.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIElement">
            <summary>Base class of rendering element</summary>
            <remarks>Constructs a scene graph below each widget.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.Dispose">
            <summary>Frees the unmanaged resources held by this UIElement and child UIElements.</summary>
            <remarks>Recursively frees this UIElement and all UIElements in and below its tree.
            Once Dispose() has been called for a UIElement, it cannot be reused.
            If objects that require Dispose have been created with UIElement derivative classes, DisposeSelf() must be overridden and Dispose must be called for them.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.Dispose(System.Boolean)">
            <summary>Frees the unmanaged resources held by this UIElement and child UIElements.</summary>
            <remarks>Deletes itself from a parent UIElement and recursively calls DisposeSelf() for child UIElements.
            When implementing Dispose with a derivative class, override DisposeSelf().</remarks>
            <param name="disposing">true when called from Dispose()</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.DisposeSelf">
            <summary>Frees the unmanaged resources held by this UIElement</summary>
            <remarks>This method is recursively called from Dispose() for the child UIElements.
            If objects that require Dispose have been created with derivative classes, this method must be overridden and Dispose must be called for them.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.SetPosition(System.Single,System.Single)">
            <summary>Sets the position in the parent coordinate system.</summary>
            <param name="x">X coordinate in the parent coordinate system</param>
            <param name="y">Y coordinate in the parent coordinate system</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.GetTexture">
            <summary>Obtains the texture</summary>
            <returns>Textures</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.AddChildFirst(Sce.PlayStation.HighLevel.UI.UIElement)">
            <summary>Adds a child element to the beginning.</summary>
            <param name="child">Child element to be added</param>
            <remarks>Moves it to the beginning if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.AddChildLast(Sce.PlayStation.HighLevel.UI.UIElement)">
            <summary>Adds a child element to the end.</summary>
            <param name="child">Child element to be added</param>
            <remarks>Moves it to the end if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.InsertChildBefore(Sce.PlayStation.HighLevel.UI.UIElement,Sce.PlayStation.HighLevel.UI.UIElement)">
            <summary>Inserts a specified child element immediately before.</summary>
            <param name="child">Child element to be inserted</param>
            <param name="nextChild">Child element to come immediately after the child element to be inserted</param>
            <remarks>Moves it immediately before the specified child element if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.InsertChildAfter(Sce.PlayStation.HighLevel.UI.UIElement,Sce.PlayStation.HighLevel.UI.UIElement)">
            <summary>Inserts a specified child element immediately after.</summary>
            <param name="child">Child element to be inserted</param>
            <param name="prevChild">Child element to come immediately before the child element to be inserted</param>
            <remarks>Moves it immediately after the specified child element if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.RemoveChild(Sce.PlayStation.HighLevel.UI.UIElement)">
            <summary>Deletes the specified child element.</summary>
            <param name="child">Child element to be deleted</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.SetupDrawState">
            <summary>Sets the rendering status.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.Render">
            <summary>Renders an element.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.SetupFinalAlpha">
            <summary>Calculates the final alpha value.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIElement.SetupSortValue">
            <summary>Sets the value to use with Z sort.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Disposed">
            <summary>Obtains whether Dispose is already performed</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.X">
            <summary>Obtains and sets the X coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Y">
            <summary>Obtains and sets the Y coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Alpha">
            <summary>Obtains and sets the transparency. (0 - 1)</summary>
            <remarks>Multiplies the transparency by all child elements and displays it.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Visible">
            <summary>Obtains and sets whether to display.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.TextureFilterMode">
            <summary>Obtains and sets the texture filter mode.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.TextureWrapMode">
            <summary>Obtains and sets the texture wrap mode.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Image">
            <summary>Obtains and sets the image.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.ZSort">
            <summary>Obtains and sets whether to Z sort.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Parent">
            <summary>Obtains the parent element.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Children">
            <summary>Obtains the child element.</summary>
            <remarks>Returns the enumerator that repetitively handles the collection.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.BlendMode">
            <summary>Obtains and sets the blend mode.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Transform3D">
            <summary>Obtains and sets the transformation matrix to the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.ZSortOffset">
            <summary>Obtains and sets the Z-sort offset.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.Culling">
            <summary>Obtains and sets whether to perform culling.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.ShaderType">
            <summary>Obtains and sets the shader program.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.InternalShaderType">
            <summary>Shader type for use inside</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.ShaderUniforms">
            <summary>Obtains and sets the Uniform table to use with the shader program.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIElement.LocalToWorld">
            <summary>Obtains the matrix to be converted from the local coordinate system to the world coordinate system.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.RootUIElement.#ctor(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.RootUIElement.SetupFinalAlpha">
            <summary>Calculates the final alpha value.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.RootWidget">
            <summary>Root of the widget tree</summary>
            <remarks>Each scene has one. Has the container feature.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.RootWidget.#ctor(Sce.PlayStation.HighLevel.UI.Scene)">
            <summary>Constructor</summary>
            <param name="scene">Scene</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.RootWidget.HitTest(Sce.PlayStation.Core.Vector2)">
            <summary>Always returns false since RootWidget of a normal scene does not hit</summary>
            <param name="screenPoint">Position in the screen coordinate system</param>
            <returns>Always false</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.RootWidget.X">
            <summary>Obtains the X coordinate in the parent coordinate system.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.RootWidget.Y">
            <summary>Obtains the Y coordinate in the parent coordinate system.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.RootWidget.Width">
            <summary>Obtains the width.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.RootWidget.Height">
            <summary>Obtains the height.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.RootWidget.Transform3D">
            <summary>Obtains the transformation matrix to the parent coordinate system.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UpdateEventArgs">
            <summary>Class storing data of update processing events</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UpdateEventArgs.#ctor(System.Single)">
            <summary>Constructor</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UpdateEventArgs.ElapsedTime">
            <summary>Obtains the elapsed time from the previous update (ms).</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ScrollBarOrientation">
            <summary>Scroll bar direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ScrollBarOrientation.Horizontal">
            <summary>Horizontal</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ScrollBarOrientation.Vertical">
            <summary>Vertical</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ScrollBar">
            <summary>Widget for understanding the scroll position on the screen</summary>
            <remarks>User cannot operate this.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollBar.#ctor(Sce.PlayStation.HighLevel.UI.ScrollBarOrientation)">
            <summary>Constructor</summary>
            <param name="orientation">Scroll bar direction</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollBar.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollBar.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollBar.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollBar.Length">
            <summary>Obtains and sets the entire size.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollBar.Orientation">
            <summary>Obtains the scroll bar direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollBar.BarPosition">
            <summary>Obtains and sets the bar position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollBar.BarLength">
            <summary>Obtains and sets the bar length.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ScrollBarVisibility">
            <summary>Scroll bar view</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ScrollBarVisibility.Visible">
            <summary>Always display</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ScrollBarVisibility.ScrollableVisible">
            <summary>Display when scrolling is enabled</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ScrollBarVisibility.ScrollingVisible">
            <summary>Display when scrolling</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ScrollBarVisibility.Invisible">
            <summary>Always hide</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ScrollPanel">
            <summary>A container widget which has the area where scrolling is enabled</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.AddChildFirst(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the beginning.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the beginning if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.AddChildLast(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the end.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the end if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.InsertChildBefore(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately in front of the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="nextChild">Child widget immediately after the inserted child widget</param>
            <remarks>Moves it immediately in front of the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.InsertChildAfter(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately after the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="prevChild">Child widget immediately in front of the inserted child widget</param>
            <remarks>Moves it immediately after the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.RemoveChild(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Deletes the specified child widget.</summary>
            <param name="child">Child widget to be deleted</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.ScrollTo(System.Single,System.Single,System.Boolean)">
            <summary>Scrolls to the specified position</summary>
            <remarks>Directions in which scrolling cannot be performed are ignored.</remarks>
            <param name="x">X coordinate of inside panel at top right. This is the value in which PanelX and positive and negative are inverted.</param>
            <param name="y">Y coordinate of inside panel at top right. This is the value in which PanelY and positive and negative are inverted.</param>
            <param name="withAnimation">Whether to execute the animation</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.OnPreviewKeyEvent(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Advance key event handler</summary>
            <param name="keyEvent">Key event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ScrollPanel.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.PanelX">
            <summary>Obtains and sets the X coordinate of the panel in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.PanelY">
            <summary>Obtains and sets the Y coordinate of the panel in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.PanelWidth">
            <summary>Obtains and sets the width of the panel.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.PanelHeight">
            <summary>Obtains and sets the height of the panel.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.PanelColor">
            <summary>Obtains and sets the color of the panel.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.ScrollBarVisibility">
            <summary>Obtains and sets the scroll bar view.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.HorizontalScroll">
            <summary>Obtains and sets whether to perform horizontal scrolling.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.VerticalScroll">
            <summary>Obtains and sets whether to perform vertical scrolling.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.Children">
            <summary>Obtains the child widget.</summary>
            <remarks>Returns the enumerator that repetitively handles the collection.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ScrollPanel.Focusable">
            <summary>Obtains and sets whether to set the focus</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ShaderType">
            <summary>Type of shader program</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ShaderType.SolidFill">
            <summary>One-color fill or vertex color rendering</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ShaderType.Texture">
            <summary>Normal texture rendering (RGBA format texture)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ShaderType.TextTexture">
            <summary>Text rendering (Alpha format texture)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ShaderType.OffscreenTexture">
            <summary>Offscreen texture rendering (texture rendered with RenderToTexture)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.InternalShaderType">
            @internal
            <summary>Type of shader program</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.InternalShaderType.SolidFill">
            <summary>One-color fill</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.InternalShaderType.TextureRgba">
            <summary>Render texture</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.InternalShaderType.TextureAlpha">
            <summary>Render text</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.InternalShaderType.PremultipliedTexture">
            <summary>Offscreen texture rendering (texture rendered with RenderToTexture)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.InternalShaderType.TextureAlphaShadow">
            <summary>Render text with shadow</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.InternalShaderType.LiveScrollPanel">
            <summary>Only for LiveScrollPanel</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.InternalShaderType.LiveSphere">
            <summary>Only for LiveSphere</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.InternalShaderType._count">
            <summary>dummy</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ShaderProgramManager">
            @internal
            <summary>Manage shader program</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ShaderProgramManager.shaderFileName">
            <summary>Shader program filename</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ShaderProgramManager.Initialize">
            <summary>Initializes.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ShaderProgramManager.Terminate(Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>Terminates.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ShaderProgramManager.GetShaderProgram(Sce.PlayStation.HighLevel.UI.InternalShaderType)">
            <summary>Obtains the shader program.</summary>
            <param name="type">Type of shader program</param>
            <returns>Shader program instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ShaderProgramManager.GetUniforms(Sce.PlayStation.HighLevel.UI.InternalShaderType)">
            <summary>Obtains a Uniform table.</summary>
            <param name="type">Type of shader program</param>
            <returns>Uniform table</returns>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SlideInEffectInterpolator">
            <summary>Interpolation function for SlideInEffect</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideInEffectInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideInEffectInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideInEffectInterpolator.Overshoot">
            <summary>Overshoot</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideInEffectInterpolator.Elastic">
            <summary>Oscillation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideInEffectInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SlideInEffect">
            <summary>Effect in which the object slides laterally into view from outside the screen</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideInEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideInEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.Single,Sce.PlayStation.HighLevel.UI.FourWayDirection,Sce.PlayStation.HighLevel.UI.SlideInEffectInterpolator)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="direction">Effect travel direction</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideInEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,System.Single,Sce.PlayStation.HighLevel.UI.FourWayDirection,Sce.PlayStation.HighLevel.UI.SlideInEffectInterpolator)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="direction">Effect travel direction</param>
            <param name="interpolator">Interpolation function</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideInEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideInEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideInEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideInEffect.Time">
            <summary>Obtains and sets the duration. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideInEffect.MoveDirection">
            <summary>Obtains and sets the effect travel direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideInEffect.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideInEffect.CustomInterpolator">
            <summary>Obtains and sets a custom interpolation function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SlideOutEffectInterpolator">
            <summary>Interpolation function for SlideOutEffect</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideOutEffectInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideOutEffectInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideOutEffectInterpolator.Overshoot">
            <summary>Overshoot</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideOutEffectInterpolator.Elastic">
            <summary>Oscillation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideOutEffectInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SlideOutEffect">
            <summary>Effect in which the object slides laterally out of view from the current position</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideOutEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideOutEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.Single,Sce.PlayStation.HighLevel.UI.FourWayDirection,Sce.PlayStation.HighLevel.UI.SlideOutEffectInterpolator)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="direction">Effect travel direction</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideOutEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,System.Single,Sce.PlayStation.HighLevel.UI.FourWayDirection,Sce.PlayStation.HighLevel.UI.SlideOutEffectInterpolator)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="direction">Effect travel direction</param>
            <param name="interpolator">Interpolation function</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideOutEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideOutEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideOutEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideOutEffect.Time">
            <summary>Obtains and sets the duration. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideOutEffect.MoveDirection">
            <summary>Obtains and sets the effect travel direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideOutEffect.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideOutEffect.CustomInterpolator">
            <summary>Obtains and sets a custom interpolation function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SliderOrientation">
            <summary>Slider direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SliderOrientation.Horizontal">
            <summary>Horizontal</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SliderOrientation.Vertical">
            <summary>Vertical</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Slider">
            <summary>A widget for adjusting numerical values, etc.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Slider.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Slider.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Slider.OnPreviewKeyEvent(Sce.PlayStation.HighLevel.UI.KeyEvent)">
            <summary>Advance key event handler</summary>
            <param name="keyEvent">Key event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Slider.DisposeSelf">
            <summary>Frees used resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Slider.OnFocusChanged(Sce.PlayStation.HighLevel.UI.FocusChangedEventArgs)">
            <summary>Called when this widget obtains or loses focus</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.Orientation">
            <summary>Obtains and sets the slider direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.FillValue">
            <summary>Obtains and sets whether to display the green bar.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.Value">
            <summary>Obtains and sets the current position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.MinValue">
            <summary>Obtains and sets the minimum value.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.MaxValue">
            <summary>Obtains and sets the maximum value.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.ValueChangeEventEnabled">
            <summary>Obtains and sets whether to enable an event when the current position has changed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.Enabled">
            <summary>Obtains and sets whether to enable the feature.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.Width">
            <summary>Obtains and sets the width.</summary>
            <remarks>The set value is ignored if Orientation is Vertical.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.Height">
            <summary>Obtains and sets the height.</summary>
            <remarks>The set value is ignored if Orientation is Horizontal.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.PriorityHit">
            <summary>Obtains and sets whether to prioritize and respond to a touch.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.Slider.Step">
            <summary>Discrete value of Value</summary>
            <remarks>When 0 is specified, Value becomes a continuous value. When a positive value is specified, the possible value of Value is MinValue+Step*n (where n is an integer) and MaxValue.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Slider.ValueChanging">
            <summary>Handler called when the current position is being changed</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.Slider.ValueChanged">
            <summary>Handler called when the current position has changed</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.Slider.HandleWidget.OnPressStateChanged(Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs)">
            <summary>Called when the press status changes</summary>
            <param name="e">Event argument</param>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SliderValueChangeEventArgs">
            <summary>Event argument when the current position has changed</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SliderValueChangeEventArgs.#ctor(System.Single)">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SliderValueChangeEventArgs.Value">
            <summary>Obtains the current position.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MoveTarget">
            <summary>Scene for operation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MoveTarget.NextScene">
            <summary>Next scene</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.MoveTarget.CurrentScene">
            <summary>Current scene</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SlideTransitionInterpolator">
            <summary>Interpolation function</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideTransitionInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideTransitionInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideTransitionInterpolator.Overshoot">
            <summary>Overshoot</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideTransitionInterpolator.Elastic">
            <summary>Oscillation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SlideTransitionInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SlideTransition">
            <summary>Transition in which the object moves laterally and the scene changes</summary>
            <remarks>When NextScene is specified for the MoveTarget property, NextScene becomes the foreground, CurrentScene becomes the background, and NextScene slides in in the direction specified with the MoveDirection property.
            When CurrentScene is specified for the MoveTarget property, CurrentScene becomes the foreground, NextScene becomes the background, and CurrentScene slides out in the direction specified with the MoveDirection property.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideTransition.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideTransition.#ctor(System.Single,Sce.PlayStation.HighLevel.UI.FourWayDirection,Sce.PlayStation.HighLevel.UI.MoveTarget,Sce.PlayStation.HighLevel.UI.SlideTransitionInterpolator)">
            <summary>Constructor</summary>
            <param name="time">Duration (ms)</param>
            <param name="direction">Transition travel direction</param>
            <param name="moveTarget">Priority of superposition</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideTransition.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideTransition.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of transition update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.SlideTransition.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideTransition.Time">
            <summary>Obtains and sets the duration. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideTransition.MoveDirection">
            <summary>Obtains and sets the transition travel direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideTransition.MoveTarget">
            <summary>Obtains and sets whether the sliding scene is CurrentScene or NextScene</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideTransition.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.SlideTransition.CustomInterpolator">
            <summary>Sets a custom interpolation function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TapGestureDetector">
            <summary>Tap detector</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TapGestureDetector.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TapGestureDetector.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Distributes a touch event.</summary>
            <param name="touchEvents">Touch event</param>
            <returns>Response to touch event distribution</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TapGestureDetector.OnResetState">
            <summary>Resets the state of gesture analysis.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TapGestureDetector.MaxDistance">
            <summary>Obtains and sets the maximum allowable distance from the first down position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TapGestureDetector.MaxPressDuration">
            <summary>Obtains and sets the maximum time until down changes to up. (ms)</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.TapGestureDetector.TapDetected">
            <summary>Tap event handler</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TapEventArgs">
            <summary>Tap event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TapEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Constructor</summary>
            <param name="source">Event source widget</param>
            <param name="worldPosition">Position in the world (screen) coordinate system</param>
            <param name="localPosition">Position in the local coordinate system</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TapEventArgs.WorldPosition">
            <summary>Obtains the position in the world (screen) coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TapEventArgs.LocalPosition">
            <summary>Obtains the position in the local coordinate system.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TextRenderHelper">
            @internal
            <summary>Renders a string within an image.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextRenderHelper.DefaultFontAlias">
            <summary>Default font</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextRenderHelper.DefaultFontSize">
            <summary>Default font size</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextRenderHelper.DefaultFontStyle">
            <summary>Default font type</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextRenderHelper.DefaultHorizontalAlignment">
            <summary>Default horizontal alignment</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextRenderHelper.DefaultVerticalAlignment">
            <summary>Default vertical alignment</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextRenderHelper.DefaultTextColor">
            <summary>Default character string color</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TextRenderHelper.DefaultBackgroundColor">
            <summary>Default character string background color</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TextRenderHelper.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TextRenderHelper.GetImageSize(System.String)">
            <summary>Obtains the size of the image required for rendering a string.</summary>
            <param name="text">Character string</param>
            <returns>Size of the image required for rendering a string</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TextRenderHelper.GetTotalHeight(System.String,System.Single)">
            <summary>Obtains the height of the image required for rendering a string at a specified image width.</summary>
            <param name="text">Character string</param>
            <param name="width">Image width</param>
            <returns>Height of the image required for rendering a string</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TextRenderHelper.DrawText(System.String@,System.Int32,System.Int32)">
            <summary>Renders a string within an image.</summary>
            <param name="text">Character string</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <returns>Image with rendered string</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextRenderHelper.Font">
            <summary>Obtains and sets the font of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextRenderHelper.HorizontalAlignment">
            <summary>Obtains and sets the horizontal alignment.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextRenderHelper.VerticalAlignment">
            <summary>Obtains and sets the vertical alignment.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextRenderHelper.HorizontalOffset">
            <summary>Obtains and sets the horizontal offset position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextRenderHelper.VerticalOffset">
            <summary>Obtains and sets the vertical offset position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextRenderHelper.LineBreak">
            <summary>Obtains and sets the break method of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextRenderHelper.TextTrimming">
            <summary>Obtains and sets the cropping method of the character string.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TextRenderHelper.LineGap">
            <summary>Obtains and sets the row spacing.</summary>
            <remarks>Default value is 0</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TiltDropEffect">
            <summary>Effect that falls in a downward direction</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TiltDropEffect.DropDirection">
            <summary>Obtains and sets the falling direction (radian).</summary>
            <remarks>Downward direction is 0.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TiltDropEffect.Speed">
            <summary>Obtains and sets the effect speed. 1.0 is the standard speed.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TiltDropTransition">
            <summary>Transition that falls in a downward direction</summary>
            <remarks>New scene appears from the background</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropTransition.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropTransition.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropTransition.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of transition update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TiltDropTransition.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TiltDropTransition.DropDirection">
            <summary>Obtains and sets the falling direction (radian).</summary>
            <remarks>Downward direction is 0.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TiltDropTransition.Speed">
            <summary>Obtains and sets the deceleration speed 1.0 is the standard speed.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TouchEventType">
            <summary>Type of touch event</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TouchEventType.Up">
            <summary>Released</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TouchEventType.Down">
            <summary>Pressed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TouchEventType.Move">
            <summary>Moved</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TouchEventType.Enter">
            <summary>Moved from the outside of the area to the inside</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TouchEventType.Leave">
            <summary>Moved from the inside of the area to the outside</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TouchEventType.None">
            <summary>Disabled</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TouchEvent">
            <summary>Touch event class</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEvent.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEvent.Source">
            <summary>The widget that is actually touched.</summary>
            <remarks>Used for specifying, etc. the child widget in relation to the touch event when a child widget touch event is hooked.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEvent.WorldPosition">
            <summary>Obtains and sets the position in the world (screen) coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEvent.LocalPosition">
            <summary>Obtains and sets the position in the local coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEvent.Time">
            <summary>Obtains and sets the time an event occurred.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEvent.Type">
            <summary>Obtains and sets the type of touch event.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEvent.FingerID">
            <summary>Obtains and sets the finger ID.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TouchEventArgs">
            <summary>Touch event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEventArgs.TouchEvents">
            <summary>Obtains all of the touch events distributed to the widget.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEventArgs.Forward">
            <summary>Obtains and sets whether to forward a touch event included in a touch event argument. Default value is False.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TransitionUpdateResponse">
            <summary>Response of transition update</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionUpdateResponse.Continue">
            <summary>Continues to update the transition.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionUpdateResponse.Finish">
            <summary>Ends updating the transition.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIColor">
            <summary>Structure for handling color</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Constructor</summary>
            <param name="r">R value (0.0f-1.0f)</param>
            <param name="g">G value (0.0f-1.0f)</param>
            <param name="b">B value (0.0f-1.0f)</param>
            <param name="a">Alpha value (0.0f-1.0f)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.op_Explicit(Sce.PlayStation.HighLevel.UI.UIColor)~Sce.PlayStation.Core.Vector4">
            <summary>Explicit conversion from UIColor to Vector4</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.op_Explicit(Sce.PlayStation.Core.Vector4)~Sce.PlayStation.HighLevel.UI.UIColor">
            <summary>Explicit conversion from Vector4 to UIColor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.op_Equality(Sce.PlayStation.HighLevel.UI.UIColor,Sce.PlayStation.HighLevel.UI.UIColor)">
            <summary>Comparative operator==</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.op_Inequality(Sce.PlayStation.HighLevel.UI.UIColor,Sce.PlayStation.HighLevel.UI.UIColor)">
            <summary>Comparative operator!=</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.Equals(System.Object)">
            <summary>Whether the target and self are equivalent</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.Equals(Sce.PlayStation.HighLevel.UI.UIColor)">
            <summary>Whether the target and self are equivalent</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.GetHashCode">
            <summary>Returns a hash code.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.UIColor.R">
            <summary>R value</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.UIColor.G">
            <summary>G value</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.UIColor.B">
            <summary>B value</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.UIColor.A">
            <summary>Alpha value</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIColor.ToString">
            <summary>Returns a character string</summary>
            <returns>Characters string of "R=0.0000 G=0.0000 B=0.0000 A=0.0000" format</returns>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.BlendMode">
            <summary>Blend mode</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.BlendMode.Half">
            <summary>Blend by multiplying the alpha components of the source</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.BlendMode.Add">
            <summary>Blend by adding</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.BlendMode.Premultiplied">
            <summary>Premultiplied alpha blend</summary>
            <remarks>Special blend mode for rendering a texture created with Widget.RenderToTexture</remarks>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.BlendMode.Off">
            <summary>Do not blend (opaque)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIPrimitive">
            <summary>Primitive</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitive.#ctor(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32)">
            <summary>Constructor</summary>
            <param name="drawMode">Rendering mode</param>
            <param name="maxVertexCount">Number of vertices</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitive.#ctor(Sce.PlayStation.Core.Graphics.DrawMode,System.Int32,System.Int32)">
            <summary>Constructor</summary>
            <param name="drawMode">Rendering mode</param>
            <param name="maxVertexCount">Number of vertices</param>
            <param name="maxIndexCount">Number of indices (do not use the index array if 0)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitive.DisposeSelf">
            <summary>Frees the unmanaged resources being used with this UIPrimitive.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitive.SetIndices(System.UInt16[])">
            <summary>Sets the index array.</summary>
            <param name="indices">Index array</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitive.GetVertex(System.Int32)">
            <summary>Obtains the vertex.</summary>
            <param name="index">Index</param>
            <returns>Vertex</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitive.Render">
            <summary>Renders the primitive.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitive.DrawMode">
            <summary>Obtains and sets the rendering mode.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitive.VertexCount">
            <summary>Obtains and sets the number of vertices.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative value or a value greater than MaxVertexCount is set.</exception>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitive.MaxVertexCount">
            <summary>Obtains the maximum value of the number of vertices.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitive.MaxIndexCount">
            <summary>Obtains the maximum value of the number of indices.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitive.IndexCount">
            <summary>Obtains and sets the number of indices.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative value or a value greater than MaxIndexCount is set.</exception>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIPrimitiveUtility">
            <summary>Primitive utility</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitiveUtility.SetupNinePatch(Sce.PlayStation.HighLevel.UI.UIPrimitive,System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.HighLevel.UI.NinePatchMargin)">
            <summary>Applies the 9-patch information of an image to a primitive.</summary>
            <param name="primitive">Primitive</param>
            <param name="width">Width of the rendering destination</param>
            <param name="height">Height of the rendering destination</param>
            <param name="offsetX">Offset position of the X coordinate of the rendering destination</param>
            <param name="offsetY">Offset position of the Y coordinate of the rendering destination</param>
            <param name="ninePatchMargin">9-patch information</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The maximum number of vertices of the primitive or the maximum number of indices is insufficient.</exception>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitiveUtility.SetupNinePatch(Sce.PlayStation.HighLevel.UI.UIPrimitive,System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.Core.Imaging.ImageRect,Sce.PlayStation.HighLevel.UI.NinePatchMargin)">
            <summary>Applies the 9-patch information of an image to a primitive.</summary>
            <param name="primitive">Primitive</param>
            <param name="width">Width of the rendering destination</param>
            <param name="height">Height of the rendering destination</param>
            <param name="offsetX">Offset position of the X coordinate of the rendering destination</param>
            <param name="offsetY">Offset position of the Y coordinate of the rendering destination</param>
            <param name="imageRect">Display area of the image</param>
            <param name="ninePatchMargin">9-patch information</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The maximum number of vertices of the primitive or the maximum number of indices is insufficient.</exception>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitiveUtility.SetupHorizontalThreePatch(Sce.PlayStation.HighLevel.UI.UIPrimitive,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Applies the 3-patch information in the horizontal direction of an image to a primitive.</summary>
            <param name="primitive">Primitive</param>
            <param name="width">Width of the rendering destination</param>
            <param name="height">Height of the rendering destination</param>
            <param name="offsetX">Offset position of the X coordinate of the rendering destination</param>
            <param name="offsetY">Offset position of the Y coordinate of the rendering destination</param>
            <param name="leftMargin">Left margin of the image</param>
            <param name="rightMargin">Right margin of the image</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitiveUtility.SetupVerticalThreePatch(Sce.PlayStation.HighLevel.UI.UIPrimitive,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Applies the 3-patch information in the vertical direction of an image to a primitive.</summary>
            <param name="primitive">Primitive</param>
            <param name="width">Width of the rendering destination</param>
            <param name="height">Height of the rendering destination</param>
            <param name="offsetX">Offset position of the X coordinate of the rendering destination</param>
            <param name="offsetY">Offset position of the Y coordinate of the rendering destination</param>
            <param name="topMargin">Top margin of the image</param>
            <param name="bottomMargin">Bottom margin of the image</param>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex">
            <summary>Vertex data managed by UIPrimitive.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.SetPosition(System.Single,System.Single)">
            <summary>Sets the position in the parent coordinate system.</summary>
            <param name="x">X coordinate in the parent coordinate system</param>
            <param name="y">Y coordinate in the parent coordinate system</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.SetPosition(System.Single,System.Single,System.Single)">
            <summary>Sets the position in the parent coordinate system.</summary>
            <param name="x">X coordinate in the parent coordinate system</param>
            <param name="y">Y coordinate in the parent coordinate system</param>
            <param name="z">Z coordinate in the parent coordinate system</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.X">
            <summary>Obtains and sets the X coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.Y">
            <summary>Obtains and sets the Y coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.Z">
            <summary>Obtains and sets the Z coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.U">
            <summary>Obtains and sets the texture coordinates in the horizontal direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.V">
            <summary>Obtains and sets the texture coordinates in the vertical direction.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.Color">
            <summary>Obtains and sets the color of the vertex.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIPrimitiveVertex.Position3D">
            <summary>Obtains and sets the position.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UISprite">
            <summary>Renders multiple rectangles at the same time</summary>
            <remarks>Class used most often to create UI</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISprite.#ctor(System.Int32)">
            <summary>Constructor</summary>
            <param name="maxUnitCount">Maximum number of rectangles (1 to )</param>
            <remarks>maxUnitCount is clamped to a value of 1 or more.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISprite.DisposeSelf">
            <summary>Frees the unmanaged resources being used with this UISprite.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISprite.GetUnit(System.Int32)">
            <summary>Obtains the rectangle.</summary>
            <param name="index">Index of rectangle to be obtained</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISprite.Render">
            <summary>Renders a rectangle.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISprite.UnitCount">
            <summary>Obtains and sets the number of rectangles to display.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative value or a value greater than MaxUnitount is set.</exception>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISprite.MaxUnitCount">
            <summary>Obtains the maximum number of rectangles.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UISpriteUnit">
            <summary>Rectangle data managed by UISprite</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISpriteUnit.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISpriteUnit.SetPosition(System.Single,System.Single)">
            <summary>Sets the position in the parent coordinate system.</summary>
            <param name="x">X coordinate in the parent coordinate system</param>
            <param name="y">Y coordinate in the parent coordinate system</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISpriteUnit.SetSize(System.Single,System.Single)">
            <summary>Sets the size.</summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.X">
            <summary>Obtains and sets the X coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.Y">
            <summary>Obtains and sets the Y coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.Z">
            <summary>Obtains and sets the Z coordinate in the parent coordinate system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.U1">
            <summary>Obtains and sets the texture coordinates of the left position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.V1">
            <summary>Obtains and sets the texture coordinates of the top position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.U2">
            <summary>Obtains and sets the texture coordinates of the right position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.V2">
            <summary>Obtains and sets the texture coordinates of the bottom position.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.Color">
            <summary>Obtains and sets the color of the vertex.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISpriteUnit.Position3D">
            <summary>Obtains and sets the position.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UISpriteUtility">
            <summary>Sprite utility</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISpriteUtility.SetupNinePatch(Sce.PlayStation.HighLevel.UI.UISprite,System.Single,System.Single,System.Single,System.Single,Sce.PlayStation.HighLevel.UI.NinePatchMargin)">
            <summary>Applies the 9-patch information of an image to a sprite.</summary>
            <param name="sprite">Sprite</param>
            <param name="width">Width of the rendering destination</param>
            <param name="height">Height of the rendering destination</param>
            <param name="offsetX">Offset position of the X coordinate of the rendering destination</param>
            <param name="offsetY">Offset position of the Y coordinate of the rendering destination</param>
            <param name="ninePatchMargin">9-patch information</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISpriteUtility.SetupHorizontalThreePatch(Sce.PlayStation.HighLevel.UI.UISprite,System.Single,System.Single,System.Single,System.Single)">
            <summary>Applies the 3-patch information of a horizontal image to a sprite.</summary>
            <param name="sprite">Sprite</param>
            <param name="width">Width of the rendering destination</param>
            <param name="height">Height of the rendering destination</param>
            <param name="leftMargin">Left margin of the image</param>
            <param name="rightMargin">Right margin of the image</param>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder">
            <summary>Rendering order during a transition</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.CurrentScene">
            <summary>Renders only CurrentScene.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.NextScene">
            <summary>Renders only NextScene.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.TransitionUIElement">
            <summary>Renders only TransitionUIElement.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.CS_NS">
            <summary>Renders CurrentScene and NextScene in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.CS_TE">
            <summary>Renders CurrentScene and TransitionUIElement in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.NS_CS">
            <summary>Renders NextScene and CurrentScene in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.NS_TE">
            <summary>Renders NextScene and TransitionUIElement in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.TE_CS">
            <summary>Renders TransitionUIElement and CurrentScene in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.TE_NS">
            <summary>Renders TransitionUIElement and NextScene in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.CS_NS_TE">
            <summary>Renders CurrentScene, NextScene, and TransitionUIElement in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.CS_TE_NS">
            <summary>Renders CurrentScene, TransitionUIElement, and NextScene in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.NS_CS_TE">
            <summary>Renders NextScene, CurrentScene, and TransitionUIElement in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.NS_TE_CS">
            <summary>Renders NextScene, TransitionUIElement, and CurrentScene in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.TE_CS_NS">
            <summary>Renders TransitionUIElement, CurrentScene, and NextScene in order.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.TransitionDrawOrder.TE_NS_CS">
            <summary>Renders TransitionUIElement, NextScene, and CurrentScene in order.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LayoutOrientation">
            <summary>Layout direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.LayoutOrientation.Horizontal">
            <summary>Horizontal</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.LayoutOrientation.Vertical">
            <summary>Vertical</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ScreenOrientation">
            <summary>Screen rotation method</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UISystem">
            <summary>Class managing the entire UI Toolkit system</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.Initialize(Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>Initializes.</summary>
            <param name="graphics">Graphics Context</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.Initialize(Sce.PlayStation.Core.Graphics.GraphicsContext,System.Single)">
            <summary>Initializes.</summary>
            <param name="graphics">Graphics Context</param>
            <param name="pixelDensity">Pixel density</param>
            <exception cref="T:System.ArgumentOutOfRangeException">pixelDensity is outside the range of 0.5 to 4.</exception>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.Terminate">
            <summary>Terminates.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.Update(System.Collections.Generic.List{Sce.PlayStation.Core.Input.TouchData})">
            <summary>Updates the entire UI system.</summary>
            <param name="touchDataList">Touch information list</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.Update(System.Collections.Generic.List{Sce.PlayStation.Core.Input.TouchData},Sce.PlayStation.Core.Input.GamePadData@)">
            <summary>Updates the entire UI system.</summary>
            <param name="touchDataList">Touch information list</param>
            <param name="gamePadData">Gamepad information</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.Update(System.Collections.Generic.List{Sce.PlayStation.Core.Input.TouchData},Sce.PlayStation.Core.Input.MotionData@)">
            <summary>Updates the entire UI system.</summary>
            <param name="touchDataList">Touch information list</param>
            <param name="motionData">Motion sensor information</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.Update(System.Collections.Generic.List{Sce.PlayStation.Core.Input.TouchData},Sce.PlayStation.Core.Input.GamePadData@,Sce.PlayStation.Core.Input.MotionData@)">
            <summary>Updates the entire UI system.</summary>
            <param name="touchDataList">Touch information list</param>
            <param name="gamePadData">Gamepad information</param>
            <param name="motionData">Motion sensor information</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.FindHitWidget(Sce.PlayStation.Core.Vector2)">
            <summary>Searches for the widget that exists at the specified coordinates.</summary>
            <returns>The found widget. If not found, null.</returns>
            <param name="screenPoint">Coordinates in the screen coordinate system</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.CancelKeyEvents">
            <summary>Cancel all current key events</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.UpdateFrame">
            <summary>Advances the entire UI system one frame.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.Render">
            <summary>Renders the UI.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.SetScene(Sce.PlayStation.HighLevel.UI.Scene)">
            <summary>Changes the scene.</summary>
            <param name="newScene">New scene</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.SetScene(Sce.PlayStation.HighLevel.UI.Scene,Sce.PlayStation.HighLevel.UI.Transition)">
            <summary>Changes the scene.</summary>
            <param name="newScene">New scene</param>
            <param name="transition">Transition</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.PushScene(Sce.PlayStation.HighLevel.UI.Scene)">
            <summary>Pushes the current scene to the scene stack and changes the scene.</summary>
            <param name="newScene">New scene</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.PopScene">
            <summary>Changes to the scene that was last pushed to the scene stack.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.GetShaderProgram(Sce.PlayStation.HighLevel.UI.ShaderType)">
            <summary>Obtains the shader program.</summary>
            <param name="type">Type of shader program</param>
            <returns>Shader Program</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.RegisterEffect(Sce.PlayStation.HighLevel.UI.Effect)">
            <summary>Registers the effect.</summary>
            <param name="effect">Effect to register</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.UnregisterEffect(Sce.PlayStation.HighLevel.UI.Effect)">
            <summary>Cancels registration of the effect.</summary>
            <param name="effect">Effect to cancel</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.UpdateEffect">
            <summary>Updates the effect.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.UpdateTransition">
            <summary>Updates the transition.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.ResetStateAll">
            <summary>Resets the states of all widgets.</summary>
            <remarks>The state of GestureDetector registered to a widget is also reset.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.ClearBuffer">
            <summary>Clears the PixelBuffer cache. The target is the texture of Transition.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.SetClipRegion(System.Single,System.Single,System.Single,System.Single)">
            <summary>Sets the clip (scissor) area to full screen (FrameBuffer size)</summary>
            <remarks>The clip area will not be changed when the clip area size is 0 or less. The upper left is the origin of x,y.</remarks>
            <param name="x">x</param>
            <param name="y">y (upper left is the origin)</param>
            <param name="w">width</param>
            <param name="h">height</param>
            <returns>false: size of the clip area is 0</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UISystem.SetClipRegionFull">
            <summary>Sets the clip (scissor) area to full screen (FrameBuffer size)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.KeyReceiverWidget">
            <summary>Obtains and sets the widget receiving a key-input event.</summary>
            <remarks>If null is specified, the key event is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.GamePadData">
            <summary>Obtains the gamepad information</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.MotionData">
            <summary>Obtains motion sensor information.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.FramebufferWidth">
            <summary>Obtains the width of the frame buffer.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.FramebufferHeight">
            <summary>Obtains the height of the frame buffer.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.PixelDensity">
            <summary>Obtains the pixel density</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.Dpi">
            @internal
            <summary>DPI (SystemParameters.DisplayDpiX + SystemParameters.DisplayDpiY) / 2f</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.CurrentScene">
            <summary>Obtains the currently displayed scene.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.NextScene">
            <summary>Obtains and sets the next scene to be displayed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.ScenePushTransition">
            <summary>Obtains and sets the transition when a scene is pushed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.ScenePopTransition">
            <summary>Obtains and sets the transition when a scene pops.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.TransitionUIElement">
            <summary>Obtains the root of the element tree that can only be used during a transition.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.TransitionDrawOrder">
            <summary>Obtains and sets the rendering order during a transition.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.GraphicsContext">
            <summary>Obtains the graphics context.</summary>
            <returns>Graphics Context</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.ViewProjectionMatrix">
            <summary>Obtains the projection matrix.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.CurrentTime">
            <summary>Obtains the elapsed time of the system.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.KeyLongPressTime">
            <summary>Obtains and sets the time (ms) from when a key is pressed to when a LongPress key event is issued</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.KeyRepeatStartTime">
            <summary>Obtains and sets the time (ms) from when a key is pressed to when a Repeat key event is first issued</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.KeyRepeatIntervalTime">
            <summary>Obtains and sets the interval time (ms) when a Repeat key event is issued</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.FocusTimeout">
            <summary>Obtains and sets the time (ms) taken to deactivate focus when not operating</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.FocusActive">
            <summary>Obtains and sets whether the focus is currently active</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.EnabledFocus">
            <summary>Obtains and sets whether to enable the focus feature</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.SuppressFocusKeyEvent">
            <summary>Obtains and sets whether to pause the key event distribution of the focus</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.FocusFilterColor">
            <summary>Obtains and sets the color that multiplies in the focus image</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UISystem.FocusBlendMode">
            <summary>Obtains and sets the blend mode of the focus image</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UISystem.GraphicsState">
            <summary>Class for remembering the State of the GraphicsContext at the time of Render</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PivotType">
            <summary>Type of pivot</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.TopLeft">
            <summary>Top left</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.TopCenter">
            <summary>Top</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.TopRight">
            <summary>Top right</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.MiddleLeft">
            <summary>Left</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.MiddleCenter">
            <summary>Center</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.MiddleRight">
            <summary>Right</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.BottomLeft">
            <summary>Bottom left</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.BottomCenter">
            <summary>Bottom</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PivotType.BottomRight">
            <summary>Bottom right</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.Anchors">
            <summary>Type of anchor</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.Anchors.None">
            <summary>None</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.Anchors.Top">
            <summary>Fixed to top</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.Anchors.Bottom">
            <summary>Fixed to bottom</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.Anchors.Height">
            <summary>Fixed height</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.Anchors.Left">
            <summary>Fixed to left</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.Anchors.Right">
            <summary>Fixed to right</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.Anchors.Width">
            <summary>Fixed width</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ZoomEffectInterpolator">
            <summary>Interpolation function for ZoomEffect</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ZoomEffectInterpolator.Linear">
            <summary>Linear interpolation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ZoomEffectInterpolator.EaseOutQuad">
            <summary>Easing (2D)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ZoomEffectInterpolator.Overshoot">
            <summary>Overshoot</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ZoomEffectInterpolator.Elastic">
            <summary>Oscillation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.ZoomEffectInterpolator.Custom">
            <summary>Custom</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ZoomEffect">
            <summary>Effect that enlarges or reduces the current scale to the specified scale</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ZoomEffect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ZoomEffect.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.Single,System.Single,Sce.PlayStation.HighLevel.UI.ZoomEffectInterpolator)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="scale">Target scale</param>
            <param name="interpolator">Interpolation function</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ZoomEffect.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,System.Single,System.Single,Sce.PlayStation.HighLevel.UI.ZoomEffectInterpolator)">
            <summary>Creates an instance and starts the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <param name="time">Duration (ms)</param>
            <param name="scale">Target scale</param>
            <param name="interpolator">Interpolation function</param>
            <returns>Effect instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ZoomEffect.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ZoomEffect.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ZoomEffect.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ZoomEffect.TargetScaleX">
            <summary>Obtains and sets the scale in the target X direction. (Magnification = 1)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ZoomEffect.TargetScaleY">
            <summary>Obtains and sets the scale in the target Y direction. (Magnification = 1)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ZoomEffect.TargetScaleZ">
            <summary>Obtains and sets the scale in the target Z direction. (Magnification = 1)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ZoomEffect.Time">
            <summary>Obtains and sets the animation time. (ms)</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ZoomEffect.Interpolator">
            <summary>Obtains and sets the type of interpolation function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ZoomEffect.CustomInterpolator">
            <summary>Obtains and sets a custom interpolation function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DefaultNavigationTransition.#ctor(Sce.PlayStation.HighLevel.UI.DefaultNavigationTransition.TransitionType)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DefaultNavigationTransition.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DefaultNavigationTransition.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of transition update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DefaultNavigationTransition.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.SpringType">
            <summary>Type of spring for LiveSpringPanel</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SpringType.AngleAxisX">
            <summary>Spring that acts on the X-axis rotation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SpringType.AngleAxisY">
            <summary>Spring that acts on the Y-axis rotation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SpringType.AngleAxisZ">
            <summary>Spring that acts on the Z-axis rotation</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SpringType.PositionX">
            <summary>Spring that acts on the movement in the X-axis direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SpringType.PositionY">
            <summary>Spring that acts on the movement in the Y-axis direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SpringType.PositionZ">
            <summary>Spring that acts on the movement in the Z-axis direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.SpringType.All">
            <summary>All springs</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.LiveSpringPanel">
            <summary>Panel that vibrates a child widget according to the acceleration sensor or panel movement</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.OnMotionEvent(Sce.PlayStation.HighLevel.UI.MotionEvent)">
            <summary>Motion event handler</summary>
            <param name="motionEvent">Motion event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.AddChildFirst(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the beginning.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the beginning if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.AddChildLast(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Adds the child widget to the end.</summary>
            <param name="child">Child widget to be added</param>
            <remarks>Moves it to the end if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.InsertChildBefore(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately in front of the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="nextChild">Child widget immediately after the inserted child widget</param>
            <remarks>Moves it immediately in front of the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.InsertChildAfter(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Inserts it immediately after the specified child widget.</summary>
            <param name="child">Child widget to be inserted</param>
            <param name="prevChild">Child widget immediately in front of the inserted child widget</param>
            <remarks>Moves it immediately after the specified child widget if it has already been added.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.RemoveChild(Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Deletes the specified child widget.</summary>
            <param name="child">Widget to be deleted</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.SetDampingConstant(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.SpringType,System.Single)">
            <summary>Sets the spring damping constant (the speed until the vibration converges).</summary>
            <remarks>When this value is between 0 and 1, the larger the value, the shorter the time until the vibration converges. Default is 0.2.</remarks>
            <param name="widget">Widget that sets the damping constant. Changes the damping constant of all the widgets when null is specified.</param>
            <param name="type">Type of spring that sets the damping constant. Changes the damping constant of all the springs when SpringType.All is specified.</param>
            <param name="dampingConstant">Damping constant</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.GetDampingConstant(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.SpringType)">
            <summary>Obtains the spring damping constant (the speed until the vibration converges).</summary>
            <remarks>When this value is between 0 and 1, the larger the value, the shorter the time until the vibration converges. Default is 0.2.</remarks>
            <param name="widget">Widget that obtains the damping constant</param>
            <param name="type">Type of spring that obtains the damping constant</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.SetSpringConstant(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.SpringType,System.Single)">
            <summary>Sets the spring constant (the strength at which the spring tries to return to its original position).</summary>
            <remarks>The vibration decreases as the value between 0 and 1 increases. Default is 0.3.</remarks>
            <param name="widget">Widget that sets the spring constant. Changes the spring constant of all the widgets when null is specified.</param>
            <param name="type">Type of spring that sets the spring constant. Changes the damping constant of all the springs when SpringType.All is specified.</param>
            <param name="springConstant">Spring constant</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.GetSpringConstant(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.SpringType)">
            <summary>Obtains the spring constant (the strength at which the spring tries to return to its original position).</summary>
            <remarks>The vibration decreases as the value between 0 and 1 increases. Default is 0.3.</remarks>
            <param name="widget">Widget that obtains the spring constant</param>
            <param name="type">Type of spring that obtains the spring constant</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.SetDisplacement(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.SpringType,System.Single)">
            <summary>Sets the spring displacement (the deviation from the default position).</summary>
            <param name="widget">Widget for setting the displacement</param>
            <param name="type">Type of spring that sets the displacement</param>
            <param name="displacement">Displacement</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.GetDisplacement(Sce.PlayStation.HighLevel.UI.Widget,Sce.PlayStation.HighLevel.UI.SpringType)">
            <summary>Obtains the spring displacement (the deviation from the default position).</summary>
            <param name="widget">Widget for obtaining the displacement</param>
            <param name="type">Type of spring that obtains the displacement</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.AddAcceleraton(System.Single,System.Single,System.Single)">
            <summary>Adds the acceleration to the child widget</summary>
            <param name="x">Acceleration in the X-axis direction</param>
            <param name="y">Acceleration in the Y-axis direction</param>
            <param name="z">Acceleration in the Z-axis direction</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.ReflectSensorAcceleration">
            <summary>Obtains and sets whether to apply the acceleration sensor value to the child widget movement.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.LiveSpringPanel.ReflectMotionAcceleration">
            <summary>Obtains and sets whether to apply the panel movement to the child widget movement.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TouchEventCollection">
            <summary>Class that holds multiple touch events at the same time</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEventCollection.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEventCollection.GetTouchEventByID(System.Int32)">
            <summary>Obtains the touch event of the specified finger ID.</summary>
            <param name="id">Finger ID</param>
            <returns>Touch event</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEventCollection.Add(Sce.PlayStation.HighLevel.UI.TouchEvent)">
            <summary>Adds a touch event.</summary>
            <param name="touchEvent">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEventCollection.Insert(System.Int32,Sce.PlayStation.HighLevel.UI.TouchEvent)">
            <summary>Adds a touch event to the specified index position.</summary>
            <param name="index">Index</param>
            <param name="touchEvent">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEventCollection.IndexOf(Sce.PlayStation.HighLevel.UI.TouchEvent)">
            <summary>Obtains the index of a specified touch event.</summary>
            <param name="touchEvent">Touch event</param>
            <returns>Index</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEventCollection.Remove(Sce.PlayStation.HighLevel.UI.TouchEvent)">
            <summary>Deletes the specified touch event.</summary>
            <param name="touchEvent">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TouchEventCollection.Contains(Sce.PlayStation.HighLevel.UI.TouchEvent)">
            <summary>Obtains whether or not the specified touch event is included.</summary>
            <param name="touchEvent">Touch event</param>
            <returns>Whether included or not</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEventCollection.Item(System.Int32)">
            <summary>Indexer</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEventCollection.PrimaryTouchEvent">
            <summary>Obtains the touch event of the widget that was first touched by a finger.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TouchEventCollection.Forward">
            <summary>Obtains and sets whether to forward a touch event included in a collection. Default value is False.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MotionEvent">
            <summary>Motion event class</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MotionEvent.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MotionEvent.Acceleration">
            <summary>Obtains and sets the acceleration.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MotionEvent.AngularVelocity">
            <summary>Obtains and sets the angular velocity.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MotionEvent.Time">
            <summary>Obtains and sets the time an event occurred.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.MotionEventArgs">
            <summary>Motion event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MotionEventArgs.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.MotionEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.MotionEvent)">
            <summary>Constructor</summary>
            <param name="motionEvent">Motion sensor information</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MotionEventArgs.Time">
            <summary>Obtains and sets the time an event occurred.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MotionEventArgs.Acceleration">
            <summary>Obtains and sets the acceleration.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.MotionEventArgs.AngularVelocity">
            <summary>Obtains and sets the angular velocity.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Sce.PlayStation.HighLevel.UI.AnimationInterpolator" -->
        <member name="T:Sce.PlayStation.HighLevel.UI.AnimationUtility">
            <summary>Utility for animation</summary>
            <remarks>Animation interpolation function usable for Effect and Transition</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.LinearInterpolator(System.Single,System.Single,System.Single)">
            <summary>Linear interpolation function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInQuadInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in interpolation using quadratic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutQuadInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out interpolation using quadratic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInOutQuadInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in/out interpolation using quadratic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutInQuadInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out/in interpolation using quadratic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInCubicInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in interpolation using cubic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutCubicInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out interpolation using cubic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInOutCubicInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in/out interpolation using cubic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutInCubicInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out/in interpolation using cubic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInQuartInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in interpolation using quartic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutQuartInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out interpolation using quartic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInOutQuartInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in/out interpolation using quartic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutInQuartInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out/in interpolation using quartic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInQuintInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in interpolation using quintic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutQuintInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out interpolation using quintic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0.0f to 1.0f)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInOutQuintInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in/out interpolation using quintic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutInQuintInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out/in interpolation using quintic function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInSineInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in interpolation using sine function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutSineInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out interpolation using sine function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInOutSineInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in/out interpolation using sine function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutInSineInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out/in interpolation using sine function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInExpoInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in interpolation using power function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutExpoInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out interpolation using power function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInOutExpoInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in/out interpolation using power function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutInExpoInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out/in interpolation using power function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInCircInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in interpolation using circular function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutCircInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out interpolation using circular function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseInOutCircInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-in/out interpolation using circular function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.EaseOutInCircInterpolator(System.Single,System.Single,System.Single)">
            <summary>Ease-out/in interpolation using circular function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.ElasticInterpolator(System.Single,System.Single,System.Single)">
            <summary>Interpolation using elasticity (Elastic) function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.UndershootInterpolator(System.Single,System.Single,System.Single)">
            <summary>Interpolation using undershoot function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.OvershootInterpolator(System.Single,System.Single,System.Single)">
            <summary>Interpolation using overshoot function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.BounceInterpolator(System.Single,System.Single,System.Single)">
            <summary>Interpolation using bounce-back (Bounce) function</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.AnimationUtility.FlipBounceInterpolator(System.Single,System.Single,System.Single)">
            <summary>Standard interpolation function of FlipBoard</summary>
            <param name="from">Start value</param>
            <param name="to">End value</param>
            <param name="ratio">Ratio (0 to 1)</param>
            <returns>Interpolation result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.DisposeSelf">
            <summary>Disposes the self.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.FactoryMethod">
            <summary>Generates an item.</summary>
            <returns>SpinBoxItemPanel class instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Touch event handler</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.OnResetState">
            <summary>Reset state handler</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.Width">
            <summary>Obtains and sets the width.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.Height">
            <summary>Obtains and sets the height.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.IsFocused">
            <summary>Obtains and sets the target status.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.IsSelected">
            <summary>Obtains and sets the selection status.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.ImageAsset">
            <summary>Obtains and sets the image to display.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.ItemId">
            <summary>Obtains and sets the list item ID.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.ShaderType">
            <summary>Type of ShaderProgram to use</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.ProtectedSelectAction">
            <summary>Handler to be called when a list item is selected</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinItem.ProtectedSelectActionHandler">
            <summary>Delegates the handler to be called when a list item is selected</summary>
            <param name="sender">List item</param>
            <param name="itemId">List item ID</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.IsSelect(System.Int32)">
            <summary>Obtains the selection status.</summary>
            <param name="itemId">Item index value</param>
            <returns>Selection status</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.SetSelect(System.Int32,System.Boolean)">
            <summary>Selects the specified item.</summary>
            <param name="itemId">Index value of item to be selected</param>
            <param name="isSelect">Selection status</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.StartItemRequest">
            <summary>Starts the List operation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.GetListItem(System.Int32)">
            <summary>Obtains ListItem.</summary>
            <param name="index">Item number</param>
            <returns>Obtains ListItem (null may be returned)</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.SetScrollAreaPos(System.Int32,System.Single,System.Boolean)">
            <summary>Sets the deviation from the row number of the display area top in pixels.</summary>
            <param name="firstLine">Top row number</param>
            <param name="pixelOffset">Number of pixels from the row number</param>
            <param name="withAnimate">true: with animation, false: immediately</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.SetScrollAreaPos(System.Single,System.Boolean)">
            <summary>Sets the display position with the overall ratio (0 - 1).</summary>
            <param name="ratio">Ratio of display position to overall</param>
            <param name="withAnimate">true: with animation, false: immediately</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.OnTouchEvent(Sce.PlayStation.HighLevel.UI.TouchEventCollection)">
            <summary>Handler called when there is a touch event</summary>
            <param name="touchEvents">Touch event</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.OnResetState">
            <summary>Resets the status of all widgets for self and under self.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.ItemGapLine">
            <summary>Obtains and sets the distance between rows of an item.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.ItemGapStep">
            <summary>Obtains the distance between columns of an item.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.FocusIndex">
            <summary>Obtains and sets the index value of the item in focus.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.IsLoop">
            <summary>Obtains and sets the loop of a list.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.IsItemFit">
            <summary>Obtains and sets whether to stop for each item.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.ScrollAreaFirstLine">
            <summary>Obtains the row number of the display area top.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.ScrollAreaPixelOffset">
            <summary>Obtains the number of pixels deviating from the row number of the display area top.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.ScrollAreaRatio">
            <summary>Obtains the display position with the overall ratio (0 - 1).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.ScrollAreaLineNum">
            <summary>Obtains and sets the number of rows of the display area.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.ListItemNum">
            <summary>Obtains and sets the total number of items in a list.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.TotalLineNum">
            <summary>Obtains the total number of rows in a list.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.ItemRequestAction">
            <summary>List item request handler</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.InternalSpinBox.SpinList.AnimationState">
            <summary>Animation status</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TimePicker">
            <summary>A widget to select the time</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TimePicker.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TimePicker.HitTest(Sce.PlayStation.Core.Vector2)">
            <summary>Hit test handler</summary>
            <param name="screenPoint">Position in the screen coordinate system</param>
            <returns>If hit, then true. If not hit, then false.</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePicker.Width">
            <summary>Obtains the width.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePicker.Height">
            <summary>Obtains the height.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePicker.PriorityHit">
            <summary>Obtains and sets whether to prioritize and respond to a touch.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePicker.Hour">
            <summary>Obtains and sets the time (24-hour display).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePicker.Minute">
            <summary>Obtains and sets the minute.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePicker.Time">
            <summary>Obtains and sets the time with the DateTime structure.</summary>
            <remarks>The time other than the hour and minute is ignored at the time of setting, and the date at the time of obtaining becomes 1/1/1.</remarks>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.TimePicker.ValueChanged">
            <summary>Event issued when the value is changed</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.TimePickerValueChangedEventArgs">
            <summary>Event argument when the TimePicker value has changed</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TimePickerValueChangedEventArgs.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.TimePickerValueChangedEventArgs.ToString">
            <summary>Obtains the character string.</summary>
            <returns>Converted character string</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePickerValueChangedEventArgs.NewHour">
            <summary>Currently selected hour</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePickerValueChangedEventArgs.NewMinute">
            <summary>Currently selected minute</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePickerValueChangedEventArgs.OldHour">
            <summary>Previously selected hour</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.TimePickerValueChangedEventArgs.OldMinute">
            <summary>Previously selected minute</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DatePicker">
            <summary>A widget to select the date</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DatePicker.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DatePicker.HitTest(Sce.PlayStation.Core.Vector2)">
            <summary>Hit test handler</summary>
            <param name="screenPoint">Position in the screen coordinate system</param>
            <returns>If hit, then true. If not hit, then false.</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.Width">
            <summary>Obtains the width.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.Height">
            <summary>Obtains the height.</summary>
            <remarks>The set value is ignored.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.PriorityHit">
            <summary>Obtains and sets whether to prioritize and respond to a touch.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.MinYear">
            <summary>Obtains and sets the minimum value for the year.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.MaxYear">
            <summary>Obtains and sets the maximum value for the year.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.Year">
            <summary>Obtains and sets the year.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.Month">
            <summary>Obtains and sets the month.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.Day">
            <summary>Obtains and sets the day.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePicker.Date">
            <summary>Obtains and sets the date with the DateTime structure.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.DatePicker.ValueChanged">
            <summary>Event issued when the value is changed</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs">
            <summary>Event argument when the DatePicker value has changed</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs.ToString">
            <summary>Obtains the character string.</summary>
            <returns>Converted character string</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs.NewYear">
            <summary>Currently selected year</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs.NewMonth">
            <summary>Currently selected month</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs.NewDay">
            <summary>Currently selected day</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs.OldYear">
            <summary>Previously selected year</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs.OldMonth">
            <summary>Previously selected month</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.DatePickerValueChangedEventArgs.OldDay">
            <summary>Previously selected day</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer">
            <summary>Class that plays back uia format animation</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="filePath">uia file path</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.CreateAndPlay(System.String)">
            <summary>UIAnimationPlayer is generated from an uia file and the animation is played back.</summary>
            <param name="filePath">uia file path</param>
            <returns>UIAnimationPlayer instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.Play">
            <summary>Plays back the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.Stop">
            <summary>Stops the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.Pause">
            <summary>Pauses the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.Resume">
            <summary>Resumes the animation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.GotoAndPlay(System.String)">
            <summary>Moves to the specified frame and plays back the animation.</summary>
            <param name="label">Frame name for the move destination</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.ReplaceWidget(System.String,Sce.PlayStation.HighLevel.UI.Widget)">
            <summary>Replaces the widget.</summary>
            <param name="name">Name of the widget to be deleted</param>
            <param name="widget">Widget to be added</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.DisposeSelf">
            <summary>Frees the unmanaged resources held by this widget</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.Playing">
            <summary>Obtains whether the animation is operating.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.Paused">
            <summary>Obtains whether the animation is paused.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.Repeating">
            <summary>Obtains and sets whether the animation will be repeatedly played back.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.UI.UIAnimationPlayer.AnimationStopped">
            <summary>Handler called when the animation is stopped</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIMotion">
            <summary>Class that plays back uim format motion</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIMotion.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIMotion.#ctor(Sce.PlayStation.HighLevel.UI.Widget,System.String)">
            <summary>Constructor</summary>
            <param name="widget">Effect-target widget</param>
            <param name="filePath">uim file path</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIMotion.CreateAndStart(Sce.PlayStation.HighLevel.UI.Widget,System.String)">
            <summary>Generates UIMotion from an uim file and starts the effect.</summary>
            <param name="widget">Effect-target widget</param>
            <param name="filePath">uim file path</param>
            <returns>UIMotion instance</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIMotion.OnStart">
            <summary>Start processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIMotion.OnUpdate(System.Single)">
            <summary>Update processing</summary>
            <param name="elapsedTime">Elapsed time from previous update (ms)</param>
            <returns>Response of effect update</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIMotion.Stop">
            <summary>Stops the effect.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIMotion.OnStop">
            <summary>Stop processing</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIMotion.OnRepeat">
            <summary>Repeat processing</summary>
            <remarks>Implements the repeat processing with the derived class.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FocusStyle">
            <summary>The display style of focus</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FocusStyle.RoundedCorner">
            <summary>Rectangle with rounded corners</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FocusStyle.Rectangle">
            <summary>Rectangle</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FocusStyle.Circle">
            <summary>Circle</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FocusStyle.ListItem">
            <summary>List item</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.FocusStyle.None">
            <summary>Hide</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FocusCustomSettings">
            <summary>Focus custom setting</summary>
            <remarks>If each member is the default value (null or zero), processing is performed following the standard setting.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.LeftCandidate">
            <summary>Obtains and sets the destination widget of the focus when the left key is pressed for the target widget</summary>
            <remarks>A standard focus search is performed when the value is null or for widgets that do not exist in the same scene.
            The focus is set for the specified widget regardless of the Focusable, Visible, and Enabled properties and whether it is within the display range.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.RightCandidate">
            <summary>Obtains and sets the destination widget of the focus when the right key is pressed for the target widget</summary>
            <remarks>A standard focus search is performed when the value is null or for widgets that do not exist in the same scene.
            The focus is set for the specified widget regardless of the Focusable, Visible, and Enabled properties and whether it is within the display range.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.UpCandidate">
            <summary>Obtains and sets the destination widget of the focus when the up key is pressed for the target widget</summary>
            <remarks>A standard focus search is performed when the value is null or for widgets that do not exist in the same scene.
            The focus is set for the specified widget regardless of the Focusable, Visible, and Enabled properties and whether it is within the display range.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.DownCandidate">
            <summary>Obtains and sets the destination widget of the focus when the down key is pressed for the target widget</summary>
            <remarks>A standard focus search is performed when the value is null or for widgets that do not exist in the same scene.
            The focus is set for the specified widget regardless of the Focusable, Visible, and Enabled properties and whether it is within the display range.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.SearchHintRectangle">
            <summary>Obtains and sets a rectangle when searching for the focus</summary>
            <remarks>If the size is equal to or less than 0, the size of the target widget itself is used.
            Specifies the position and size using the local coordinates of the target widget itself.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.HideFocusImage">
            <summary>Obtains and sets whether to hide the focus image</summary>
            <remarks>If true, the standard or custom focus image is not displayed.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.FocusImageRectangle">
            <summary>Obtains and sets a rectangle (position and size) when displaying the focus</summary>
            <remarks>If the size is equal to or less than 0, the size of the target widget itself is used.
            Specifies the position and size using the local coordinates of the target widget itself.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.FocusImage">
            <summary>Obtains and sets the custom image that has focus</summary>
            <remarks>When there is null, the default focus image is used.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.FocusImageNinePatchMargin">
            <summary>Obtains and sets the 9-patch margin of the custom image that has focus</summary>
            <remarks>This value is ignored when FocusImage is null.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusCustomSettings.FocusImagePadding">
            <summary>Obtains and sets the size to enlarge the outer side of the custom image that has focus</summary>
            <remarks>This value is ignored when FocusImage is null.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.FocusChangedEventArgs">
            <summary>FocusChanged event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.FocusChangedEventArgs.#ctor(System.Boolean)">
            <summary>Constructor</summary>
            <param name="focused">Whether the focus is set</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.FocusChangedEventArgs.Focused">
            <summary>Obtains whether the focus is set</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PressState">
            <summary>Press status</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressState.Normal">
            <summary>Normal</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressState.Pressed">
            <summary>Press</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressState.Disabled">
            <summary>Disabled</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PressStateChangedReason">
            <summary>Reason for changing press status</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.TouchDown">
            <summary>Touch down</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.TouchLeave">
            <summary>Touch moved from the inside of the area to the outside</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.TouchEnter">
            <summary>Touch moved from the outside of the area to the inside</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.TouchUp">
            <summary>Touch up</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.KeyDown">
            <summary>Key down</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.KeyUp">
            <summary>Key up</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.Cancel">
            <summary>Canceled or ResetState called</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.ChangePressStateProperty">
            <summary>PressState property changed</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateChangedReason.ChangeEnabledProperty">
            <summary>Enabled property changed</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PressStateTouchLeaveBehavior">
            <summary>Behavior of the press status when the touch is moved from the inside of the area to the outside</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateTouchLeaveBehavior.ResumeByTouchEnter">
            <summary>When the finger goes outside the range, the status becomes Normal, and if the finger returns outside the range without being lifted, it returns to Press status again</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateTouchLeaveBehavior.KeepPressed">
            <summary>Keeps the Press status even when the finger drags outside the range</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.PressStateTouchLeaveBehavior.End">
            <summary>When the finger goes outside the range once, the status becomes Normal and does not change to Press status until touched again</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs">
            <summary>PressStateChanged event argument</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.PressStateChangedReason,Sce.PlayStation.HighLevel.UI.PressState,Sce.PlayStation.HighLevel.UI.PressState)">
            <summary>Constructor</summary>
            <param name="reason">Reason for change</param>
            <param name="newState">Press status after change</param>
            <param name="oldState">Press status before change</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs.NewState">
            <summary>Press status after change</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs.OldState">
            <summary>Press status before change</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.PressStateChangedEventArgs.ChangedReason">
            <summary>Reason for change</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.ListPanelItemSelectChangedEventArgs">
            <summary>Event argument called when list item is selected</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanelItemSelectChangedEventArgs.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.ListPanelItemSelectChangedEventArgs.#ctor(Sce.PlayStation.HighLevel.UI.ListPanelItem)">
            <summary>Constructor</summary>
            <param name="item">Item</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanelItemSelectChangedEventArgs.Index">
            <summary>Index of selected items</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanelItemSelectChangedEventArgs.IndexInSection">
            <summary>Index of section</summary>
            <remarks>This property is enabled only for ListPanel.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.ListPanelItemSelectChangedEventArgs.SectionIndex">
            <summary>Index within section</summary>
            <remarks>This property is enabled only for ListPanel.</remarks>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIDebug">
            <summary>Utility class used in UI Toolkit debugging</summary>
            <remarks>Most methods of this class operate only when "DEBUG" is defined in a conditional compilation symbol.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.assertLog(System.String,System.String)">
            <summary>Outputs assertion failure messages and call stacks to the console screen</summary>
            <remarks>System.Diagnostics.Debug.Assert does not operate, so this is an alternative method.
            When "BREAK_UIDEBUG_ASSERT" is defined to the compilation symbol of the UI library, operation is interrupted during debugging, but execution cannot be continued when executed without debugging.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.Assert(System.Boolean)">
            <summary>When the condition is false, an assertion failure message is output to the console screen</summary>
            <remarks>If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
            <param name="condition">Condition</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.Assert(System.Boolean,System.String)">
            <summary>When the condition is false, an assertion failure message is output to the console screen</summary>
            <remarks>If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
            <param name="condition">Condition</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.Assert(System.Boolean,System.String,System.String)">
            <summary>When the condition is false, an assertion failure message is output to the console screen</summary>
            <remarks>If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
            <param name="condition">Condition</param>
            <param name="message">Message</param>
            <param name="detailMessage">Detailed message</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.Assert(System.Boolean,System.String,System.String,System.Object[])">
            <summary>When the condition is false, an assertion failure message is output to the console screen</summary>
            <remarks>If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
            <param name="condition">Condition</param>
            <param name="message">Message</param>
            <param name="detailMessageFormat">Format string of detailed message</param>
            <param name="args">&gt;Format parameter of detailed message</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.ExportAllImageAsset">
            <summary>Outputs all cached ImageAsset to image files.</summary>
            <remarks>If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.EnableRecordUncachedTexture">
            <summary>ImageAsset not cached can also be output with ExportAllImageAsset</summary>
            <remarks>This method can be called before calling UISystem.Initialize.
            If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.ExportImageAsset(Sce.PlayStation.HighLevel.UI.ImageAsset,System.String)">
            <summary>Outputs ImageAsset to an image file</summary>
            <remarks>If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
            <param name="imageAsset">Output ImageAsset</param>
            <param name="filename">Filename</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.ExportFrameBuffer(System.String)">
            @internal
            <summary>Output the current frame buffer to the image file</summary>
            <remarks>If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
            <param name="filename">Filename</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIDebug.DumpSceneGraph(System.String)">
            <summary>Dumps the current scene widget and rendering element tree and the properties of each element as XML</summary>
            <remarks>Outputs to the console screen when null is specified for filename.
            The output XML format is tentative. Also, not all property members are output.
            If the "DEBUG" compilation symbol is not defined, the calling of this method is ignored.</remarks>
            <param name="filename">Output filename (output to console screen when null)</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIDebug.ImageExportAlbumName">
            <summary>Sets and obtains the album name when exporting ImageAsset</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIDebug.ImageAssetAsyncLoad">
            @internal
            <summary>Control asynchronous read of ImageAsset</summary>
            <value>ForceEnabled: read everything asynchronously  ForceDisabled: read everything synchronously</value>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIDebug.WidgetClipping">
            @internal
            <summary>Control Clip of Widget</summary>
            <value>ForceEnabled: enable Clip of all widgets
            ForceDisabled: disable Clip of all widgets</value>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIDebug.ForceMode">
            @internal
            <summary>Synchronous and asynchronous modes</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.UIDebug.ForceMode.Normal">
            <summary>Follow standard settings</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.UIDebug.ForceMode.ForceEnabled">
            <summary>Forcefully enable everything</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.UI.UIDebug.ForceMode.ForceDisabled">
            <summary>Forcefully disable everything</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.UI.UIFont">
            <summary>Font class used by UI</summary>
            <remarks>Generates and caches an object of Core.Imaging.Font class in the system.
            When the pixel density is set in UISystem, the font size is also scaled according to the pixel density.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.#ctor">
            <summary>UIFont constructor (created from default UI value)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.#ctor(System.String,System.Int32,Sce.PlayStation.Core.Imaging.FontStyle)">
            <summary>UIFont constructor (from filename, size, and style)</summary>
            <param name="filename">Font filename</param>
            <param name="size">Size</param>
            <param name="style">Style</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size is outside the range of 1 to 1024.</exception>
            <remarks>The argument size must be between 1 and 1024. Also, depending on the font, the font may not be generated because its size is too small.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.#ctor(Sce.PlayStation.Core.Imaging.FontAlias,System.Int32,Sce.PlayStation.Core.Imaging.FontStyle)">
            <summary>UIFont constructor (from separate name, size, and style)</summary>
            <param name="alias">Font separate name</param>
            <param name="size">Size</param>
            <param name="style">Style</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size is outside the range of 1 to 1024.</exception>
            <remarks>The argument size must be between 1 and 1024. Also, depending on the font, the font may not be generated because its size is too small.</remarks>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.GetFont">
            <summary>Obtains Core.Imaging.Font class from UIFont</summary>
            <remarks>Returns ShallowClone of cached Core.Imaging.Font.</remarks>
            <returns>Font object</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.ClearCache">
            <summary>Frees all cached objects of Core.Imaging.Font class.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.op_Implicit(Sce.PlayStation.HighLevel.UI.UIFont)~Sce.PlayStation.Core.Imaging.Font">
            @internal
            <summary></summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.op_Implicit(Sce.PlayStation.Core.Imaging.Font)~Sce.PlayStation.HighLevel.UI.UIFont">
            @internal
            <summary></summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.GetHashCode">
            <summary>Returns a hash code. </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.Equals(System.Object)">
            <summary>Whether the target and self are equivalent</summary>
            <param name="obj">Comparison target</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.Equals(Sce.PlayStation.HighLevel.UI.UIFont)">
            <summary>Whether the target and self are equivalent</summary>
            <param name="uifont">Comparison target</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.UI.UIFont.ToString">
            <summary>Returns a character string</summary>
            <returns>Character string of "font name, font style, font size" format</returns>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIFont.FileName">
            <summary>Font filename</summary>
            <remarks>When null is set, the AliasName value is used.
            The evaluation of whether the font file is correct is performed when first rendered.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIFont.AliasName">
            <summary>Font separate name</summary>
            <remarks>This value is used only when FileName is null.</remarks>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIFont.Size">
            <summary>Font size</summary>
            <remarks>The argument size must be between 1 and 1024. Also, depending on the font, the font may not be generated because its size is too small.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">size is outside the range of 1 to 1024.</exception>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.UI.UIFont.Style">
            <summary>Font style</summary>
        </member>
    </members>
</doc>
