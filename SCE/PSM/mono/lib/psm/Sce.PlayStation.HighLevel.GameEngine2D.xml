<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sce.PlayStation.HighLevel.GameEngine2D</name>
    </assembly>
    <members>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D">
            <summary>
            2D view setup and navigation. Uses GraphicsContextAlpha + DrawHelpers
            for the matrix stack and rulers/axis drawing.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera">
            <summary>
            A common interface for Camera2D and Camera3D.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetAspectFromViewport">
            <summary>
            Read aspect ratio from viewport and update camera projection data accordingly.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Push">
            <summary>
            Push all matrices on the stack, and set Projection and View.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Pop">
            <summary>
            Pop all matrices from the stack.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetTransform">
            <summary>
            Return the camera transform matrix (orthonormal positioning matrix), as a Matrix4.
            GetTransform().InverseOrthonormal() is what you push on the view matrix stack.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.DebugDraw(System.Single)">
            <summary>
            Draw a world grid and the world coordinate system, for debug.
            Note that DebugDraw() doesn't call Push()/Pop() internally. It is your responsability to call it between this Camera's Push()/Pop().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.Navigate(System.Int32)">
            <summary>
            Process input for debug navigation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetViewFromViewport">
            <summary>
            Set a camera view so that the bottom left of the screen matches world point (0,0) and 
            the top right of the screen matches world point (screen width, sreen height).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>
            Given a point in normalized screen coordinates (-1->1), return its corresponding world position.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetTouchPos(System.Int32,System.Boolean)">
            <summary>
            Return the 'nth' touch position in world coordinates.
            The 'prev' flag is for internal use only.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.CalcBounds">
            <summary>
            Calculate the world bounds currently visible on screen.
            This function is 2D only, somehow extended to 3D.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.GetPixelSize">
            <summary>
            Based on current viewport size, get the size of a "screen pixel" in world coordinates.
            Can be used to determine scale factor needed to draw sprites 1:1 for example.
            2D only, somehow extended to 3D.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICamera.SetTouchPlaneMatrix(Sce.PlayStation.Core.Matrix4)">
            <summary>
            The the orientation of the 3D plane that should be used by GetTouchPos(). 
            3D only.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers)">
            <summary>
            </summary>
            <param name="gl">Needed for the matrix stack</param>
            <param name="draw_helpers">Needed only for debug draw</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewX(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Define 2D view by specifying a view center and the X support vector that determines scale and rotation.
            The X support vector is the vector going from the center of the screen to the middle of the right
            edge of the screen, expressed in the viewed world coordinates.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewY(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Define 2D view by specifying a view center and the Y support vector that determines scale and rotation.
            The Y support vector is the vector going from the center of the screen to the middle of the top
            edge of the screen, expressed in the viewed world coordinates.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromWidthAndCenter(System.Single,Sce.PlayStation.Core.Vector2)">
             <summary>
             Define 2D view by specifying a view center (the world coordinate of the point that is 
             a the center of the screen), and the amount of world we can see along the screen width.
             This is the same as doing SetViewX( new Vector2(width*0.5f,0.0f), center ).
             Note that this call alone is enough to define your camera. SetViewFromHeightAndCenter 
             is not needed (the width is deduced from aspect ratio automatically).
             </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromHeightAndCenter(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>
            Define 2D view by specifying a view center (the world coordinate of the point that is 
            a the center of the screen), and the amount of world we can see along the screen height.
            This is the same as doing SetViewY( new Vector2(0.0f,height*0.5f), center ).
            Note that this call alone is enough to define your camera. SetViewFromWidthAndCenter 
            is not needed (the width is deduced from aspect ratio automatically).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromHeightAndBottomLeft(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>
            Define a 2D view by specifying the world coordinate of the bottom left of the screen, 
            and the amount of world we can see along the screen height.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromWidthAndBottomLeft(System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>
            Define a 2D view by specifying the world coordinate of the bottom left of the screen, 
            and the amount of world we can see along the screen width.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetViewFromViewport">
            <summary>
            Define a 2D view that matches the viewport, if you want to work in pixel coordinates.
            Bottom left is 0,0, top right is the size of the screen.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.SetAspectFromViewport">
            <summary>
            Read current viewport to update aspect ratio.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.X">
            <summary>
            The world vector that maps to (screen center, middle of right screen edge)
            Aspect ratio is taken into account.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Y">
            <summary>
            The world vector that maps to (screen center, middle of top screen edge)
            Aspect ratio is taken into account. This is also the direction of the
            up vector if you were going to use a 3d LookAt.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.CalcBounds">
            <summary>
            Calculate the bounds (in world coordinates) of the portion of world visible on screen.
            This can be used for screen culling (it is used by DrawRulers for instance).
            If there is no rotation, the bounds matches the screen exactly.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetTransform">
            <summary>
            Calculate the camera transform matrix (orthonormal positioning matrix), as a Matrix4.
            GetTransform().InverseOrthonormal() is what you push on the view matrix stack.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.NormalizedToWorldMatrix">
            <summary>
            Return the NormalizedToWorld matrix, as a Matrix3.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>
            Given a point in normalized screen coordinates (-1->1), return its corresponding world position.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetTouchPos(System.Int32,System.Boolean)">
            <summary>
            Return the 'nth' touch position in world coordinates.
            The 'prev' flag is for internal use only.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Navigate(System.Int32)">
            <summary>
            Debug navigation: drag/zoom using touch interface.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Push">
            <summary>
            Push all necessary matrices on the matrix stack.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Pop">
            <summary>
            Pop all camera matrices from the matrix stack.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.DebugDraw(System.Single)">
            <summary>
            Draw default grid, rulers spacing 1, grey grid + black axis,
            with coordinate system arrows on top.
            Note that DebugDraw() doesn't call Push()/Pop() internally. It is your responsability to call it between this Camera's Push()/Pop().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.GetPixelSize">
            <summary>
            Based on current viewport size, get the size of a "screen pixel" in world coordinates.
            Can be used to determine scale factor needed to draw sprites or fonts 1:1 for example.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Center">
            <summary>
            The world position that maps to screen center.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Aspect">
            <summary>
            Aspect ratio width/height.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Znear">
            <summary>
            Projection's near z value.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Zfar">
            <summary>
            Projection's far z value.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Data">
            Pack some internal bits in a struct so we can copy easily
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D.Data.m_support_unit_vec">
            The support vector is the 2D world vector that maps to "from center of screen to middle of right screen edge"
            (or "to the middle of the top screen edge" if m_support_is_y is set to true). It is decomposed into
            a unit vector component 'm_support_unit_vec' and its len 'm_support_scale'.
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum">
            <summary>
            Frustum object, used by Camera2D and Camera3D. 
            It only deals with perspective.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.#ctor">
            <summary>Frustum constructor.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Aspect">
            <summary>Width/Height aspect ratio.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Znear">
            <summary>
            Projection's near z value.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Zfar">
            <summary>
            Projection's far z value.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.GetPoint(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>
            Given a point in normalized screen coordinates (bottom left (-1,1) and upper right (1,1)), 
            and a z value, return the corresponding 3D point in view space.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.Matrix">
            <summary>The projection as a matrix.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.FovX">
            <summary>
            Field of view along X axis. 
            If you set the field of view with this property, X becomes the main fov direction for this Frustum, 
            and FovY value's correctness will depend on Aspect's value. 
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Frustum.FovY">
            <summary>
            Field of view along Y axis. 
            If you set the field of view with this property, Y becomes the main fov direction for this Frustum, 
            and FovX value's correctness will depend on Aspect's value. 
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D">
            <summary>The 3D camera here is quite primitive, as the library is mainly 2D.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers)">
            <summary>constructor.
            </summary>
            <param name="gl">Needed for its matrix stack.</param>
            <param name="draw_helpers">Needed only for debug draw (DebugDraw).</param>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Eye">
            <summary>Eye positions.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Center">
            <summary>View center/target position.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Up">
            <summary>Up vector.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Frustum">
            <summary>The perspective.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.TouchPlaneMatrix">
            <summary>
            This model matrix is used by NormalizedToWorld/GetTouchPos so we can
            define a 2d plane to raytrace touch direction against.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetFromCamera2D(Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera2D)">
            <summary>
            Position the camera and set the persective so that it matches
            exactly the 2D ortho view (when all sprites are drawn
            on the Z=0 plane anyway, which is the default).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetAspectFromViewport">
            <summary>
            Update the aspect ratio based on current viewport.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetTransform">
            <summary>
            Calculate the camera transform marix (positioning matrix), as a Matrix4.
            GetTransform().InverseOrthonormal() is what you push on the view matrix stack.
            Return an orthonormal matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Push">
            <summary>
            Push all necessary matrices on the matrix stack.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Pop">
            <summary>
            Pop all camera matrices from the matrix stack.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.DebugDraw(System.Single)">
            <summary>
            Draw a canonical debug grid.
            Note that DebugDraw() doesn't call Push()/Pop() internally. It is your responsability to call it between this Camera's Push()/Pop().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>
            Note that unlike Camera2D.NormalizedToWorld, Camera3D.NormalizedToWorld might not return a
            valid position, since it's a ray/plane intersection.
            The return point is in 2d, in touch plane local coordinates. This function uses the
            TouchPlaneMatrix property to know which plane to intersect, so TouchPlaneMatrix must
            have been set beforehand (use Node.NormalizedToWorld does it for you).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetTouchPos(System.Int32,System.Boolean)">
            <summary>
            Return the 'nth' touch position in world coordinates.
            The 'prev' flag is for internal use only.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.CalcBounds">
            <summary>
            Return the most recent bounds set by SetFromCamera2D.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetViewFromViewport">
            <summary>
            Creates a 3D view that max the screen bounds in pixel size (in plane z=0).
            Exactly match the 3D frustum. Eye distance to z=0 plane is calculated based
            on current Frustum.FovY value.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.GetPixelSize">
            <summary>
            Based on current viewport size, get the size of a "screen pixel" in world coordinates.
            Can be used to determine scale factor needed to draw sprites or fonts 1:1 for example.
            Uses the most recent Bounds2 set by SetFromCamera2D.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.Navigate(System.Int32)">
            <summary>
            Debug camera navigation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Camera3D.SetTouchPlaneMatrix(Sce.PlayStation.Core.Matrix4)">
            <summary>
            Set the model plane matrix used in GetTouchPos and NormalizedToWorld.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.WrapIndex(System.Int32,System.Int32)">
            <summary>
            Loop index in [0,n-1], works with negative indexes too (-1 returns n-1 etc).
            Note that n is a size (for example, the size of an array object) and therefore its value is assumed to be > 0.
            If n is negative or zero the result is undefined.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.ClampIndex(System.Int32,System.Int32)">
            <summary>
            Clamp index in [0,n-1]
            Same as Clamp( i, 0, n-1 ).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.GetEmbeddedResource(System.String)">
            <summary>
            Get an embedded file's binary data, used for shaders mostly.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Common.FrameCount">
            <summary>Global frame counter.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers">
            <summary>
            Some basic drawing functionalities (2D/3D).
            This class is mostly an ImmediateMode object coupled with a debug shader. 
            You shouldn't use DrawHelpers for anything else than visual debugging, 
            as by nature it is not performance friendly at all.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32)">
            <summary>
            </summary>
            <param name="gl">The core graphics context.</param>
            <param name="max_vertices">The maximum number of vertices you will be able to
            write in one frame with this DrawHelpers object.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmBegin(Sce.PlayStation.Core.Graphics.DrawMode,System.UInt32)">
            <summary>
            Start a new immediate primitive. 
            </summary>
            <param name="mode">The draw primive type.</param>
            <param name="max_vertices_intended">You must specify the maximum number of 
            vertices you intend to write with ImmVertex(): the number of ImmVertex() calls 
            following this function must be inferior or equal to 'max_vertices_intended'.
            </param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex)">
            <summary>
            Add a vertex to current primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.Core.Vector4)">
            <summary>
            Add a vertex to current primitive, using the most recent color set by SetColor().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmVertex(Sce.PlayStation.Core.Vector2)">
            <summary>
            Add a vertex to current primitive, using the most recent color set by SetColor().
            (z,w) is set to (0,1).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ImmEnd">
            <summary>
            Finish current primitive (this function triggers the actual draw call).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ShaderPush">
            <summary>
            ShaderPush() reads current MVP matrix and sets the current shader.
            For DrawHelpers we allow nesting (shader parameters get updated
            internally accordingly).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ShaderPop">
            <summary>
            "Pop" the shader. Number of ShaderPush() calls must match the number of ShaderPush().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.SetColor(Sce.PlayStation.Core.Vector4)">
            <summary>
            Set the color to be used by the next calls to ImmVertex.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawBounds2Fill(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>
            Draw a filled axis aligned rectangle.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawBounds2(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>
            Draw a wireframe axis aligned rectangle.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawConvexPoly2(Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2)">
            <summary>
            Draw convex polygon.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDisk(Sce.PlayStation.Core.Vector2,System.Single,System.UInt32)">
            <summary>
            Draw a filled disk.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="n">Tesselation.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCircle(Sce.PlayStation.Core.Vector2,System.Single,System.UInt32)">
            <summary>
            Draw a filled circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="n">Tesselation.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCoordinateSystem2D(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams)">
            <summary>
            Draw the coordinate system represented by a transformation matrix 
            using arrows. The x vector is represented by a red arrow, and the y 
            vector is represented by a green arrow.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawCoordinateSystem2D">
            <summary>
            Draw a unit len arrow on x and y axis. Color is set to vector
            coordinates, so the x arrow is red (1,0,0), and the y arrow is
            green (0,1,0).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawArrow(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams)">
            <summary>
            Draw a 2d arrow. This function can be wrapped by ImmBegin()/ImmEnd(), 
            if you need to draw several arrows but want to limit the number of 
            draw calls. Each arrow consumes at most 9 vertices.
            </summary>
            <param name="start_point">Arrow's start point.</param>
            <param name="end_point">Arrow's tip.</param>
            <param name="ap">Arrow geometry parameters.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawLineSegment(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Draw a single line segment.
            This is expensive, if you draw many lines, don't use this function.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawInfiniteLine(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Draw a single line segment.
            This is expensive, if you draw many lines, don't use this function.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawRulers(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single,System.Single)">
            <summary>
            Draw all the vertical and horizontal lines in a given rectangle, regularly spaced.
            Since the smaller step_x or step_y are, the more lines primitives are generated, 
            it is easy to overflow the immediate draw mode vertex buffer. For that reason care 
            must be taken when setting the step values respective to the the bounds clip area.
            </summary>
            <param name="step_x">X spacing (starts at 0).</param>
            <param name="step_y">Y spacing (starts at 0).</param> 
            <param name="bounds">Clipping rectangle.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawAxis(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single)">
            <summary>
            Draw axis lines (x=0 and y=0 lines) with a thickness.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDefaultGrid(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>
            This function draws all the vertical and horizontal lines (rulers) regularly placed 
            at multiples of 'step' distances that are inside the rectangle 'clipping_bounds'. 
            It also draws the the 2 thick axis lines. All lines drawn are clipped again 
            'clipping_bounds'. Blend mode is untouched when drawing the rulers, then blend is 
            disabled when drawing axis lines.
            </summary>
            <param name="clipping_bounds">Clipping rectangle.</param>
            <param name="step">Horizontal and vertical spacing between rulers.</param>
            <param name="rulers_color">Color of rulers lines.</param>
            <param name="axis_color">Color of axis lines.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.DrawDefaultGrid(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,System.Single)">
            <summary>
            DrawDefaultGrid with a default color/blend.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Disposed">
            <summary>Return true if this object been disposed.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex">
            <summary>
            The vertex type used by DrawHelpers (V4F_C4F)
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.Position">
            <summary>The vertex position. 2D positions should have (z,w) set to (0,1).</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.Color">
            <summary>Color, each element in 0,1 range (but values don't get clamped).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.#ctor(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.Vertex.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector4)">
            <summary>Constructor.
            </summary>
            <param name="pos">The position is expended to 3d by setting (z,w) to (0,1).</param>
            <param name="col">The color.</param>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams">
            <summary>
            Arrow parameters passed to DrawArrow.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HeadRadius">
            <summary>
            Length of the base of the arrow's head.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HeadLen">
            <summary>
            Length of the arrow's head.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.BodyRadius">
            <summary>
            Arrow's body's radius.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.Scale">
            <summary>
            A scale factor applied to HeadRadius, HeadLen, BodyRadius.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.HalfMask">
            <summary>
            You can display half of the arrow (and select which side) handy for debugging half edge graphs for example.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.Offset">
            <summary>
            Arrow end points can be offset along the perpendicular direction.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.DrawHelpers.ArrowParams.#ctor(System.Single)">
            <summary>
            ArrowParams's constructor.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData">
            <summary>
            Embedded font data for on screen debug prints.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CharSizei">
            <summary>
            The size of each character in pixels (this is a fixed size font).
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CharSizef">
            <summary>
            The size of each character in pixels, as a Vector2.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.CreateTexture">
            <summary>
            Create a Texture2D object containing the font data.
            It is up to the caller to Dipose of the created texture.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.EmbeddedDebugFontData.NumChars">
            <summary>
            The number of Ascii characters available in this font, starting from ' '.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap">
             <summary>
             Given a Font object and a text containing all the characters you intend to use, 
             FontMap creates a Texture2D object containg the characters and its corresponding 
             table of UVs. This data is used by GameEngine2D in various text rendering functions.
             Examples:
              new FontMap( new Font( "D:\\Blah\\YourFont.TTF", 32, FontStyle.Bold ), 512 );
              new FontMap( new Font( FontAlias.System, 32, FontStyle.Bold ), 512 );
             </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Texture">
            <summary>The font texture containing all the characters.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharSet">
            <summary>Map characters to their corresponding CharData (UV and size data).</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharPixelHeight">
            <summary>Character height in pixels - all characters have the same pixel height.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.AsciiCharSet">
            <summary>The ascii character set as a string.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.#ctor(Sce.PlayStation.Core.Imaging.Font,System.Int32)">
            <summary>
            Create a FontMap for the ASCII char set.
            </summary>
            <param name="font">The font to use to render characters. Note that FontMap disposes of this Font object.</param>
            <param name="fontmap_width">The internal width used by the texture. Height is adjusted automatically so that all characters fit.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.#ctor(Sce.PlayStation.Core.Imaging.Font,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="font">The font to use to render characters. Note that FontMap disposes of this Font object.</param>
            <param name="charset">A string containing all the characters you will ever need when drawing text with this FontMap.</param>
            <param name="fontmap_width">The internal with used by the texture (height is adjusted automatically).</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Initialize(Sce.PlayStation.Core.Imaging.Font,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="font">The font to use to render characters. Note that FontMap disposes of this Font object.</param>
            <param name="charset">A string containing all the characters you will ever need when drawing text with this FontMap.</param>
            <param name="fontmap_width">The internal with used by the texture (height is adjusted automatically).</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.TryGetCharData(System.Char,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData@)">
            <summary>
            Try to get the CharData needed to draw the character 'c'.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.Disposed">
            <summary>Return true if this object been disposed.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData">
            <summary>The UV data for a single character.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData.UV">
            <summary>UV in FontMap's Texture.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap.CharData.PixelSize">
            <summary>The pixel size for this character (depends on the font.)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode">
            <summary>
            BlendMode wraps the blend state (BlendFunc+'enabled' bool) and provides some human friendly blend mode names.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Enabled">
            <summary>Blend enabled flag.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.BlendFunc">
            <summary>Blend function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.#ctor(System.Boolean,Sce.PlayStation.Core.Graphics.BlendFunc)">
            <summary>Constructor.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.None">
            <summary>No alpha blend: dst = src</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Normal">
            <summary>Normal alpha blend: dst = lerp( dst, src, src.a )</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Additive">
            <summary>Additive alpha blend: dst = dst + src</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.Multiplicative">
            <summary>Multiplicative alpha blend: dst = dst * src</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode.PremultipliedAlpha">
            <summary>Premultiplied alpha blend: dst = dst * (1-src.a ) + src</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha">
            <summary>
            Augment Sce.PlayStation.Core.Graphics.GraphicsContext with a matrix stack and a couple of other functions.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.#ctor(Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>GraphicsContextAlpha constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ModelMatrix">
            <summary>
            The model matrix stack, similar to OpenGL.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ViewMatrix">
            <summary>
            The view matrix stack, similar to OpenGL.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.ProjectionMatrix">
            <summary>
            The projection matrix stack, similar to OpenGL.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats">
            <summary>
            DebugStats for simple profiling.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetMVP">
            <summary>
            GetMVP() is a shortcut for ProjectionMatrix.Get() * ViewMatrix.Get() * ModelMatrix.Get().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetAspect">
            <summary>
            GetAspect() is a shortcut that returns the viewport's aspect ratio (width/height).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.GetViewportf">
            <summary>
            This function returns the viewport as a Bounds2 object.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.SetDepthMask(System.Boolean)">
            <summary>
            Set the depth write mask.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.SetBlendMode(Sce.PlayStation.HighLevel.GameEngine2D.Base.BlendMode)">
            <summary>
            Set the blend mode.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.CreateTextureUnicolor(System.UInt32)">
            <summary>
            Create a small texture where all pixels have the same color.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.CreateTextureFromFont(System.String,Sce.PlayStation.Core.Imaging.Font,System.UInt32)">
            <summary>
            Given a Font object and a text, create a texture representing text.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Context">
            <summary>
            The core graphics context.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.Disposed">
            <summary>Return true if this object been disposed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.WhiteTextureInfo">
            <summary>
            Return a small white texture with all pixels set to 0xffffffff, as a TextureInfo.
            Used as default in some shaders.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats_">
            <summary>
            DebugStats at the moment only stores a DrawArrays calls counter.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha.DebugStats_.DrawArraysCount">
            <summary>
            Number ot times DrawArrays got called by the GameEngine2D library (not including your own calls to that function). 
            Since DrawArrays is a costly function, this counter is a useful profiling information.
            The counter gets reset everyframe.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors">
            <summary>
            Some named colored constants.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Black">
            <summary>0,0,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Red">
            <summary>1,0,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Green">
            <summary>0,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Yellow">
            <summary>1,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Blue">
            <summary>0,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Magenta">
            <summary>1,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Cyan">
            <summary>0,1,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.White">
            <summary>1,1,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Lime">
            <summary>0.5,1,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.LightBlue">
            <summary>0,0.5,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Pink">
            <summary>1,0,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Orange">
            <summary>1,0.5,0,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.LightCyan">
            <summary>0,1,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Purple">
            <summary>0.5,0,1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey05">
            <summary>0.05,0.05,0.05,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey10">
            <summary>0.1,0.1,0.1,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey20">
            <summary>0.2,0.2,0.2,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey30">
            <summary>0.3,0.3,0.3,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey40">
            <summary>0.4,0.4,0.4,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey50">
            <summary>0.5,0.5,0.5,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey60">
            <summary>0.6,0.6,0.6,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey70">
            <summary>0.7,0.7,0.7,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey80">
            <summary>0.8,0.8,0.8,1</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Colors.Grey90">
            <summary>0.9,0.9,0.9,1</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1">
            <summary>
            An immediate mode vertex array that you can write everyframe
            using a ImmBegin()/ImmVertex()/ImmEnd() OpenGL style interface.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32,System.UInt16[],System.Int32,System.Int32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            <summary>
            ImmediateMode constructor.
            If indices is not null, vertices_per_primitive and indices_per_primitive must follow the constraints below:
             - vertices_per_primitive must not be 0
             - indices_per_primitive must not be 0
             - max_vertices must be a multiple of vertices_per_primitive
             - indices.Length must be a multiple of indices_per_primitive
             - max_vertices / vertices_per_primitive must be equal to indices.Length / indices_per_primitive
            If any of those constraints is not met, the constructor will assert.
            Note that ImmediateMode relies on the frame counter incremented by Common.OnSwap().
            In the context of using GameEngine2D.Director, Common.OnSwap() is already called inside Director.Instance.PostSwap(). 
            But if you use ImmediateMode "stand alone" then you will need to call Common.OnSwap() yourself everyframe to make 
            sure the GameEngine2D's frame counter gets increments (else you will get memory leaks.)
            </summary>
            <param name="gl">The core graphics context.</param> 
            <param name="max_vertices">The maximum number of vertices you can have per frame.</param>
            <param name="indices">The array of indices (can be null), assuming a static setup.</param>
            <param name="vertices_per_primitive">If indices is not null, this must be set to the number of vertices each ImmBegin is expected to have. If indices is null, just set to 0.</param>
            <param name="indices_per_primitive">If indices is not null, this must be set to the number of indices you want to draw for each primitive. If indices is null, just set to 0.</param>
            <param name="formats">The vertex format, passed to VertexBuffer as it is.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmBegin(Sce.PlayStation.Core.Graphics.DrawMode,System.UInt32)">
            <summary>Begin a draw primitive.</summary>
            <param name="mode">The draw primitive type.</param>
            <param name="max_vertices_intended">The maximum number of vertices you intend to write.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmVertex(`0)">
            <summary>
            Add a vertex, must be called between ImmBegin and ImmEnd.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmEnd">
            <summary>
            End draw primitive and draw.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmEndIndexing">
            <summary>
            Special version of ImmEnd that uses the 'vertices_per_primitive' and 'indices_per_primitive' arguments
            passed to ImmediateMode's constructor. It is assumed that in that case all primitives consume the same
            amount of vertices.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.Disposed">
            <summary>Return true if this object been disposed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.ImmActive">
            <summary>
            Return true if we are in the middle of an ImmBegin()/ImmEnd().
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateMode`1.MaxVertices">
            <summary>
            Return the maximum (total) number of vertices we can add per frame.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1">
            <summary>
            ImmediateModeQuads wraps ImmediateMode to deal with quad rendering only.
            This is used by SpriteRenderer and other places.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32,Sce.PlayStation.Core.Graphics.VertexFormat[])">
            <summary>Constructor.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmBeginQuads(System.UInt32)">
            <summary>Prepare for registering n quads for rendering.</summary>
            <param name="num_quads">The maximum number of quads you intend to add.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmAddQuad(`0,`0,`0,`0)">
            <summary>
            Add a quad
            v2----v3
             |    | 
            v0----v1
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmAddQuad(`0[])">
            <summary>
            Add a quad
            v[2]----v[3]
              |      | 
            v[0]----v[1]
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.ImmEndQuads">
            <summary>
            Draw all the quads added since the last ImmBeginQuads
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.Disposed">
            <summary>Return true if this object been disposed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ImmediateModeQuads`1.MaxQuads">
            <summary>
            Return the maximum (total) number of quads we can add per frame.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.VertexBufferPool.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2">
            <summary>
            Wrap Sce.PlayStation.Core.Input so that input conditional expressions are less verbose.
            Some examples:
            if ( Input2.GamePad.GetData(0).Left.Down )  // is game pad left button down
            if ( Input2.GamePad0.Left.Down )            // same as above, but we use an alias 'GamePad0' for GamePad.GetData(0)
            if ( Input2.GamePad0.Square.Release )       // has gamepad square button just been released
            if ( Input2.Keyboard0.Left.Press )          // has keyboard left arrow button just been pressed
            if ( Input2.Keyboard0.S.On )                // has keyboard S key been held down for more than one frame
            Note that you don't have to use Input2. The GameEngine2D library uses it internally in a couple of places
            and it's used in samples too. It keeps the GetData( deviceIndex ) api but simply harmonizes the state queries for buttons.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch00">
            <summary>Alias for Touch.GetData(0)[0]</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad0">
            <summary>Alias for GamePad.GetData(0)</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState">
            <summary>
            Button data structure shared between various helper wrap of
            Input.GamePad, Input.Touch and the Keyboard.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Down">
            <summary>Return true if we are pushing the button this frame</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Press">
            <summary>Return true if we are pushing the button this frame but weren't pushing in previous frame</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.On">
            <summary>Return true if we are pushing the button this frame and were pushing in previous frame as well</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.ButtonState.Release">
            <summary>Return true if we are not pushing the button this frame but were pushing in previous frame</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData">
            <summary>
            Wrap Input.TouchData.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Pos">
            <summary>
            For consistency with the graphics system, this function returns the touch position 
            in normalized screen coordinates:  bottom left (-1,1), upper right (1,1).
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Down">
            <summary>Return true if we are touching this frame</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Press">
            <summary>Return true if we are touching this frame but weren't touching in previous frame</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.On">
            <summary>Return true if we are touching this frame and were touching in previous frame as well</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchData.Release">
            <summary>Return true if we are not touching this frame but were touching in previous frame</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.TouchDataArray.SetData(System.Collections.Generic.List{Sce.PlayStation.Core.Input.TouchData})">
            <summary>
            By default, Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2 simply gets the input data automatically, but 
            you can override this behaviour and manually set the data. If the data you set has the .Skip flag set 
            to true, all touch and button input will be ignored in Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.
            Calling SetData once forever enables the manual/external control behavior.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch">
            <summary>
            Wrap Input.Touch.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch.GetData(System.UInt32)">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.Touch.MaxTouch">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData">
            <summary>
            Wrap Input.GamePadData.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Left">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Up">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Right">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Down">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Square">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Triangle">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Circle">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Cross">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Start">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Select">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.L">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.R">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.Dpad">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.AnalogLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.AnalogRight">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePadData.SetData(Sce.PlayStation.Core.Input.GamePadData)">
            <summary>
            By default, Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2 simply gets the input data automatically, but 
            you can override this behaviour and manually set the data. If the data you set has the .Skip flag set 
            to true, all touch and button input will be ignored in Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.
            Calling SetData once forever enables the manual/external control behavior.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad">
            <summary>
            Wrap Input.GamePad (button bits).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Input2.GamePad.GetData(System.UInt32)">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math">
            <summary>Some extensions to the math/vector lib</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LookAt(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>
            Compute a lookat matrix for the camera. The vector (eye, center)
            maps to -z (since OpenGL looks downward z), and up maps to y.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.TranslationRotationScale(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Fast build of a Matrix3 TRS matrix.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Det(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Return the determinant formed by 2 vectors.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sign(System.Single)">
            <summary>Return the sign of x (returns 0.0f is x=0.0f).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Perp(Sce.PlayStation.Core.Vector2)">
            <summary>Return value rotated by pi/2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.SetAlpha(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>Set alpha (can be inlined in math expressions).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.SafeAcos(System.Single)">
            <summary>SafeAcos checks that x is in [-1,1], and if x is off by an epsilon it clamps it.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Angle(Sce.PlayStation.Core.Vector2)">
            <summary>Return the absolute 2d angle formed by (1,0) and value, in range -pi,pi</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rotate(Sce.PlayStation.Core.Vector2,System.Single,Sce.PlayStation.Core.Vector2)">
            <summary>Rotate 'point' around rotation center 'pivot' by an angle 'angle' (radians).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Deg2Rad(System.Single)">
            <summary>Degree to radians.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rad2Deg(System.Single)">
            <summary>Radians to degrees.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Deg2Rad(Sce.PlayStation.Core.Vector2)">
            <summary>Element wise degree to radians.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Rad2Deg(Sce.PlayStation.Core.Vector2)">
            <summary>Element wise radians to degrees.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(System.Single,System.Single,System.Single)">
            <summary>Linear interpolation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>Linear interpolation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>Linear interpolation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Lerp(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>Linear interpolation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LerpUnitVectors(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>Lerp 2 (assumed) unit vectors (shortest path).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.LerpAngles(System.Single,System.Single,System.Single)">
            <summary>Lerp 2 angle values (shortest path).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sin(System.UInt32,System.Single,System.UInt32)">
            <summary>A "safe" sine function taking uint values.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Sin(System.UInt64,System.Single,System.UInt64)">
            <summary>A "safe" sine function taking ulong values.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Linear(System.Single)">
            <summary>This is just f(x)=x, named so that code is more explicit when it is passed as a tween function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowerfulScurve(System.Single,System.Single,System.Single)">
            <summary>
            A very controlable s curve, lets you do polynomial ease in/out curves
            with little code.
            </summary>
            <param name="x">Asssumed to be in 0,1.</param>
            <param name="p1">Controls the ease in exponent (if >1).</param>
            <param name="p2">Controls the ease out exponent (if >1.,(p1,p2)=(1,1) just gives f(x)=x</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseIn(System.Single,System.Single)">
            <summary>Ease in curve using Pow.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseOut(System.Single,System.Single)">
            <summary>Ease out curve using Pow.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.PowEaseInOut(System.Single,System.Single)">
            <summary>
            PowEaseIn/PowEaseOut mirrored around 0.5,0.5.
            Same exponent in and out.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ExpEaseOut(System.Single,System.Single)">
            <summary>
            Ease out curve using a 1-exp(-a*x) exponential,
            but normalized so that we reach 1 when x=1.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ExpEaseIn(System.Single,System.Single)">
            <summary>Ease in curve using an exponential.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseIn(System.Single,System.Single)">
            <summary>BackEaseIn function (see  http://www.robertpenner.com)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseOut(System.Single,System.Single)">
            <summary>BackEaseOut function (see  http://www.robertpenner.com)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.BackEaseInOut(System.Single,System.Single)">
            <summary>BackEaseIn/BackEaseOut mirrored around 0.5,0.5.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Impulse(System.Single,System.Single)">
            <summary>Impulse function (source Inigo Quilez).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ShockWave(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Travelling wave function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Log2(System.Int32)">
            <summary>Return the log of v in base 2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.IsPowerOf2(System.Int32)">
            <summary>Return true if 'i' is a power of 2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.GreatestOrEqualPowerOf2(System.Int32)">
            <summary>Return the closest greater or equal power of 2.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._00i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._10i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._01i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._11i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._000i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._100i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._010i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._110i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._001i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._101i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._011i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._111i">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._00">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._10">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._01">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._11">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1000">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1100">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1010">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1110">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1001">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1101">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1011">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._0111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math._1111">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.UV_TransformIdentity">
            <summary>
            UV transform stored as (offset, scale) in a Vector4.
            offset=0,0 scale=1,1 means identity.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.UV_TransformFlipV">
            <summary>
            UV transform stored as (offset, scale) in a Vector4
            UV_TransformFlipV v into 1-v, and leaves u unchanged.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.ClosestSegmentPoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Return the closest point to P that's on segment [A,B].</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.Pi">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.TwicePi">
            <summary>2pi</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.HalfPi">
            <summary>pi/2</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator">
            <summary>Wrap System.Random and extend with vector random generation.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.Random">
            <summary>The raw random generator.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloat0_1">
            <summary>Return a random float in 0,1.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloatMinus1_1">
            <summary>Return a random float in -1,1.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextFloat(System.Single,System.Single)">
            <summary>Return a random float in mi,ma.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2Minus1_1">
            <summary>Return a random Vector2 -1,1.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Return a random Vector2 in mi,ma.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector2(System.Single,System.Single)">
            <summary>Return a random Vector2 in mi,ma.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector3(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>Return a random Vector3 in mi,ma.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector4(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Return a random Vector4 in mi,ma.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Math.RandGenerator.NextVector4(System.Single,System.Single)">
            <summary>Return a random Vector4 in mi,ma.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i">
            <summary>
            Integer version of Vector2.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Y">
            <summary>Y</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.#ctor(System.Int32,System.Int32)">
            <summary>Vector2i constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Vector2">
            <summary>Return this as a Vector2 (cast to float).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Max(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Element wise max.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Min(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Element wise min.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Clamp(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Element wise clamp.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.ClampIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>
            Element wise index clamp.
            X is clamped to [0,n.X-1]
            Y is clamped to [0,n.Y-1]
            <param name="n">The 2d size "this" components must be clamped against. The components of n are assumed to be positive (values of n.X or n.Y negative or zero will result in undefined behaviour).</param>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.WrapIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>
            Element wise index wrap. 
            X wraps around [0,n.X-1]
            Y wraps around [0,n.Y-1]
            This's (X,Y) is assumed to be a 2d index in a 2d table of size (n.X,n.Y).
            If X or Y are not in the valid array range, they are wrapped around [0,n.X-1] and [0,n.Y-1] respectively (-1 becomes n-1, n becomes 0, n+1 becomes 1 etc), else their value is unchanged.
            <param name="n">The 2d size "this" components must be wrapped around. The components of n are assumed to be positive (values of n.X or n.Y negative or zero will result in undefined behaviour).</param>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Element wise addition.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Element wise subtraction.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Element wise multiplication.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Int32)">
            <summary>Element wise multiplication.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Multiply(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Element wise multiplication.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Division(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Element wise division.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_UnaryNegation(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Unary minus operator.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Equality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Return true if all elements are equal.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.op_Inequality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Return true if at least one element is non equal.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Product">
            <summary>Return the product of elements, X * Y</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>Equality test.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Equals(System.Object)">
            <summary>Equality test.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.ToString">
            <summary>Return the string representation of this vector.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.GetHashCode">
            <summary>Gets the hash code for this vector.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i.Yx">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i">
            <summary>
            Integer version of Vector3.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.X">
            <summary>X</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Z">
            <summary>Z</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Vector3i constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Int32)">
            <summary>Vector3i constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Vector3">
            <summary>Return this as a Vector3 (cast to float).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Max(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Element wise max.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Min(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Element wise min.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Clamp(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Element wise clamp.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.ClampIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>
            Element wise index clamp.
            X is clamped to [0,n.X-1]
            Y is clamped to [0,n.Y-1]
            Z is clamped to [0,n.Z-1]
            <param name="n">The 3d size "this" components must be clamped against. The components of n are assumed to be positive (values of n.X, n.Y or n.Z negative or zero will result in undefined behaviour).</param>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.WrapIndex(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>
            Element wise index wrap. 
            X wraps around [0,n.X-1]
            Y wraps around [0,n.Y-1]
            Z wraps around [0,n.Z-1]
            This's (X,Y,Z) is assumed to be a 3d index in a 3d table of size (n.X,n.Y.n.Z).
            If X, Y or Z are not in the valid array range, they are wrapped around [0,n.X-1], [0,n.Y-1], [0,n.Z-1] respectively (-1 becomes n-1, n becomes 0, n+1 becomes 1 etc), else their value is unchanged.
            <param name="n">The 2d size "this" components must be wrapped around. The components of n are assumed to be positive (values of n.X, n.Y or n.Z negative or zero will result in undefined behaviour).</param>
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Element wise addition.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Element wise subtraction.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Element wise multiplication.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Division(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Element wise division.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Equality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Return true if all elements are equal.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.op_Inequality(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Return true if at least one element is non equal.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Product">
            <summary>Return the product of elements, X * Y * Z</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i)">
            <summary>Equality test.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Equals(System.Object)">
            <summary>Equality test.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.ToString">
            <summary>Return the string representation of this vector.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.GetHashCode">
            <summary>Gets the hash code for this vector.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Xzz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Yzz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zxz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zyz">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzx">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzy">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector3i.Zzz">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics">
            <summary>Common interface for Bounds2, Sphere2, ConvexPoly2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ICollisionBasics.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2">
            <summary>
            An axis aligned box class in 2D.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Min">
            <summary>Minimum point (lower left).</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Max">
            <summary>Maximum point (upper right)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.IsEmpty">
            <summary>Return true if the size is (0,0).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Bounds2 constructor.
            All functions in Bounds2 assume that Min is less or equal Max. If it is not the case, the user takes responsability for it.
            SafeBounds will ensure this is the case whatever the input is, but the default constructor will just blindly
            takes anything the user passes without trying to fix it.
            </summary>
            <param name="min">The bottom left point. Min is set to that value without further checking.</param>
            <param name="max">The top right point. Max is set to that value without further checking.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary>
            Bounds2 constructor. 
            Return a zero size bounds. You can then use Add to expand it. 
            </summary>
            <param name="point">Location of the Bounds2.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.SafeBounds(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Create a Bounds2 that goes through 2 points, the min and max are recalculated.
            </summary>
            <param name="min">First point.</param>
            <param name="max">Second point.</param>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Zero">
            <summary>(0,0) -> (0,0) box.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Quad0_1">
            <summary>(0,0) -> (1,1) box.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.QuadMinus1_1">
            <summary>(-1,-1) -> (1,1) box.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.CenteredSquare(System.Single)">
            <summary>
            Return a box that goes from (-h,-h) to (h,h).
            We don't check for sign.
            </summary>
            <param name="h">Half size of the square.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.op_Addition(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2)">
            <summary>Translate bounds.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.op_Subtraction(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2,Sce.PlayStation.Core.Vector2)">
            <summary>Translate bounds.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Overlaps(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>Return true if this and 'bounds' overlap.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Intersection(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>Return the Bounds2 resulting from the intersection of 2 bounds.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Scale(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Scale bounds around a given pivot.
            </summary>
            <param name="scale">Amount of scale.</param>
            <param name="center">Scale center.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Add(Sce.PlayStation.Core.Vector2)">
            <summary>Add the contribution of 'point' to this Bounds2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Add(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>Add the contribution of 'bounds' to this Bounds2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.ToString">
            <summary>Return the string representation of this Bounds2.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.OutrageousYTopBottomSwap">
            <summary>
            Swap y coordinates for top and bottom, handy for hacking uvs
            in system that use 0,0 as top left. Also, this will generate
            an invalid Bounds2 and all functions in that class will break
            (intersections, add etc.)
            Functions like Point00, Point10 etc can still be used.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.OutrageousYVCoordFlip">
            <summary>
            Similar to OutrageousYTopBottomSwap, but instead of
            swapping top and bottom y, it just does y=1-y. Same
            comment as OutrageousYTopBottomSwap.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Aspect">
            <summary>The Width/Height ratio.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Center">
            <summary>The center of the bounds (Max+Min)/2.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Size">
            <summary>The Size the bounds (Max-Min).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point00">
            <summary>The bottom left point (which is also Min).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point11">
            <summary>The top right point (which is also Max).</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point10">
            <summary>The bottom right point.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2.Point01">
            <summary>The top left point.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2">
            <summary>A plane class in 2D.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.Base">
            <summary>A base point on the plane.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.UnitNormal">
            <summary>The plane normal vector, assumed to be unit length. If this is not the case, some functions will have undefined behaviour.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.#ctor(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Plane2 constructor</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.Project(Sce.PlayStation.Core.Vector2)">
            <summary>
            Project a point on this plane.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Plane2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2">
            <summary>A sphere class in 2D.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.Center">
            <summary>Sphere center.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.Radius">
            <summary>Sphere radius.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>Sphere2 constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Sphere2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2">
            <summary>A convex polygon class in 2D.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Planes">
            <summary>
            The convex poly is stored as a list of planes assumed to define a 
            convex region. Plane base points are also polygon vertices.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.#ctor(Sce.PlayStation.Core.Vector2[])">
            <summary>
            ConvexPoly2 constructor.
            Assumes input points define a convex region.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.MakeBox(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.MakeRegular(System.UInt32,System.Single)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Size">
            <summary>Return the number of vertices (or faces)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetPoint(System.Int32)">
            <summary>Get a vertex position.</summary>
            <param name="index">The vertex index.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetNormal(System.Int32)">
            <summary>Get the normal vector of a face of this poly.</summary>
            <param name="index">The face index.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.GetPlane(System.Int32)">
            <summary>Get the plane formed by a face of this poly.</summary>
            <param name="index">The face index.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcBounds">
            <summary>Calculate the bounds of this poly.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcCenter">
            <summary>Calculate the gravity center of this poly.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.CalcArea">
            <summary>Calculate the area of this convex poly.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.IsInside(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'point' is inside the primitive (in its negative space).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.ClosestSurfacePoint(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2@,System.Single@)">
            <summary>
            Return the closest point to 'point' that lies on the surface of the primitive.
            If that point is inside the primitive, sign is negative.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.SignedDistance(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return the signed distance (penetration distance) from 'point' 
            to the surface of the primitive.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Translate(Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.NegativeClipSegment(Sce.PlayStation.Core.Vector2@,Sce.PlayStation.Core.Vector2@)">
            <summary>
            Assuming the primitive is convex, clip the segment AB against the primitive.
            Return false if AB is entirely in positive halfspace,
            else clip against negative space and return true.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.ConvexPoly2.Sphere">
            <summary>Bounding sphere, centered at center of mass.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3">
            <summary>
            A 3x3 matrix class for 2D operations (similar to Matrix4).
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.X">
            <summary>First column.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Y">
            <summary>Second column.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Z">
            <summary>Third column.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.#ctor(Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>Constructor.
            </summary>
            <param name="valx">First column.</param>
            <param name="valy">Second column.</param>
            <param name="valz">Third column.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.Core.Vector3)">
            <summary>Matrix/vector multiplication.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.op_Multiply(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3)">
            <summary>Matrix/matrix multiplication.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Transpose">
            <summary>Return the transpose.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Identity">
            <summary>Return the identity.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Zero">
            <summary>Return the matrix with all elements set to zero.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Translation(Sce.PlayStation.Core.Vector2)">
            <summary>Return a translation matrix.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Scale(Sce.PlayStation.Core.Vector2)">
            <summary>Return a scale matrix.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Skew(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return a skew matrix.
            </summary>
            <param name="value">The (tan(skewx),tan(skewy)) vector, where skewx and skewy are the skew angles.</param>		
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Rotation(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return a rotation matrix.
            </summary>
            <param name="unit_vector">A (cos(angle),sin(angle)) unit vector, where angle is the amount you want to rotate by.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Rotation(System.Single)">
            <summary>
            Return a rotation matrix.
            </summary>
            <param name="angle">Rotation angle in radians.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.TRS(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Return a Translation * Rotation * Scale transform node.
            </summary>
            <param name="translation">The translation amount.</param>
            <param name="unit_vector">A (cos(angle),sin(angle)) unit vector, where angle is the amount you want to rotate by.</param>
            <param name="scale">The scale amount.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Determinant">
            <summary>Return the determinant.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Inverse">
            <summary>Return the general inverse.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.InverseOrthonormal">
            <summary>Special inverse that assumes the matrix is a TxR (orthonormal).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Matrix4">
            <summary>
            Assuming this matrix is a transform matrix (last row=0,0,1 etc), return a Matrix4 version of it.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.GetCoordSysError">
            <summary>
            Get the last error returned by isCoordSys() as a string.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.IsOrthonormal(System.Single)">
            <summary>
            Return true if the matrix represents a valid right-handed, orthogonal 2d coordinate system.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@,System.Single)">
            <summary>Equality test.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.Equals(Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            <summary>Equality test.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3.ToString">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack">
            <summary>
            A simple, OpenGL like, transform stack,
            with some optimization hints for dealing
            with orthonormal matrices.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.#ctor(System.UInt32)">
            <summary>MatrixStack constructor.</summary>
            <param name="capacity">Maximum depth of the stack.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Push">
            <summary>
            Push matrix pushes a copy of current top matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Pop">
            <summary>
            Pop the top matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Mul(Sce.PlayStation.Core.Matrix4)">
            <summary>
            Right multiply top matrix by 'mat'.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Mul1(Sce.PlayStation.Core.Matrix4)">
            <summary>
            Right Multiply top matrix by an orthonormal matrix 'mat'. 
            If you know that your matrix is orthonormal, you can use 
            Mul1 instead of Mul. As long as you keep operating on 
            orthonormal matrices, inverse calculations will be faster.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Set(Sce.PlayStation.Core.Matrix4)">
            <summary>
            Set the current matrix (top of the matrix stack).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Set1(Sce.PlayStation.Core.Matrix4)">
            <summary>
            Set an orthonormal matrix. If you know that your matrix
            is orthonormal, you can use Set1 instead of Set. As long
            as you keep operating on orthonormal matrices, inverse
            calculations will be faster.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Get">
            <summary>
            Get the current matrix (top of the matrix stack).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.GetInverse">
            <summary>
            Update (if necessary) and return the cached inverse matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.SetIdentity">
            <summary>
            Set the top matrix to identity.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateX(System.Single)">
            <summary>
            Rotate the top matrix around X axis.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateY(System.Single)">
            <summary>
            Rotate the top matrix around Y axis.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.RotateZ(System.Single)">
            <summary>
            Rotate the top matrix around Z axis.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Rotate(Sce.PlayStation.Core.Vector3,System.Single)">
            <summary>
            Rotate the top matrix around a user given axis.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Scale(Sce.PlayStation.Core.Vector3)">
            <summary>
            Scale the top matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Translate(Sce.PlayStation.Core.Vector3)">
            <summary>
            Translate the top matrix.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Tag">
            <summary>
            Tag is a number that gets incremented everytime the top matrix content changes.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Size">
            <summary>
            Size of current stack.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.MatrixStack.Capacity">
            <summary>
            Maximum stack size.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll">
            <summary>
            Pitch/roll rotations helper object/functions.
            Pitch(x) -> roll(y) rotation order
            roll in -pi, pi
            pitch in -pi/2,pi/2
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.FromVector(Sce.PlayStation.Core.Vector3)">
            <summary>
            Return pitch in x, roll in y.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToVector(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return z=(0,0,1) rotated by roll->pitch.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.Data">
            <summary>x: pitch  y: roll (radians)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToVector">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.PitchRoll.ToMatrix">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch">
            <summary>
            Pitch/roll rotations helper object/functions.
            Roll(y) -> pitch(x) rotation order
            pitch in -pi, pi
            roll in -pi/2,pi/2
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.FromVector(Sce.PlayStation.Core.Vector3)">
            <summary>
            Return pitch in x, roll in y.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToVector(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return z=(0,0,1) rotated by roll->pitch.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.Data">
            <summary>x: pitch  y: roll (radians)</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor(Sce.PlayStation.Core.Vector2)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.#ctor(Sce.PlayStation.Core.Vector3)">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToVector">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.RollPitch.ToMatrix">
            <summary></summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo">
            <summary>
            TextureInfo holds a Texture2D object and caches associated tile UV data. 
            The source region for tiling is not necesseraly the entire texture, it 
            can be any oriented box in UV domain. 
            TextureInfo takes ownership of the Texture2D object passed to it, and 
            disposes of it in its Dispose function.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Texture">
            <summary>The texture object.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TileSizeInUV">
            <summary>Return tile size in uv units.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.NumTiles">
            <summary>Return the dimensions of the tiles grid.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.GetCachedTiledData(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i@)">
            <summary>Return the CachedTileData (which contains tile UV information) for a given tile.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor">
            <summary>TextureInfo constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(System.String)">
            <summary>TextureInfo constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D)">
            <summary>
            TextureInfo constructor.
            Note: TextureInfo takes ownership of the Texture2D passed to this constructor, and disposes of it in Dispose.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>
            TextureInfo constructor.
            Note: TextureInfo takes ownership of the Texture2D passed to this constructor, and disposes of it in Dispose.
            </summary>
            <param name="texture">The source texture.</param>
            <param name="num_tiles">The number of tile subdivisions on x and y.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.#ctor(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            <summary>
            TextureInfo constructor.
            Note: TextureInfo takes ownership of the Texture2D passed to this constructor, and disposes of it in Dispose.
            </summary>
            <param name="texture">The source texture.</param>
            <param name="num_tiles">The number of tile subdivisions on x and y.</param>
            <param name="source_area">The source rectangle, in UV domain, on which we are going to build the tiles (bottom left is 0,0).</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Initialize(Sce.PlayStation.Core.Graphics.Texture2D,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            <summary>The actual init function called by TextureInfo constructors.
            </summary>
            <param name="texture">The source texture.</param>
            <param name="num_tiles">The number of tiles/cells, horitonally and vertically.</param>
            <param name="source_area">The source rectangle, in UV domain, on which we are going to build the tiles (bottom left is 0,0).</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TextureSizef">
            <summary>Return texture size in pixels as a Vector2.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TextureSizei">
            <summary>Return texture size in pixels as a Vector2i.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.TileSizeInPixelsf">
            <summary>Return tile size in pixels as a Vector2. All tiles have the same size.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.Disposed">
            <summary>Return true if this object been disposed.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData">
            <summary>Cached UV information for each tile.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_00">
            <summary>Bottom left point UV.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_10">
            <summary>Bottom right point UV.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_01">
            <summary>Top left point UV.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo.CachedTileData.UV_11">
            <summary>Top right point UV.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer">
            <summary>
            SpriteRenderer wraps batch rendering of sprites in a simple BeginSprites / AddSprite x N / EndSprite API.
            It also provides some text rendering functions that uses FontMap.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.FlipU">
            <summary>
            Flag that will swap the U coordinates (horizontally) of all rendered sprites/quads.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.FlipV">
            <summary>
            Flag that will swap the V coordinates (vertically) of all rendered sprites/quads.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.GraphicsContextAlpha,System.UInt32)">
            <summary>SpriteRenderer constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextDebug(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader)">
            <summary>
            Debug text draw function, using a small embedded font suitable for on screen debug prints.
            Since DrawTextDebug uses very small font data, it only work with ascii text (characters
            from ' ' to '~', 32 to 126) Any character outside this range will be displayed as '?'.
            For instance "こんにちは" will be displayed as "?????".
            </summary>
            <param name="str">The text to draw.</param>
            <param name="bottom_left_start_pos">The bottom left of the text rectangle, in world space/units.</param>
            <param name="char_height">The character height in world space/units.</param>
            <param name="draw">If false, don't draw anything, just return the Bounds2 used by the text.</param>
            <param name="shader">If no shader is specified, DefaultFontShader is used.</param>
            <returns>The rectangle area covered by rendered text (call with draw=false when you want to know the covered area before actually drawing it).</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextWithFontMap(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader)">
            <summary>This text draw function uses a FontMap object.</summary>
            <param name="str">The text to draw.</param>
            <param name="bottom_left_start_pos">The bottom left of the text rectangle, in world space/units.</param>
            <param name="char_height">The character height in world space/units.</param>
            <param name="draw">If false, don't draw anything, just return the Bounds2 used by the text.</param>
            <param name="fontmap">the fontmap object (that holds the texture).</param>
            <param name="shader">The shader defaults to SpriteRenderer.DefaultFontShader.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DrawTextWithFontMap(System.String,Sce.PlayStation.Core.Vector2,System.Single,System.Boolean,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap)">
            <summary>This text draw function uses a FontMap object and SpriteRenderer's DefaultShader.</summary>
            <param name="str">The text to draw.</param>
            <param name="bottom_left_start_pos">The bottom left of the text rectangle, in world space/units.</param>
            <param name="char_height">The character height in world space/units.</param>
            <param name="draw">If false, don't draw anything, just return the Bounds2 used by the text.</param>
            <param name="fontmap">the fontmap object (that holds the texture).</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.BeginSprites(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader,System.Int32)">
            <summary>Start batch rendering of sprites.</summary>
            <param name="texture_info">The texture object.</param>
            <param name="shader">The shader object.</param>
            <param name="num_sprites">The maximum number of sprite you intend to draw.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.BeginSprites(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,System.Int32)">
            <summary>Start batch rendering of sprites.</summary>
            <param name="texture_info">The texture object.</param>
            <param name="num_sprites">The maximum number of sprite you intend to draw.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.EndSprites">
            <summary>
            End batch rendering of sprites.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            </summary>
            <param name="quad">The sprite geometry.</param>
            <param name="tile_index">Sprite UVs are specified by a tile index.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            </summary>
            <param name="quad">The sprite geometry.</param>
            <param name="tile_index">Sprite UVs are specified by a tile index.</param>
            <param name="mat">A per sprite transform matrix.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@)">
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            </summary>
            <param name="quad">The sprite geometry.</param>
            <param name="uv">Sprite UVs are specified directly using a TRS object.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS@,Sce.PlayStation.HighLevel.GameEngine2D.Base.Matrix3@)">
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            </summary>
            <param name="quad">The sprite geometry.</param>
            <param name="uv">Sprite UVs are specified directly using a TRS object.</param>
            <param name="mat">A per sprite transform matrix.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            One vector is enough to determine the orientation and scale of the sprite. The aspect ratio is
            by default the same was the size of the 'uv' domain covered (in texels).
            </summary>
            <param name="x">The len and direction of the bottom edge of the sprite.</param>
            <param name="bottom_left_start_pos">The bottom left point of the sprite.</param>
            <param name="uv_bounds">The uv bounds (Bounds2 in uv domain).</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.AddSprite(Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>
            Add a sprite to batch rendering of sprites, must be called between BeginSprites and EndSprites.
            In this version user specify 4 vertices as Vector4, where each Vector4's xy is the position of 
            the vertex, and zw is the UV.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader">
            <summary>The default shader used by SpriteRenderer.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader">
            <summary>The default font shader used by SpriteRenderer.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.Disposed">
            <summary>Return true if this object been disposed.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader">
            <summary>
            That's all the interface we require from the shaders set by user.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetMVP(Sce.PlayStation.Core.Matrix4@)">
            <summary>
            The Projection * View * Model matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetColor(Sce.PlayStation.Core.Vector4@)">
            <summary>
            Global color.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.SetUVTransform(Sce.PlayStation.Core.Vector4@)">
            <summary>
            Set the uv transform: offset in Xy and scale in Zw, (0,0,1,1) means UV is unchanged.
            Shader code example: transformed_uv = UVTransform.xy + uv * UVTransform.zw
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.ISpriteShader.GetShaderProgram">
            <summary>
            Get the ShaderProgram object.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader_">
            <summary>
            Sprites's default shader: texture modulated by a color.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultShader_.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader_">
            <summary>
            Font's default shader.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.SpriteRenderer.DefaultFontShader_.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer">
            <summary>A simple timer.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.#ctor">
            <summary>Timer constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Reset">
            <summary>
            Reset the timer.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Milliseconds">
            <summary>
            Return time elapsed (in milliseconds) since constructor as called or since last call to Reset().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Timer.Seconds">
            <summary>
            Return time elapsed (in seconds) since constructor as called or since last call to Reset().
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS">
            <summary>
            TRS comes from scenegraph terminology and is used to store a
            Translate/Rotate/Scale 2d transform in a canonical way. It also
            defines an oriented bounding box. We use it for storing both 
            sprite positionning/size and sprite UV.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.T">
            <summary>Translation.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.R">
            <summary>Rotation - stored as a unit vector (cos,sin).</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.S">
            <summary>Scale (or Size).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Rotate(System.Single)">
            <summary>Rotate the object by an angle.</summary>
            <param name="angle">Rotation angle in radian.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Rotate(Sce.PlayStation.Core.Vector2)">
            <summary>Rotate the object by an angle.</summary>
            <param name="rotation">The (cos(angle),sin(angle)) unit vector representing the rotation.</param>
            This lets you precompute the cos,sin needed during rotation.
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Quad0_1">
            <summary>A TRS that covers the unit quad that goes from (0,0) to (1,1).</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.QuadMinus1_1">
            <summary>A TRS that covers the quad that goes from (-1,-1) to (1,1).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2)">
            <summary>Convert from Bounds2: a_bounds.Min becomes T and a_bounds.Size becomes S (no rotation).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Bounds2">
            <summary>
            Convert to Bounds2. Note that end points won't match if there is a Rotation,
            but in all cases the returned bounds fully contains the TRS.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Tile(Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS)">
            <summary>
            Get a subregion from source_area, given a number of tiles and a tile index,
            assuming evenly spaced subdivision. Typically source_area will be Quad0_1
            (the unit quad, means the whole texture) and we return the uv info for a 
            given tile in the tiled texture.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Centering(Sce.PlayStation.Core.Vector2)">
            <summary>
            Translate the TRS so that the normalized point given in input becomes (0,0). 
            There are a few predefined normalized points in TRS.Local.
            </summary>
            <param name="normalized_pos">The normalized position that will become the new center. 
            For example (0.5,0.5) represents the center of the TRS, regardless of the actual size, 
            position and orientation of the TRS. (0,0) is the bottom left point, (1,1) is the top
            right point etc.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.ToString">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.X">
            <summary>The support X vector, which goes from bottom left to bottom right.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Y">
            <summary>The support Y vector, which goes from bottom left to top left.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point00">
            <summary>The bottom left point (the base point), (0,0) in 'local' coordinates.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point10">
            <summary>The bottom right point, (1,0) in 'local' coordinates.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point01">
            <summary>The top left point, (0,1) in 'local' coordinates.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Point11">
            <summary>The top right point, (1,1) in 'local' coordinates.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Center">
            <summary>Return the center of the oriented box defined by this TRS.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.RotationNormalize">
            <summary>
            RotationNormalize is like Rotation, but it normalizes on set,
            to prevent the unit vector from drifting because of accumulated numerical imprecision.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Angle">
            <summary>
            This property lets you set/get rotation as a angle. This is expensive and brings the usual
            angle discontinuity problems. The angle is always stored and returned in the the range -pi,pi.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local">
            <summary>Some aliases for commonly used points that can be passed to Centering.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.MiddleLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomLeft">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopCenter">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.Center">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomCenter">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.TopRight">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.MiddleRight">
            <summary></summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS.Local.BottomRight">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector4)">
            <summary>
            </summary>
            Hermite spline evaluation given 2 scalar and 2 gradients. Parameter u is in [0,1].
            <param name="v">
            v.x = value at 0
            v.y = value at 1
            v.z = gradient at 0
            v.w = gradient at 1
            </param>
            <param name="u">Curve parameter in [0,1].</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single,System.Single)">
            <summary>
            Hermite spline evaluation, given 2 points in xy and their tangents
            (p2's x value must be superior to p0's x value).
            </summary>
            <param name="x">The curve parameter.</param>
            <param name="p0">Left point.</param>
            <param name="p1">Right point.</param>
            <param name="t0">Tangent at p0.</param>
            <param name="t1">Tangent at p2.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Hermite(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            </summary>
            Hermite spline evaluation, given 4 points in xy.
            <param name="x">Eval parameter.</param>
            <param name="p0">Start point.</param>
            <param name="p2">End point.</param>
            <param name="p01">Vector p0,p01 defines the tangent at p0 (length matters).</param>
            <param name="p21">Vector p2,p21 defines the tangent at p2 (lenght matters).</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Cubic bezier, Vector2 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>Cubic bezier, Vector3 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bezier(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Cubic bezier, Vector4 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>Catmull-Rom, Vector2 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3,Sce.PlayStation.Core.Vector3)">
            <summary>Catmull-Rom, Vector3 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>Catmull-Rom, Vector4 control points.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRomAndDerivative(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            Catmull-Rom curve evaluation for 4 Vector2 control points.
            Return a Vector4 with position in xy and tangent in zw. Just apply Math.Perp to the tangent to get the normal vector.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BezierAuto(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>
            Piecewise cubic bezier curve.
            </summary>
            <param name="t">The curve parameter.</param>
            <param name="p0">Control point 0.</param>
            <param name="p1">Control point 1.</param>
            <param name="p2">Control point 2.</param>
            <param name="p3">Control point 3.</param>
            <param name="r">Tangent control.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            B-Spline curve evaluation for 4 Vector2 control points.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4,Sce.PlayStation.Core.Vector4)">
            <summary>
            B-Spline curve evaluation for 4 Vector4 control points.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BsplineAndDerivative(System.Single,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2,Sce.PlayStation.Core.Vector2)">
            <summary>
            B-Spline curve evaluation for 4 Vector2 control points.
            Return a Vector4 with position in xy and tangent in zw. Just apply Math.Perp to the tangent to get the normal vector.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRom(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Catmull-Rom curve evaluation for n Vector2 control points (position only).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.CatmullRomAndDerivative(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Catmull-Rom curve evaluation (with derivative) for n Vector2 control points (position only).
            Return position in xy, tangent in zw. Just apply Math.Perp to the tangent to get the normal.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.Bspline(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Bspline curve evaluation for n Vector2 control points (position only).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Base.Curves.BsplineAndDerivative(System.Single,System.Collections.Generic.List{Sce.PlayStation.Core.Vector2},System.Boolean)">
            <summary>
            Bspline curve evaluation (with derivative) for n Vector2 control points.
            Return position in xy, tangent in zw. Just apply Math.Perp to the tangent to get the normal.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase">
            <summary>
            The base class for all actions.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Tag">
            <summary>A tag value that can be used for searching this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Run">
            <summary>Kick the action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Stop">
            <summary>Stop the action (some types of actions stop themselves).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Update(System.Single)">
            <summary>The update function for this action, called every frame.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.IsRunning">
            <summary>IsRunning is true when the action is active.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionBase.Target">
            <summary>The node affected by this action.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration">
            <summary>
            The base class for actions with a finite duration.
            This is an abstract class.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration.Duration">
            <summary>This action's duration in seconds.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionWithDuration.Run">
            <summary>Kick this action.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc">
            <summary>
            A one shot action that calls a user function.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.Func">
            <summary>The function this action calls.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.#ctor(System.Action)">
            <summary>CallFunc constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.CallFunc.Update(System.Single)">
            <summary>The update function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime">
            <summary>
            A wait action, that ends after a user specified duration.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.#ctor">
            <summary>DelayTime constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.#ctor(System.Single)">
            <summary>DelayTime constructor.</summary>
            <param name="duration">The time to wait, in seconds.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.Run">
            <summary>Kick this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.DelayTime.Update(System.Single)">
            <summary>The update function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1">
            <summary>
            The base class for generic interpolating actions, you just pass set/get functions.
            This is an abstract class.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.TargetValue">
            <summary>The target value.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.IsRelative">
            <summary>If true, the target value is an offset.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Tween">
            <summary>
            The tween/interpolation function, basically a f(x) function where f(x) goes from
            0 to 1 when x goes from 0 to 1.
            Example of function you can set DTween to:
            (t) => Math.Linear(t);
            (t) => Math.ExpEaseIn(t,1.0f);
            (t) => Math.ExpEaseOut(t,1.0f);
            (t) => Math.PowEaseIn(t,4.0f);
            (t) => Math.PowEaseOut(t,4.0f);
            (t) => Math.PowEaseInOut(t,4.0f);
            (t) => Math.BackEaseIn(t,1.0f);
            (t) => Math.BackEaseOut(t,1.0f);
            (t) => Math.BackEaseInOut(t,1.0f);
            (t) => Math.PowerfulScurve(t,3.7f,3.7f);
            (t) => Math.Impulse(t,10.0f);
            (t) => FMath.Sin(t*Math.Pi*0.5f); // for sin curve tween
            More about tweens can be found int he cocos2d documentaiton which itselfs points to:
            http://www.robertpenner.com/easing/easing_demo.html
            http://www.robertpenner.com/easing/penner_chapter7_tweening.pdf
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Set">
            <summary>
            The function that sets the current value as we execute the tween.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Get">
            <summary>
            The function that gets the current value as we execute the tween.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.#ctor">
            <summary>ActionTweenGeneric constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric{`0}.DGet,Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric{`0}.DSet)">
            <summary>ActionTweenGeneric constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Run">
            <summary>Kick this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.Update(System.Single)">
            <summary>The update function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.DSet">
            <summary>
            Target value set function delegate.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGeneric`1.DGet">
            <summary>
            Target value get function delegate.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2">
            <summary>
            ActionTweenGenericVector2 does a simple element wise blend from start value to target value.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector4">
            <summary>
            ActionTweenGenericVector4 does a simple element wise blend from start value to target value.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2Scale">
            <summary>
            ActionTweenGenericVector2Scale is similar to ActionTweenGenericVector2, 
            but acts on scale values (multiplicative).
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionTweenGenericVector2Rotation">
            <summary>
            ActionTweenGenericVector2Rotation interpolates a unit vector 
            (a unit vector interpreted as a rotation).
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.MoveBy">
            <summary>An action that gradually adds an offset to the current position.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.MoveBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>MoveBy constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.MoveTo">
            <summary>An action that gradually moves position to the specified target.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.MoveTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>MoveTo constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ScaleBy">
            <summary>An action that gradually applies an extra scale to the current scale.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ScaleBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>ScaleBy constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ScaleTo">
            <summary>An action that gradually sets the scale to the specified value.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ScaleTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>ScaleTo constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SkewBy">
            <summary>An action that gradually adds an offset to the current skew.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SkewBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>SkewBy constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SkewTo">
            <summary>An action that gradually sets the skew to the specified value.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SkewTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>SkewTo constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RotateBy">
            <summary>An action that gradually adds an offset to the current rotation.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RotateBy.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>RotateBy constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RotateTo">
            <summary>An action that gradually sets the rotation to the specified value.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RotateTo.#ctor(Sce.PlayStation.Core.Vector2,System.Single)">
            <summary>RotateTo constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TintBy">
            <summary>An action that gradually adds an offset to the color.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TintBy.#ctor(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>TintBy constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TintTo">
            <summary>An action that gradually sets the color to the specified value.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TintTo.#ctor(Sce.PlayStation.Core.Vector4,System.Single)">
            <summary>TintTo constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Sequence">
            <summary>
            An action that runs a sequence of other actions, in order.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.#ctor">
            <summary>Sequence constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Add(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            <summary>Add an action this actions sequence.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Run">
            <summary>Kick this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Stop">
            <summary>Stop this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Sequence.Update(System.Single)">
            <summary>The update function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever">
            <summary>
            An action that repeats an other action forever.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.InnerAction">
            <summary>The action to repeat.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Run">
            <summary>Kick this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Stop">
            <summary>Stop this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RepeatForever.Update(System.Single)">
            <summary>The update function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Repeat">
            <summary>
            An action that repeats an action a finite number of times.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.InnerAction">
            <summary>The action to repeat.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Times">
            <summary>The number of times we want to repeat.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase,System.Int32)">
            <summary>
            Repeat constructor.
            </summary>
            <param name="inner_action">The action to repeat.</param>
            <param name="times">The number of times the action must be repeated.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Run">
            <summary>Kick this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Stop">
            <summary>Stop this action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Repeat.Update(System.Single)">
            <summary>The update function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager">
            <summary>
            The ActionManager is the singleton object that manages all Node's actions.
            Its main update loop is called inside Director.Update().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.AddAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase,Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>Add an action to the ActionManager.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAllActions">
            <summary>Remove all actions from the action manager.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAllActionsFromTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>Remove all actions involving Node 'target'.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            <summary>Remove a single action.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.RemoveActionByTag(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>Find an action from tag and remove it.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.GetActionByTag(System.Int32,Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            <summary>Get an action by tag.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.NumRunningActions(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>Count the number of actions involving Node 'target'.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.NumRunningActions">
            <summary>count the total number of actions running.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.Dump">
            <summary>Print some debug information, content might vary in the future.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ActionManager.Instance">
            <summary>The ActionManager singleton.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags">
            <summary>
            The flag bits used by Director.Instance.DebugFlags. 
            By default they are all turned off.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawTransform">
            <summary>
            Draw each node's transform matrix as a red arrow + green arrow.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawPivot">
            <summary>
            Show the pivot for all nodes.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawContentLocalBounds">
            <summary>
            Show the content local bounds of nodes that defined GetlContentLocalBounds.
            Note that the content local bounds is transformed by the parent.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawContentWorldBounds">
            <summary>
            Show the content world bounds of nodes that defined GetlContentLocalBounds.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.DrawGrid">
            <summary>
            Draw a debug world grid, with axis in black and rulers in grey.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.DebugFlags.Navigate">
            <summary>
            Enable debug camera navigation (workd with Camera2D only.)
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Director">
            <summary>
            The Director is a singleton (accessed via Director.Instance) that manages the scene stack 
            and calls the update loop of the Scheduler and ActionManager. Its Update/Render/PostSwap 
            functions must be called manually once in the user main loop, if you are managing the main
            loop yourself.
            It also holds a graphics context (GL), a SpriteRenderer object (that is mostly for internal
            used but that you can also use directly), and a DrawHelpers that is mosty used internally 
            when drawing debug information.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.GL">
            <summary>The graphics context + matrix stack.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.SpriteRenderer">
            <summary>The main SpriteRenderer object.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.DrawHelpers">
            <summary>Some draw helpers for debug draw.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Director.DebugFlags">
            <summary>Some debug flags to enable logging, debug draw, camera navigation etc.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Initialize(System.UInt32,System.UInt32,Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>
            Initialize GameEngine2D
            </summary>
            <param name="sprites_capacity">The maximum number of sprites, passed to SpriteRenderer's constructor.</param>
            <param name="draw_helpers_capacity">The maximum number of vertices that we can use in DrawHelpers.</param>
            <param name="context">The core graphics context.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Terminate">
            <summary>Terminate GameEngine2D</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.#ctor(System.UInt32,System.UInt32,Sce.PlayStation.Core.Graphics.GraphicsContext)">
            <summary>Director constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.ReplaceScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>Replace current scene by an other one.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PushScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>Push a new scene on the scene stack.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PopScene">
            <summary>Pop the top scene on the scene stack (sets previous scene).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Pause">
            <summary>Pause everything.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Resume">
            <summary>Resume everything.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Dump">
            <summary>Print some debug information, content might vary in the future.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Update">
            <summary>
            The main stepping function, that you must call once a frame.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.Render">
            <summary>
            The main render function, that you must call once a frame.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.PostSwap">
            <summary>
            A post swap callback that you must call after SwapBuffers().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Director.RunWithScene(Sce.PlayStation.HighLevel.GameEngine2D.Scene,System.Boolean)">
            <summary>
            This function must be called once by user, to tell the system which Scene object it should start with.
            </summary>
            <param name="scene">The scene to run.</param>
            <param name="manual_loop">Is set to true, the main loop won't be started (the user will have to implement it).</param>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.DirectorTime">
            <summary>A timer that gets incremented everytime Update gets called.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.Instance">
            <summary>The director singleton.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Director.CurrentScene">
            <summary>Get the currently running Scene object.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Label">
            <summary>
            Draw text primitive. 2 types of font data supported:
            - One using SpriteRenderer's embedded debug font
            - The other using a FontMap object
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node">
            <summary>
            Node is the base class for all scenegraph nodes. It holds a standard 2D transform, 
            a list of children and a handle to its parent (a node can have at most 1 parent).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotate(System.Single)">
            <summary>
            Rotate the object by an angle 'angle'.
            Note that this function simply affects the the Rotation/Angle property (it simply "increments" the angle, regardless of Pivot and Position; and all those are combined in GetTransform().)
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotate(Sce.PlayStation.Core.Vector2)">
            <summary>
            Rotate the object by an angle, the angle is given as a unit vector 'rotation'
            This lets you precompute the cos,sin needed during rotation.
            Note that this function simply affects the the Rotation/Angle property (it simply "increments" the angle, regardless of Pivot and Position; and all those are combined in GetTransform().)
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.VertexZ">
            <summary>
            VertexZ is the value set as the z coordinate during drawing. Note that by default ortho view only
            shows the [-1,1] Z range, just set Camera.Znear and Camera.Zfar if you want more.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Visible">
            <summary>If Visible is false, this node and its children are not drawn.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera">
            <summary>
            You can use Node.Camera as a workaround to the fact there is normally only one camera in the scene.
            If Node.Camera is set, all transforms up to this node are ignored, and Node.Camera is push/pop
            everytime we draw this node.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.Name">
            <summary>Identifier for user.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.#ctor">
            <summary>Node constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PushTransform">
            <summary>
            This is called before drawing the node and its children.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PopTransform">
            <summary>
            This is called after drawing the node and its children.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnEnter">
            <summary>
            This function gets called when the scene is started by the Director.Instance.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnExit">
            <summary>
            This function gets called when we exit the Scene or when a child is explicitely removed 
            with RemoveChild() or RemoveAllChildren().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RegisterDisposeOnExitRecursive">
            <summary>
            Recurse through all the subtree (including this node)
            and register Dispose() functions for all the disposable
            objects. Cleanup is called first to make sure we
            don't Dispose() of running objects.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RegisterDisposeOnExit(System.IDisposable)">
            <summary>
            Register a call to Dispose() in the OnExit() function of this node.
            For example, when you want to Dispose() of several objects (TextureInfo,
            FontMap, etc) when you exit a Scene node.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.insert_child(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            	<summary>
            	</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.AddChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            <summary>
            Add a child with draw priority. 
            </summary>
            <param name="child">The child to add.</param>
            <param name="order">The added node's draw priority. Draw order follows order numerical order, 
            negative priorities mean this child node will be drawn before its parent, and children 
            with positive priorities get drawn after their parent.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.AddChild(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>
            Add a child to this node, using its current order.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RemoveChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Boolean)">
            <summary>
            Remove a child from this node.
            </summary>
            <param name="child">The child to remove.</param>
            <param name="do_cleanup">Do we call Cleanup for the removed node.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RemoveAllChildren(System.Boolean)">
            <summary>
            This is equivalent to calling RemoveChild( dispose_flags ) for all children.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ReorderChild(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32)">
            <summary>
            Change order of a child within the Children list.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Reorder(System.Int32)">
            <summary>
            Change the draw order value for this node (see AddChild for details about the draw order).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Traverse(Sce.PlayStation.HighLevel.GameEngine2D.Node.DVisitor,System.Int32)">
            <summary>
            Call the 'visitor' function for this node and all its children, recursively.
            Interrupt traversing if visitor returns false.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DrawHierarchy">
            <summary>
            This called by Director only, but PushTransform, Draw,
            and PopTransform can be overriden.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Draw">
            <summary>
            Renders what's *inside* the PushTransform / PopTransform.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Update(System.Single)">
            <summary>
            The update function.
            The Director decides how many times a frame this function should be called, and with which delta time. 
            At the moment, Update functions are called once using the frame delta time as it is.
            </summary>
            <param name="dt">Delta time in seconds.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawContentLocalBounds">
            <summary>
            Draw bounds of local content and pivot, in Node local space.
            Normally you don't have to override this function, you just 
            override GetlContentLocalBounds() and this function shows it
            when DebugFlags.DrawContentLocalBounds is set for example. 
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawTransformScale">
            <summary>
            A scale factor used by DebugDrawTransform to draw arrows.
            By default this is 1.0f, which means that unit length arrows are of length 1 on screen. 
            he game world showed on screen is too big, arrows of length one might be less then 1 pixel,
            and you won't be able to see them even through they are being drawn. In that case you can 
            scale them with DebugDrawTransform.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.DebugDrawTransform">
            <summary>
            Draw the local coordinate system, as arrows, in Parent Node's local space.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.RunAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            <summary>Start an action on this node.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopAllActions">
            <summary>Stop all actions on this node.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopAction(Sce.PlayStation.HighLevel.GameEngine2D.ActionBase)">
            <summary>Stop an action on this node.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.StopActionByTag(System.Int32)">
            <summary>Search for the first action acting on this node with tag value 'tag' and stop/remove it.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetActionByTag(System.Int32,System.Int32)">
            <summary>Return the 'ith' action with tag 'tag' acting on this node.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.NumRunningActions">
            <summary>Get the number of action acting on this node.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Cleanup">
            <summary>Recursively stop all actions and scheduled functions on this node.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ScheduleUpdate(System.Int32)">
            <summary>Register this node's update function to the scheduler, it will get called everyframe.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.UnscheduleUpdate">
            <summary>Remove the update function from the scheduler.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Schedule(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Int32)">
            <summary>Schedule node function 'func', it will get called everyframe.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ScheduleInterval(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Single,System.Int32)">
            <summary>Schedule node function 'func' so it gets called every 'interval' seconds.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.Unschedule(Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc)">
            <summary>Unschedule node function 'func'.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.UnscheduleAll">
            <summary>Unschedule all functions related to this node.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.ResumeSchedulerAndActions">
            <summary>Sets SchedulerPaused and ActionsPaused to true.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.PauseSchedulerAndActions">
            <summary>Sets SchedulerPaused and ActionsPaused to false.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTransform">
            <summary>
            Return the transform matrix of this node, expressed in its parent space.
            The node transform matrix is formed using the data accessed with the Position, Scale, Skew,
            Rotation/Angle/RotationNormalize, Pivot properties. The transform matrix is equivalent to:
            	  Matrix3.Translation( Position )
            	* Matrix3.Translation( Pivot )
            	* Matrix3.Rotation( Rotation )
            	* Matrix3.Scale( Scale )
            	* Matrix3.Skew( Skew )
            	* Matrix3.Translation( -Pivot )
            Node that the transform matrix returned is a pure 2D transform. 
            VertexZ is applied separately in the PushTransform function.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTransformInverse">
            <summary>
            Get the inverse of this node 's transform matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetWorldTransform">
            <summary>
            Return the transform matrix of this node, expressed in its world/parent Scene space.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.CalcWorldTransformInverse">
            <summary>
            Get the inverse of this node's world transform matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.LocalToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>
            LocalToWorld Should return the same as ( GetWorldTransform() * local_point.Xy1 ).Xy.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.WorldToLocal(Sce.PlayStation.Core.Vector2)">
            <summary>
            Should return the same as ( CalcWorldTransformInverse() * world_point.Xy1 ).Xy.
            The local space of the node is the space in which its geometry is defined, 
            i.e one level below GetWorldTransform().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            <summary>
            Get the bounds for the content/geometry of this node (only), in node space (no recursion).
            Nodes that don't have any content just return false.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetContentWorldBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            <summary>
            Get the bounds for the content of this node (only), in world space (no recursion).
            Nodes that don't have any content just return false and don't touch bounds.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.IsWorldPointInsideContentLocalBounds(Sce.PlayStation.Core.Vector2)">
            <summary>
            Return true if 'world_position' is inside the content oriented bounding box.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.FindParentPlane(Sce.PlayStation.Core.Matrix4@)">
            <summary>
            Follow parent hierarchy until we find a Plane3D node,
            and set 'mat' to the Plane3D's plane matrix.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.NormalizedToWorld(Sce.PlayStation.Core.Vector2)">
            <summary>
            Like Director.Instance.CurrentScene.Camera.NormalizedToWorld, but deals with
            the case when there is a Plane3D among ancestors in the scenegraph.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Node.GetTouchPos(System.Int32,System.Boolean)">
            <summary>
            Like Director.Instance.CurrentScene.Camera.GetTouchPos, but deals with
            the case when there is a Plane3D among ancestors in the scenegraph.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Position">
            <summary>See GetTransform() for details about how the transform matrix is constructed.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Rotation">
            <summary>
            Rotation is directly stored as a (cos,sin) unit vector. 
            This the code to be potentially cos,sin calls free, and as a side
            effect we get the direction vector for free, and also avoid all the usual angle wrapping problems.
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.RotationNormalize">
            <summary>
            RotationNormalize is like Rotation, but it normalizes on set,
            to prevent the unit vector from drifting because of accumulated numerical imprecision.
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Angle">
            <summary>
            This property lets you set/get rotation as a angle. This is expensive and brings the usual
            angle discontinuity problems. The angle is always stored and returned in the the range -pi,pi.
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Scale">
            <summary>
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Skew">
            <summary>
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Pivot">
            <summary>
            Pivot is the pivot used for scale and rotation, and is expressed in this Node's local 'normalized' space.
            Which means that (0.5,0.5) is always the center of the object, regardless of the Scale for example.
            See GetTransform() for details about how the transform matrix is constructed.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Parent">
            <summary>The parent node in the scenegraph. A node can only be the child of at most one parent node.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Children">
            <summary>The list of children nodes.</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.GameEngine2D.Node.AdHocDraw">
            <summary>
            If set, AdHocDraw gets called in the base Draw function. This is used mostly so we can setup simple scenes 
            without always having to derive just so we can define a Draw function.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera2D">
            <summary>Shortcut to get the camera as a Camera2D.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Camera3D">
            <summary>Shortcut to get the camera as a Camera3D.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.IsRunning">
            <summary>This property is true when this node is between its OnEnter()/OnExit() calls.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.Order">
            <summary>The draw order value that was set in ReorderChild() or AddChild().</summary>
        </member>
        <member name="E:Sce.PlayStation.HighLevel.GameEngine2D.Node.OnExitEvents">
            <summary>
            List of events to perform when OnExit gets called.
            The list gets cleared after it is executed.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.ActionsPaused">
            <summary>All actions related to this node can be paused on and off with this flag.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Node.SchedulerPaused">
            <summary>All scheduled functions related to this node can be paused on and off with this flag.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DDraw">
            <summary>
            The delegate type used by AdHocDraw property.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DOnExitEvent">
            <summary>Delegate for OnExit() events.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Node.DVisitor">
            <summary>
            Function type to pass to the .Traverse method.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Text">
            <summary>The text to display.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Color">
            <summary>The text color.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.BlendMode">
            <summary>The text blend mode.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.HeightScale">
            <summary>A scale factor applied to the character's pixel height during rendering.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.FontMap">
            <summary>The fontmap used to display this Label (the character set has to match).</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Label.Shader">
            <summary>
            User can set an external shader. 
            The Label class won't dispose of shaders set by user.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.#ctor">
            <summary>Label constructor.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.HighLevel.GameEngine2D.Label.#ctor(System.String,Sce.PlayStation.HighLevel.GameEngine2D.Base.FontMap)" -->
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.Draw">
            <summary>The draw function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            <summary>Return the Bounds2 object containing the text, in local space.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Label.GetlContentLocalBounds">
            <summary>Return the Bounds2 object containing the text, in local space.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Label.FontHeight">
            <summary>The font character height in pixels.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Label.CharWorldHeight">
            <summary>The character height in world coordinates = FontHeight * HeightScale.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D">
            <summary>
            The Plane3D node allows 3d orientations in the scenegraph, to some extent.
            That somewhat complicates the way we deal with touch coordinates, so if you have a
            Plane3D in your scene hierarchy, make sure you use Node.GetTouchPos() to get points
            in the Plane3D space (were all subnodes are), instead of using directly
            Director.Instance.CurrentScene.Camera.GetTouchPos().
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.ModelMatrix" -->
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.#ctor">
            <summary>
            Plane3D constructor.
            Defaults to z=0 plane (identity).
            Please refer to ModelMatrix's comment for more details.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.#ctor(Sce.PlayStation.Core.Matrix4)">
            <summary>Plane3D constructor.</summary>
            <param name="modelmatrix">The value to set ModelMatrix to. 
            Please refer to ModelMatrix's comment for more details.
            </param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Plane3D.FindParentPlane(Sce.PlayStation.Core.Matrix4@)">
            <summary>
            Note: FindParentPlane stops at the first encounterd Plane3D.
            We assume we can't have several Plane3D nodes along a tree branch.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Scene">
            <summary>Scene is the type of a root node in the scene graph. You can use the 
            Director singleton to manipulate the scene stack, can the current scene can be 
            accessed with Director.Instance.CurrentScene. Only one scene is active at a time, except 
            during scene transition when 2 scenes might be active at the same time to 
            allow blending.
            Scene also holds the main Camera.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.NoClear">
            <summary>
            Normally, the scene clears the screen in its internal render function.
            You can suppress this automatic clear by setting NoClear to true.
            Note that if you disable the automatic scene clear, some TransitionScene effects won't work properly
            (since some scene transitions need to render the 2 transitioned scenes offscreen to blend them).
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.DrawGridStep">
            <summary>
            Cell size of the debug grid drawn when DebugFlags.DrawGrid is set in Director.Instance.DebugFlags.
            When the value is -1.0f (the default) the debug grid cell size is automatically ajusted to never 
            show more than DrawGridAutoStepMaxCells subdivisions along the longest axis viewed.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Scene.DrawGridAutoStepMaxCells">
            <summary>
            When DrawGridStep is set to -1, the debug grid cell size is calculated automatically.
            The cell size increases in powers of 2 as you zoom out, in a way there are never more 
            than DrawGridAutoStepMaxCells subdivisions along the longest axis viewed. 
            Warning: increasing this value too much might cause too many lines to be drawn, and 
            overflow the vertex array used in DrawHelpers'immediate mode. 
            The debug grid stops being drawn if the automatically calculated step size is bigger than 2^15.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.#ctor">
            <summary>
            Scene constructor.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.OnEnter">
            <summary>
            This function gets called when the scene is started by the Director.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.OnExit">
            <summary>
            Scene's OnExit calls Cleanup() by default. 
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.IsTransitionScene">
            <summary>
            Return true if the scene is of TransitionScene type.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scene.draw_content_world_bounds">
            Render all nodes's content bounding boxes in world space. This is mostly
            to debug GetContentWorldBounds. Note that this  function ignores Plane3D 
            at the moment, so if your scene has any Plane3D, the debug primitive 
            drawn will look confusing.
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Scene.SceneTime">
            <summary>
            The total time elapse since the scene started, in seconds.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc">
            <summary>
            The delegate type for functions added to the Scheduler has to match Node.Update's signature.
            We can't use anonymous functions because we want to be able to find and delete.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler">
            <summary>
            The Scheduler is the singleton that manages Node related update functions registered by the user.
            Scheduled functions can be called everyframe, or at user special intervals in seconds.
            The Scheduler update loop is called inside Director.Update().
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Schedule(Sce.PlayStation.HighLevel.GameEngine2D.Node,Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc,System.Single,System.Boolean,System.Int32)">
            <summary>
            Register a Node function in the scheduler.
            </summary>
            <param name="target">The target node for the scheduled function.</param>
            <param name="func">The scheduled function.</param>
            <param name="interval">Period at which the function should be called (in seconds). Zero means "everyframe".</param>
            <param name="paused">Set the scheduler paused state for that node.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Unschedule(Sce.PlayStation.HighLevel.GameEngine2D.Node,Sce.PlayStation.HighLevel.GameEngine2D.DSchedulerFunc)">
            <summary>
            Remove a function from the scheduler.
            </summary>
            <param name="target">The target node for the removed function.</param>
            <param name="func">The function to remove.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleAll(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>
            Remove all functions related to a given node from the scheduler.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleAll">
            <summary>
            Remove all functions from the scheduler.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.ScheduleUpdateForTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node,System.Int32,System.Boolean)">
            <summary>
            Schedule a Node's Update function to be called everyframe.
            </summary>
            <param name="target">The target node.</param>
            <param name="priority">Priority of the Update function in the scheduler.</param>
            <param name="paused">The scheduler paused stated for that node.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.UnscheduleUpdateForTarget(Sce.PlayStation.HighLevel.GameEngine2D.Node)">
            <summary>
            Remove a Node's Update function from the scheduler.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Dump">
            <summary>Print some debug information, content might vary in the future.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.Scheduler.Instance">
            <summary>The scheduler singleton.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase">
            <summary>
            Base class for single sprite nodes.
            This is an abstract class.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Quad">
            <summary>
            Sprite geometry in the node's local space. 
            A TRS defines an oriented rectangle.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.FlipU">
            <summary>If true, the sprite UV are flipped horizontally.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.FlipV">
            <summary>If true, the sprite UV are flipped vertically.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Color">
            <summary>The sprite color.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.BlendMode">
            <summary>The blend mode.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.TextureInfo">
            <summary>
            This is used only if the Sprite is drawn standalone (not in a SpriteList).
            If Sprite is used in a SpriteList, then the SpriteList's TextureInfo is used.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Shader">
            <summary>The shader.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CalcSizeInPixels">
            <summary>Return the dimensions of this sprite in pixels.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.#ctor">
            <summary>SpriteBase constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>SpriteBase constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.Draw">
            <summary>The draw function (expensive, standalone draw).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.GetlContentLocalBounds(Sce.PlayStation.HighLevel.GameEngine2D.Base.Bounds2@)">
            <summary>
            The content local bounds is the smallest Bounds2 containing this 
            sprite's Quad, and Quad itself (the sprite rectangle) if there is 
            no rotation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.GetlContentLocalBounds">
            <summary>
            The content local bounds is the smallest Bounds2 containing this 
            sprite's Quad, and Quad itself (the sprite rectangle) if there is 
            no rotation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.MakeFullScreen">
            <summary>
            Stretch sprite Quad so that it covers the entire screen. The scene
            needs to have been set/started, since it uses CurrentScene.Camera.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CenterSprite">
            <summary>
            Translate sprite geometry so that center of the sprite becomes aligned 
            with the position of the Node.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteBase.CenterSprite(Sce.PlayStation.Core.Vector2)">
            <summary>
            Modify the center of the sprite geometry.
            </summary>
            <param name="new_center">
            The new center, specified in Node local coordinates.
            You can pass constants defined under TRS.Local for conveniency.
            </param>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV">
            <summary>
            SpriteUV is a sprite for which you set uvs manually. Uvs are stored as a TRS object. 
            Note that the cost of using SpriteUV alone is heavy, try as much as you can to 
            use then as children of SpriteList.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.UV">
            <summary>The UV is specified as a TRS, which lets you define any oriented rectangle in the UV domain.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.#ctor">
            <summary>SpriteUV constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>SpriteUV constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteUV.CalcSizeInPixels">
            <summary>
            Based on the uv and texture dimensions, return the corresponding size in pixels.
            For example you might want to do something like bob.Quad.S = bob.CalcSizeInPixels().
            If the uv is Quad0_1 (the 0,1 unit quad), then this will return thr texture size in pixels.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile">
            <summary>
            SpriteTile is a sprite for which you specify a tile index (1D or 2D) in a TextureInfo. 
            Note that the cost of using SpriteUV alone is heavy, try as much as you can to use 
            then as children of SpriteList.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.TileIndex2D">
            <summary>
            TileIndex2D defines the UV that will be used for this sprite. 
            Tiles are indexed in 2 dimensions.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor">
            <summary>
            SpriteTile constructor.
            TileIndex2D is set to (0,0) by default.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>
            SpriteTile constructor.
            TileIndex2D is set to (0,0) by default.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i)">
            <summary>
            SpriteTile constructor.
            TileIndex2D is set to (0,0) by default.
            </summary>
            <param name="texture_info">The tiled texture object.</param>
            <param name="index">2D tile index. (0,0) is the bottom left tile.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo,System.Int32)">
            <summary>
            SpriteTile constructor.
            </summary>
            <param name="texture_info">The tiled texture object.</param>
            <param name="index">1D tile index. Flat indexing starts from bottom left tile, which is (0,0) in 2D.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.CalcSizeInPixels">
            <summary>
            Based on the uv and texture dimensions, return the corresponding size in pixels.
            For example you might want to do something like bob.Quad.S = bob.CalcSizeInPixels().
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.SpriteTile.TileIndex1D">
            <summary>
            Instead of TileIndex2D you can also work with a flattened 1d index, for animation, etc.
            In that case the set/get calculation depend on TextureInfo, so TextureInfo must have 
            been set properly.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList">
            <summary>
            Draw sprites in batch to reduce the number of draw calls, state setup etc.
            Just adding SpriteUV or SpriteTile objects as children of a SpriteList with AddChild()
            will enable batch rendering, with the limitation that the TextureInfo, BlendMode, 
            and Color property of the sprites will be ignored in favor of the parent SpriteList's 
            TextureInfo, BlendMode, and Color properties.
            Important: some functions in SpriteUV and SpriteTile use their local TextureInfo
            instead of the parent's SpriteTile one, so you probably want to set both to be safe.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.EnableLocalTransform">
            <summary>
            If EnableLocalTransform flag is true, the children sprite's local transform matrices get used,
            but vertices get partly transformed on the cpu. You can turn this behavior off to ignore the local 
            transform matrix to save a little bit of cpu processing (and rely on Sprite's Quad only 
            to position the sprite). In that case (EnableLocalTransform=false) the Position, Scale, Skew, Pivot 
            will be ignored.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.Color">
            <summary>The color that will be used for all sprites in the Children list.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.BlendMode">
            <summary>The blend mode that will be used for all sprites in the Children list.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.TextureInfo">
            <summary>The TextureInfo object that will be used for all sprites in the Children list.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.Shader">
            <summary>The shader that will be used for all sprites in the Children list.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.SpriteList.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>
            SpriteList constructor.
            TextureInfo must be specified in constructor since there is no default for it.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile">
            <summary>Data struct used by RawSpriteTileList.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.Quad">
            <summary>Sprite geometry (position, rotation, scale define a rectangle).</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.TileIndex2D">
            <summary>The tile index.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.FlipU">
            <summary>If true, the sprite UV are flipped horizontally.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.FlipV">
            <summary>If true, the sprite UV are flipped vertically.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTile.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TRS,Sce.PlayStation.HighLevel.GameEngine2D.Base.Vector2i,System.Boolean,System.Boolean)">
            <summary>RawSpriteTile constructor.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList">
            <summary>
            Draw sprites in batch to reduce number of draw calls, state setup etc.
            Unlike SpriteList, instead of holding a list of Node objects, this holds 
            a list of RawSpriteTile, which is more lightweight. In effect this is a 
            thin wrap of SpriteRenderer, usable as a Node.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Sprites">
            <summary>The list of RawSpriteTile objects to render.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Color">
            <summary>The color that will be used for all sprites in the Children list.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.BlendMode">
            <summary>The blend mode that will be used for all sprites in the Children list.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.TextureInfo">
            <summary>The TextureInfo object that will be used for all sprites in the Children list.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Shader">
            <summary>The shader that will be used for all sprites in the Children list.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Base.TextureInfo)">
            <summary>
            RawSpriteTileList constructor.
            TextureInfo must be specified in constructor since there is no default for it.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.Draw">
            <summary>The draw function, draws all sprites in Sprites list.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sce.PlayStation.HighLevel.GameEngine2D.RawSpriteTileList.CalcSizeInPixels" -->
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene">
            <summary>
            Base class for scenes transition nodes. Those nodes make a visual
            transition between 2 given scenes, the current one and the next
            one. During the transition, both scenes are potentially updated
            and rendered at the same time.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.PreviousScene">
            <summary>The previous scene we are transitioning from.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.NextScene">
            <summary>The scene we are transitioning to.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.Duration">
            <summary>Transition duration in seconds.</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.KeepRendering">
            <summary>If true, keep updating both scenes during the transition (more expensive).</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.IsTransitionScene">
            <summary>Returns true for all scene deriving from TransitionScene.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.OnEnter">
            <summary></summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.TransitionScene.FadeCompletion">
            <summary>Fade completion, [0,1] range.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase">
            <summary>
            Base class for scenes transition doing a fade of some kind,
            requiring offscreen rendering for both scenes.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.Terminate">
            <summary>Dispose of static resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.OnEnter">
            <summary></summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionFadeBase.Draw">
            <summary>The draw function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.DTween">
            <summary>delegate type.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade">
            <summary>
            TransitionSolidFade fades the current scene to black before fading the
            next scene in.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.Tween">
            <summary>DTween.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionSolidFade.Draw">
            <summary>The draw function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade">
            <summary>
            TransitionCrossFade uses a blend to cross fades the 2 transitioning scenes.
            You can set a DTween to control the fade.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.Tween">
            <summary>DTween.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionCrossFade.Draw">
            <summary>The draw function.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade">
            <summary>
            TransitionDirectionalFade uses a translating blend mask to cross fade between 2
            scenes. The old gets replaced by the new one as the cross fade line moves
            along a direction specified by user.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Width">
            <summary>width of the transition zone (normalized value, roughly 0,1)</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Direction">
            <summary>moving direction</summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Tween">
            <summary>DTween.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.#ctor(Sce.PlayStation.HighLevel.GameEngine2D.Scene)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Terminate">
            <summary>Dispose of static resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.Draw">
            <summary>The draw function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.TransitionDirectionalFade.SpriteShaderDirFade.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem">
            <summary>
            A simple particle system effect.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.TextureInfo">
            <summary>
            The texture information for this particle system. All particles use the same image.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Color">
            <summary>
            A global multiplier color for the particle system.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.BlendMode">
            <summary>
            The blend mode used by the particle system.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Emit">
            <summary>
            Parameters used for controlling the emission and initial parameters of particles.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Simulation">
            <summary>
            Parameters used for controlling the simulation.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.RenderTransform">
            <summary>
            The modelview matrix used for rendering the particle system.
            RenderTransform overrides base class's Node.GetTransform() to render the local geometry.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.m_default_shader">
            particle system's default shader (texture * color).
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Shader">
            <summary>
            User can set an external shader. 
            The Label class won't dispose of shaders set by user (other than ParticleSystem.DefaultShader).
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.#ctor(System.Int32)">
            <summary>
            ParticleSystem constructor.
            </summary>
            <param name="max_particles">The maximum number of particles for this particle system.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Terminate">
            <summary>Dispose of static resources.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.CreateParticle(System.Boolean)">
            <summary>
            Particles get created automatically using Emit parameters,
            but if needed you can also create and init particles yourself.
            </summary>
            <param name="skip_auto_init">
            If false, the created particle gets initialized using the Emit parameters, just 
            like the particles randomly created everyframe (this is in case you want to use 
            a random variation as a starting point).
            </param>
            <returns>A handle to the particle just created</returns>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Update(System.Single)">
            <summary>The update function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Draw">
            <summary>The draw function.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.MaxParticles">
            <summary>
            The maximum number of particles the system can deal with.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticlesCount">
            <summary>
            The current number of particles alive.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IsFull">
            <summary>
            Return true if the number of active particles has reached maximum capacity.
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.DefaultShader">
            <summary>
            The particle system's default shader (texture * color).
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Disposed">
            <summary>Return true if this object been disposed.</summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticleShaderDefault">
            <summary>
            Default shader, texture modulated by a color.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader">
            <summary>ParticleSystem's shader interface.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.SetMVP(Sce.PlayStation.Core.Matrix4@)">
            <summary>Set the Projection*View*Model matrix.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.SetColor(Sce.PlayStation.Core.Vector4@)">
            <summary>Set a global color.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.IParticleShader.GetShaderProgram">
            <summary>Return the shader's ShaderProgram object.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.ParticleShaderDefault.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle">
            <summary>
            Particle object returned by CreateParticle.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Velocity">
            <summary>
            Velocity.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Age">
            <summary>
            Age (particle dies when Age >= LifeSpan).
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.LifeSpan">
            <summary>
            Life span
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.LifeSpanRcp">
            <summary>
            Life span reciprocal - if you don't use the automatic init, you must make sure to set this to 1.0f/LifeSpan
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Angle">
            <summary>
            Rotation angle
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.AngularVelocity">
            <summary>
            Angular velocity
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ScaleStart">
            <summary>
            Scale when Age=0.0
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ScaleDelta">
            <summary>
            ScaleDelta must be initialized to ( scale_end - ScaleStart ) / LifeSpan
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ColorStart">
            <summary>
            Color when Age=0.0
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ColorDelta">
            <summary>
            ColorDelta must be initialized to ( color_end - ColorStart ) / LifeSpan
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.ToString">
            <summary>Return the string representation of this Particle.</summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Scale">
            <summary>
            Scale
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.Particle.Dead">
            <summary>
            Check if the particle is still alive
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams">
            <summary>
            This class regroups all the parameters needed to initialize a particle.
            Most values have a variance associated to them (-Var suffix), to give a 
            randomization range. When the variance is a "relative" value (-RelVar suffix), 
            a value between  0,1 is expected. For example: 0.2f means the corresponding 
            value will be randomized -+20% at creation time.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Transform">
            <summary>
            The generated position, velocity, angle are transformed by this.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.TransformForVelocityEstimate">
            <summary>
            The transform matrix we use to estimate a velocity and an angular velocity.
            You probably want to set it everyframe to something relevant (the current 
            transform of the object node for example).
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ForwardMomentum">
            <summary>
            Control how much of the "observed velocity" we add to the created particles.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularMomentun">
            <summary>
            Control how much of the "observed angular velocity" we add to the created particles.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.WaitTime">
            <summary>
            The time to wait until the next particle gets created, in seconds.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.WaitTimeRelVar">
            <summary>
            WaitTime's variance (relative)
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.LifeSpan">
            <summary>
            Created particles's life span in seconds.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.LifeSpanRelVar">
            <summary>
            LifeSpan's variance (relative)
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Position">
            <summary>
            Created particles's initial position (see also InLocalSpace)
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.PositionVar">
            <summary>
            Position's variance
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Velocity">
            <summary>
            Created particles's initial velocity given to created particles (see also InLocalSpace) 
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.VelocityVar">
            <summary>
            Velocity's variance
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularVelocity">
            <summary>
            Created particles's initial angular velocity, in radians (see also InLocalSpace) 
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngularVelocityVar">
            <summary>
            AngularVelocity's variance
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.Angle">
            <summary>
            Created particles's initial rotation angle in radians (see also InLocalSpace) 
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.AngleVar">
            <summary>
            Angle's variance
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorStart">
            <summary>
            Created particles's initial color
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorStartVar">
            <summary>
            ColorStart's variance
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorEnd">
            <summary>
            Color the particle will have when they reach their life span
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ColorEndVar">
            <summary>
            ColorEnd's variance
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleStart">
            <summary>
            Created particles's initial size 
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleStartRelVar">
            <summary>
            ScaleStart's variance (relative)
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleEnd">
            <summary>
            Size the particle will have when they reach their life span
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ScaleEndRelVar">
            <summary>
            ScaleEnd's variance (relative)
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.#ctor">
            <summary>EmitterParams constructor.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.EmitterParams.ToString(System.String)">
            <summary>Return the string representation of this EmitterParams.</summary>
            <param name="prefix">A prefix string added to the beginning of each line.</param> 
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams">
            <summary>
            SimulationParams regroups all the parameters needed by the Update and Draw 
            to advance and render the particles.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Friction">
            <summary>
            A global friction applied to all particles.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.GravityDirection">
            <summary>
            Gravity direction (unit vector).
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Gravity">
            <summary>
            Gravity amount.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.WindDirection">
            <summary>
            Wind direction (unit vector).
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Wind">
            <summary>
            Amount of wind.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.BrownianScale">
            <summary>
            Amount of brownian motion you want to add to each particle.
            For each particle, a different random direction is added to 
            the wind everyframe. You can use that to add a touch of gas/dust 
            effects.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.ParticleSystem.SimulationParams.Fade">
            <summary>
            The Fade value is a value in 0,1 that controls how fast you want the 
            particle to fade in/fade out (when it dies)
            The particle's color's alpha value is multiplied by a symmetric fade
            curve; Fade is the length of the start and end fade areas, for example 
            if Fade is 0.25, the particle will be fully visible at 25% of its age.
            </summary>
        </member>
        <member name="T:Sce.PlayStation.HighLevel.GameEngine2D.Particles">
            <summary>
            Particles wraps a single ParticleSystem into a scenegraph node.
            </summary>
        </member>
        <member name="F:Sce.PlayStation.HighLevel.GameEngine2D.Particles.ParticleSystem">
            <summary>
            The actual ParticleSystem object used by this Particles node.
            </summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.#ctor(System.Int32)">
            <summary>
            ParticleSystem constructor.
            Note that the constructor calls ScheduleUpdate().
            </summary>
            <param name="max_particles">The maximum number of particles for this particle system.</param>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Update(System.Single)">
            <summary>The update function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Draw">
            <summary>The draw function.</summary>
        </member>
        <member name="M:Sce.PlayStation.HighLevel.GameEngine2D.Particles.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
    </members>
</doc>
